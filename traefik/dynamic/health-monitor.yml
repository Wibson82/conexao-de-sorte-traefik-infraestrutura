---
# =============================================================================
# üè• HEALTH MONITOR CENTRALIZADO - TRAEFIK
# =============================================================================
#
# Exposi√ß√£o de endpoints de health check centralizados para:
# - Integra√ß√£o com GitHub Actions workflows
# - Monitoramento de infraestrutura
# - Dashboard de observabilidade
# - Deploy validation autom√°tico
#
# Endpoints dispon√≠veis:
# - /health/overall - Status geral de todos os servi√ßos
# - /health/infrastructure - Status da infraestrutura (MySQL, Redis, etc)
# - /health/backend - Status dos microservi√ßos backend
# - /health/individual/{service} - Status individual por servi√ßo
# =============================================================================

http:
  # ===========================================================================
  # üåê ROUTERS - Health Monitor Endpoints
  # ===========================================================================
  routers:
    # -------------------------------------------------------------------------
    # üìä HEALTH OVERVIEW - Status geral de todos os servi√ßos
    # -------------------------------------------------------------------------
    health-overall:
      rule: "(Host(`conexaodesorte.com.br`) || Host(`www.conexaodesorte.com.br`)) && Path(`/traefik/health/overall`)"
      entrypoints:
        - websecure
      tls:
        certResolver: letsencrypt
      service: health-aggregator
      middlewares:
        - traefik-path-trim
        - health-headers
        - cors-health

    # -------------------------------------------------------------------------
    # üóÑÔ∏è INFRASTRUCTURE HEALTH - MySQL, Redis, Kafka, etc
    # -------------------------------------------------------------------------
    health-infrastructure:
      rule: "(Host(`conexaodesorte.com.br`) || Host(`www.conexaodesorte.com.br`)) && Path(`/traefik/health/infrastructure`)"
      entrypoints:
        - websecure
      tls:
        certResolver: letsencrypt
      service: health-infrastructure
      middlewares:
        - traefik-path-trim
        - health-headers
        - cors-health

    # -------------------------------------------------------------------------
    # üñ•Ô∏è BACKEND SERVICES HEALTH - Microservi√ßos aplica√ß√£o
    # -------------------------------------------------------------------------
    health-backend:
      rule: "(Host(`conexaodesorte.com.br`) || Host(`www.conexaodesorte.com.br`)) && Path(`/traefik/health/backend`)"
      entrypoints:
        - websecure
      tls:
        certResolver: letsencrypt
      service: health-backend
      middlewares:
        - traefik-path-trim
        - health-headers
        - cors-health

    # -------------------------------------------------------------------------
    # üîç INDIVIDUAL SERVICE HEALTH - Status por servi√ßo espec√≠fico
    # -------------------------------------------------------------------------
    health-individual:
      rule: "(Host(`conexaodesorte.com.br`) || Host(`www.conexaodesorte.com.br`)) && PathPrefix(`/traefik/health/service/`)"
      entrypoints:
        - websecure
      tls:
        certResolver: letsencrypt
      service: health-individual
      middlewares:
        - traefik-path-trim
        - health-headers
        - cors-health
        - health-service-rewrite

  # ===========================================================================
  # üè• SERVICES - Health Check Backends
  # ===========================================================================
  services:
    # -------------------------------------------------------------------------
    # üìä HEALTH AGGREGATOR - Consolida status de todos os servi√ßos
    # -------------------------------------------------------------------------
    health-aggregator:
      loadBalancer:
        servers:
          # Health monitor centralizado exposto via path /health/overall
          - url: "http://conexao-traefik_health-monitor:8080"
        healthCheck:
          path: "/health/overall"
          interval: 10s
          timeout: 3s

    # -------------------------------------------------------------------------
    # üóÑÔ∏è INFRASTRUCTURE SERVICES - Status da infraestrutura
    # -------------------------------------------------------------------------
    health-infrastructure:
      loadBalancer:
        servers:
          # Nginx health monitor consolidado
          - url: "http://conexao-traefik_health-monitor:8080"
        healthCheck:
          path: "/health/infrastructure"
          interval: 30s
          timeout: 5s
      # NOTA: MySQL, Redis, Kafka, RabbitMQ s√£o monitorados via health checks pr√≥prios
      # RabbitMQ management requer autentica√ß√£o - ser√° integrado posteriormente

    # -------------------------------------------------------------------------
    # üñ•Ô∏è BACKEND MICROSERVICES - Status dos servi√ßos de aplica√ß√£o
    # -------------------------------------------------------------------------
    health-backend:
      loadBalancer:
        servers:
          # Gateway Health Check (√∫nico microservice deployado) - Docker Swarm service name
          - url: "http://conexao-gateway_gateway:8086"
        healthCheck:
          path: "/actuator/health"
          interval: 30s
          timeout: 5s
      # NOTA: Quando outros microservices forem deployados, adicionar aqui:
      # - conexao-autenticacao_autenticacao:8081
      # - conexao-usuario_usuario:8084
      # - conexao-resultados_resultados:8083

    # -------------------------------------------------------------------------
    # üîç INDIVIDUAL SERVICE - Proxy para health checks individuais
    # -------------------------------------------------------------------------
    health-individual:
      loadBalancer:
        servers:
          # Health Monitor service que roteia para servi√ßos espec√≠ficos
          - url: "http://conexao-traefik_health-monitor:8080"

  # ===========================================================================
  # üîß MIDDLEWARES - Health Monitor Espec√≠ficos
  # ===========================================================================
  middlewares:
    # -------------------------------------------------------------------------
    # üìã HEALTH HEADERS - Headers espec√≠ficos para health endpoints
    # -------------------------------------------------------------------------
    health-headers:
      headers:
        customRequestHeaders:
          X-Health-Monitor: "traefik-central"
          X-Monitor-Version: "1.0.0"
        customResponseHeaders:
          X-Health-Endpoint: "centralized"
          X-Cache-Control: "no-cache, no-store, must-revalidate"
          X-Content-Type-Options: "nosniff"

    # -------------------------------------------------------------------------
    # üåê CORS HEALTH - CORS espec√≠fico para health checks
    # -------------------------------------------------------------------------
    cors-health:
      headers:
        accessControlAllowMethods:
          - GET
          - OPTIONS
        accessControlAllowOriginList:
          - "https://*.conexaodesorte.com.br"
          - "https://github.com"
          - "https://api.github.com"
        accessControlAllowHeaders:
          - "Content-Type"
          - "Authorization"
          - "X-Health-Monitor"
        accessControlExposeHeaders:
          - "X-Health-Status"
          - "X-Service-Count"
          - "X-Healthy-Count"
        accessControlMaxAge: 86400

    # -------------------------------------------------------------------------
    # üîÑ HEALTH SERVICE REWRITE - Reescreve URLs para servi√ßos individuais
    # -------------------------------------------------------------------------
    health-service-rewrite:
      replacePath:
        path: "/actuator/health"

# =============================================================================
# üìã ENDPOINTS DISPON√çVEIS PARA GITHUB ACTIONS
# =============================================================================
#
# 1. STATUS GERAL:
#    GET https://conexaodesorte.com.br/traefik/health/overall
#    Retorna: {"status":"healthy","services":15,"healthy":12,"unhealthy":3}
#
# 2. INFRAESTRUTURA:
#    GET https://conexaodesorte.com.br/traefik/health/infrastructure
#    Retorna: {"mysql":"healthy","redis":"healthy","kafka":"degraded"}
#
# 3. BACKEND SERVICES:
#    GET https://conexaodesorte.com.br/traefik/health/backend
#    Retorna: {"gateway":"healthy","resultados":"starting","auth":"down"}
#
# 4. SERVI√áO INDIVIDUAL:
#    GET https://conexaodesorte.com.br/traefik/health/service/resultados
#    Retorna: {"status":"healthy","uptime":"2m30s","version":"1.0.0"}
#
# =============================================================================
# üöÄ INTEGRA√á√ÉO GITHUB ACTIONS - EXEMPLO
# =============================================================================
#
# ```yaml
# - name: üè• Validate deployment health
#   run: |
#     # Aguardar servi√ßo ficar healthy
#     timeout 300 bash -c 'until curl -f https://conexaodesorte.com.br/traefik/health/service/resultados; do sleep 10; done'
#
#     # Verificar status geral
#     response=$(curl -s https://conexaodesorte.com.br/traefik/health/overall)
#     healthy_count=$(echo "$response" | jq -r '.healthy')
#     total_count=$(echo "$response" | jq -r '.services')
#
#     if [[ $healthy_count -ge $((total_count * 80 / 100)) ]]; then
#       echo "‚úÖ Deployment successful - $healthy_count/$total_count services healthy"
#     else
#       echo "‚ùå Deployment failed - only $healthy_count/$total_count services healthy"
#       exit 1
#     fi
# ```
# =============================================================================
