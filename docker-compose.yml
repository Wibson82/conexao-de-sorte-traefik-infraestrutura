---
# =============================================================================
# 🌐 TRAEFIK INFRASTRUCTURE - CONSOLIDATED SECURE VERSION
# =============================================================================
#
# VERSÃO CONSOLIDADA E SEGURA que resolve conflitos entre:
# - docker-compose.yml (labels standalone conflitantes)
# - docker-compose.swarm.yml (configuração incompleta)
#
# VERSÃO: v3.5.2-consolidated
# COMPATIBILIDADE: Docker Swarm (Recomendado) + Standalone
# SEGURANÇA: Enterprise Grade + Azure Key Vault Integration
# CONFLITOS RESOLVIDOS: ✅ Labels, ✅ Networks, ✅ Health Checks, ✅ Security
# =============================================================================

services:
  # ===========================================================================
  # 🏥 HEALTH MONITOR SERVICE
  # ===========================================================================
  health-monitor:
    build:
      context: .
      dockerfile: health-server/Dockerfile
    restart: unless-stopped
    networks:
      - conexao-network-swarm
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./scripts:/app/scripts:ro
    environment:
      - TZ=${TZ:-America/Sao_Paulo}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      resources:
        limits:
          memory: 128M
          cpus: '0.1'
        reservations:
          memory: 64M
          cpus: '0.05'
      labels:
        # Traefik routing for health endpoints
        - traefik.enable=true
        - traefik.docker.network=conexao-network-swarm

        # Health Overall Endpoint
        - traefik.http.routers.health-overall.rule=Host(`${TRAEFIK_DOMAIN:-traefik.conexaodesorte.com.br}`) && Path(`/health/overall`)
        - traefik.http.routers.health-overall.entrypoints=websecure
        - traefik.http.routers.health-overall.tls.certresolver=letsencrypt
        - traefik.http.routers.health-overall.service=health-monitor
        - traefik.http.routers.health-overall.middlewares=cors-health

        # Health Infrastructure Endpoint
        - traefik.http.routers.health-infra.rule=Host(`${TRAEFIK_DOMAIN:-traefik.conexaodesorte.com.br}`) && Path(`/health/infrastructure`)
        - traefik.http.routers.health-infra.entrypoints=websecure
        - traefik.http.routers.health-infra.tls.certresolver=letsencrypt
        - traefik.http.routers.health-infra.service=health-monitor
        - traefik.http.routers.health-infra.middlewares=cors-health

        # Health Backend Endpoint
        - traefik.http.routers.health-backend.rule=Host(`${TRAEFIK_DOMAIN:-traefik.conexaodesorte.com.br}`) && Path(`/health/backend`)
        - traefik.http.routers.health-backend.entrypoints=websecure
        - traefik.http.routers.health-backend.tls.certresolver=letsencrypt
        - traefik.http.routers.health-backend.service=health-monitor
        - traefik.http.routers.health-backend.middlewares=cors-health

        # Health Individual Service Endpoint
        - traefik.http.routers.health-service.rule=Host(`${TRAEFIK_DOMAIN:-traefik.conexaodesorte.com.br}`) && PathPrefix(`/health/service/`)
        - traefik.http.routers.health-service.entrypoints=websecure
        - traefik.http.routers.health-service.tls.certresolver=letsencrypt
        - traefik.http.routers.health-service.service=health-monitor
        - traefik.http.routers.health-service.middlewares=cors-health

        # Service configuration
        - traefik.http.services.health-monitor.loadbalancer.server.port=8080

        # CORS middleware for health endpoints
        - traefik.http.middlewares.cors-health.headers.accesscontrolallowmethods=GET,OPTIONS
        - traefik.http.middlewares.cors-health.headers.accesscontrolalloworiginlist=https://*.conexaodesorte.com.br,https://github.com,https://api.github.com
        - traefik.http.middlewares.cors-health.headers.accesscontrolallowheaders=Content-Type,Authorization,X-Health-Monitor
        - traefik.http.middlewares.cors-health.headers.accesscontrolexposeheaders=X-Health-Status,X-Service-Count,X-Healthy-Count
        - traefik.http.middlewares.cors-health.headers.accesscontrolmaxage=86400

  traefik:
    # ==========================================================================
    # 🔧 CONFIGURAÇÃO BÁSICA
    # ==========================================================================
    image: traefik:v3.5.2
    # CONFLITO RESOLVIDO: container_name removido para compatibilidade Swarm
    restart: unless-stopped
    # Sem user específico - Docker Swarm gerencia automaticamente
    init: true
    stop_grace_period: 60s

    # ==========================================================================
    # 🌐 NETWORK & PORTS
    # ==========================================================================
    ports:
      - "80:80"      # HTTP (redirect to HTTPS)
      - "443:443"    # HTTPS
      # Dashboard via HTTPS routing (sem porta externa 8080 - SEGURANÇA)
    networks:
      - conexao-network-swarm  # CONFLITO RESOLVIDO: rede fixa para consistência

    # ==========================================================================
    # 🔧 ENVIRONMENT VARIABLES (Azure Key Vault Compatible)
    # ==========================================================================
    environment:
      - TZ=${TZ:-America/Sao_Paulo}
      - TRAEFIK_ACME_EMAIL=${TRAEFIK_ACME_EMAIL:-facilitaservicos.tec@gmail.com}
      # Security (Azure Key Vault integration)
      - TRAEFIK_API_DASHBOARD=${ENABLE_DASHBOARD:-true}
      - TRAEFIK_API_INSECURE=${API_INSECURE:-false}
      # Performance
      - TRAEFIK_LOG_LEVEL=${LOG_LEVEL:-INFO}
      - TRAEFIK_ACCESSLOG=${ACCESS_LOG_ENABLED:-true}
      # Azure Integration

    # ==========================================================================
    # 📁 VOLUMES (Segurança Aprimorada)
    # ==========================================================================
    volumes:
      # Docker socket para descoberta de serviços (com permissões corretas)
      - /var/run/docker.sock:/var/run/docker.sock:rw

      # Configuração principal do Traefik
      - ./traefik/traefik.yml:/etc/traefik/traefik.yml:ro
      - ./traefik/dynamic:/etc/traefik/dynamic:ro

      # Certificados Let's Encrypt
      - ./letsencrypt:/letsencrypt

      # Secrets para autenticação
      - ./secrets:/secrets:ro

    # ==========================================================================
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "5"

    # ==========================================================================
    # 🏥 HEALTH CHECK (Padronizado e Otimizado)
    # ==========================================================================
    healthcheck:
      test: ["CMD", "traefik", "healthcheck", "--ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

    # ==========================================================================
    # 🚀 COMMAND & DEPLOY (Docker Swarm Optimized)
    # ==========================================================================
    command:
      - --configFile=/etc/traefik/traefik.yml

    deploy:
      # Docker Swarm Configuration
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: rollback
        order: start-first
      # Recursos otimizados
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

      # =======================================================================
      # 🏷️ LABELS (Docker Swarm - CONFLITO RESOLVIDO)
      # =======================================================================
      labels:
        # Habilitar Traefik para este serviço
        - traefik.enable=true
        - traefik.docker.network=conexao-network-swarm

        # ===================================================================
        # 📊 DASHBOARD HTTPS (Seguro - sem porta externa)
        # ===================================================================
        - traefik.http.routers.dashboard.rule=Host(`${TRAEFIK_DOMAIN:-traefik.conexaodesorte.com.br}`)
        - traefik.http.routers.dashboard.entrypoints=websecure
        - traefik.http.routers.dashboard.tls.certresolver=letsencrypt
        - traefik.http.routers.dashboard.service=api@internal
        - traefik.http.routers.dashboard.middlewares=dashboard-auth@file,security-headers@file

        # Dashboard HTTP redirect (Segurança)
        - traefik.http.routers.dashboard-redirect.rule=Host(`${TRAEFIK_DOMAIN:-traefik.conexaodesorte.com.br}`)
        - traefik.http.routers.dashboard-redirect.entrypoints=web
        - traefik.http.routers.dashboard-redirect.middlewares=https-redirect@file

        # ===================================================================
        # 🔀 API BACKEND PROXY (Consolidado) - COMENTADO TEMPORARIAMENTE
        # ===================================================================
        # - >-
        #   traefik.http.routers.api-backend.rule=Host(`${API_DOMAIN:-api.conexaodesorte.com.br}`)
        # - traefik.http.routers.api-backend.entrypoints=websecure
        # - traefik.http.routers.api-backend.tls.certresolver=letsencrypt
        # - traefik.http.routers.api-backend.service=api-backend-service
        # - >-
        #   traefik.http.routers.api-backend.middlewares=cors-api@file,security-headers@file,rate-limit@file
        # - >-
        #   traefik.http.services.api-backend-service.loadbalancer.server.port=${BACKEND_PORT:-8080}
        # - >-
        #   traefik.http.services.api-backend-service.loadbalancer.healthcheck.path=/actuator/health
        # - >-
        #   traefik.http.services.api-backend-service.loadbalancer.healthcheck.interval=30s

        # ===================================================================
        # 🔄 BACKEND LEGACY (Compatibilidade)
        # ===================================================================
        # 🏷️ METADATA (Compliance)
        # ===================================================================
        - org.opencontainers.image.title=Traefik Gateway - Conexão de Sorte
        - org.opencontainers.image.description=Load Balancer e SSL Termination - Consolidated Secure Version
        - org.opencontainers.image.version=v3.5.2-consolidated
        - org.opencontainers.image.vendor=Conexão de Sorte
        - org.opencontainers.image.created=${BUILD_DATE:-2024-01-01}

# =============================================================================
# 🌐 NETWORKS (Consolidado)
# =============================================================================
networks:
  conexao-network-swarm:
    name: conexao-network-swarm
    external: true
    # CONFLITO RESOLVIDO: rede externa obrigatória para Docker Swarm

# =============================================================================
# 📋 INSTRUÇÕES DE USO CONSOLIDADAS
# =============================================================================
#
# DOCKER SWARM MODE (RECOMENDADO):
# ================================
# 1. Inicializar Swarm: docker swarm init
# 2. Criar rede: docker network create --driver overlay conexao-network-swarm
# 3. Configurar Azure: source configuracao-segura.sh
# 4. Deploy: docker stack deploy -c docker-compose.consolidated.yml traefik
# 5. Verificar: docker service ls
#
# STANDALONE MODE (Desenvolvimento):
# ==================================
# 1. Criar rede: docker network create conexao-network-swarm
# 2. Configurar Azure: source configuracao-segura.sh
# 3. Deploy: docker-compose -f docker-compose.consolidated.yml up -d
#
# VARIÁVEIS DE AMBIENTE OBRIGATÓRIAS (.env):
# ==========================================
# TZ=America/Sao_Paulo
# TRAEFIK_ACME_EMAIL=facilitaservicos.tec@gmail.com
# TRAEFIK_DOMAIN=traefik.conexaodesorte.com.br
# API_DOMAIN=api.conexaodesorte.com.br
# ENABLE_DASHBOARD=true
# LOG_LEVEL=INFO
# ACCESS_LOG_ENABLED=true
#
# # Azure Key Vault (Obrigatório para Produção)
# AZURE_CLIENT_ID=your-client-id
# AZURE_TENANT_ID=your-tenant-id
# AZURE_KEYVAULT_ENDPOINT=https://your-keyvault.vault.azure.net/
#
# SEGURANÇA:
# ==========
# - Dashboard protegido por autenticação (dashboard-auth@file)
# - SSL/TLS obrigatório (Let's Encrypt)
# - Headers de segurança aplicados
# - Rate limiting configurado
# - Logs de auditoria habilitados
# - Azure Key Vault integration
# - Docker socket read-only
#
# =============================================================================