---
# =============================================================================
# üåê TRAEFIK INFRASTRUCTURE - CONSOLIDATED SECURE VERSION
# =============================================================================
#
# VERS√ÉO CONSOLIDADA E SEGURA que resolve conflitos entre:
# - docker-compose.yml (labels standalone conflitantes)
# - docker-compose.swarm.yml (configura√ß√£o incompleta)
#
# VERS√ÉO: v3.5.2-consolidated
# COMPATIBILIDADE: Docker Swarm (Recomendado) + Standalone
# SEGURAN√áA: Enterprise Grade + Azure Key Vault Integration
# CONFLITOS RESOLVIDOS: ‚úÖ Labels, ‚úÖ Networks, ‚úÖ Health Checks, ‚úÖ Security
# =============================================================================

services:
  # ===========================================================================
  # üè• HEALTH MONITOR SERVICE - DOCKER SWARM COMPATIBLE
  # ===========================================================================
  health-monitor:
    image: nginx:alpine
    # build context para desenvolvimento local (ignorado no Swarm)
    # build:
    #   context: .
    #   dockerfile: health-server/Dockerfile
    user: "root:root"
    restart: on-failure:10
    networks:
      - conexao-network-swarm
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik-logs:/app/logs:rw
      - ./health-server/health-endpoints.conf:/etc/nginx/conf.d/default.conf:ro
    environment:
      TZ: "${TZ:-America/Sao_Paulo}"
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8080/health/overall"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      resources:
        limits:
          memory: 128M
          cpus: '0.1'
        reservations:
          memory: 64M
          cpus: '0.05'
      labels:
        # Traefik routing for health endpoints
        - traefik.enable=true
        - traefik.docker.network=conexao-network-swarm

        # Health Overall Endpoint
        - traefik.http.routers.health-overall.rule=HostRegexp(`{host:(www\.)?${BASE_DOMAIN:-conexaodesorte.com.br}}`) && Path(`/traefik/health/overall`)
        - traefik.http.routers.health-overall.entrypoints=websecure
        - traefik.http.routers.health-overall.tls.certresolver=letsencrypt
        - traefik.http.routers.health-overall.service=health-monitor
        - traefik.http.routers.health-overall.middlewares=traefik-path-trim@file,health-headers@file,cors-health@file

        # Health Infrastructure Endpoint
        - traefik.http.routers.health-infra.rule=HostRegexp(`{host:(www\.)?${BASE_DOMAIN:-conexaodesorte.com.br}}`) && Path(`/traefik/health/infrastructure`)
        - traefik.http.routers.health-infra.entrypoints=websecure
        - traefik.http.routers.health-infra.tls.certresolver=letsencrypt
        - traefik.http.routers.health-infra.service=health-monitor
        - traefik.http.routers.health-infra.middlewares=traefik-path-trim@file,health-headers@file,cors-health@file

        # Health Backend Endpoint
        - traefik.http.routers.health-backend.rule=HostRegexp(`{host:(www\.)?${BASE_DOMAIN:-conexaodesorte.com.br}}`) && Path(`/traefik/health/backend`)
        - traefik.http.routers.health-backend.entrypoints=websecure
        - traefik.http.routers.health-backend.tls.certresolver=letsencrypt
        - traefik.http.routers.health-backend.service=health-monitor
        - traefik.http.routers.health-backend.middlewares=traefik-path-trim@file,health-headers@file,cors-health@file

        # Health Individual Service Endpoint
        - traefik.http.routers.health-service.rule=HostRegexp(`{host:(www\.)?${BASE_DOMAIN:-conexaodesorte.com.br}}`) && PathPrefix(`/traefik/health/service/`)
        - traefik.http.routers.health-service.entrypoints=websecure
        - traefik.http.routers.health-service.tls.certresolver=letsencrypt
        - traefik.http.routers.health-service.service=health-monitor
        - traefik.http.routers.health-service.middlewares=traefik-path-trim@file,health-headers@file,cors-health@file,health-service-rewrite@file

        # Service configuration
        - traefik.http.services.health-monitor.loadbalancer.server.port=8080

  # ===========================================================================
  # üìä LOG SERVER - MONITORAMENTO COMPLETO DO SISTEMA
  # ===========================================================================
  log-server:
    image: log-server:latest
    user: "root:root"
    restart: on-failure:10
    networks:
      - conexao-network-swarm
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik-logs:/app/logs:rw
    environment:
      TZ: "${TZ:-America/Sao_Paulo}"
      PYTHONUNBUFFERED: "1"
      LOG_LEVEL: "${LOG_LEVEL:-INFO}"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9090/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      resources:
        limits:
          memory: 256M
          cpus: '0.2'
        reservations:
          memory: 128M
          cpus: '0.1'
      labels:
        # Traefik routing para /rest/v1/log-servidor
        - traefik.enable=true
        - traefik.docker.network=conexao-network-swarm

        # Endpoint principal de logs do servidor - Aceita dom√≠nio ou IP direto
        - traefik.http.routers.log-servidor.rule=(HostRegexp(`{host:(www\.)?${BASE_DOMAIN:-conexaodesorte.com.br}}`) || Host(`145.223.31.87`)) && Path(`/rest/v1/log-servidor`)
        - traefik.http.routers.log-servidor.entrypoints=websecure
        - traefik.http.routers.log-servidor.tls.certresolver=letsencrypt
        - traefik.http.routers.log-servidor.service=log-server

        # Rota HTTP para acesso direto via IP (sem SSL)
        - traefik.http.routers.log-servidor-http.rule=Host(`145.223.31.87`) && Path(`/rest/v1/log-servidor`)
        - traefik.http.routers.log-servidor-http.entrypoints=web
        - traefik.http.routers.log-servidor-http.service=log-server

        # Service configuration
        - traefik.http.services.log-server.loadbalancer.server.port=9090

  traefik:
    # ==========================================================================
    # üîß CONFIGURA√á√ÉO B√ÅSICA
    # ==========================================================================
    image: traefik:v3.5.2
    # CONFLITO RESOLVIDO: container_name removido para compatibilidade Swarm
    restart: unless-stopped
    # Sem user espec√≠fico - Docker Swarm gerencia automaticamente
    init: true
    stop_grace_period: 60s

    # ==========================================================================
    # üåê NETWORK & PORTS
    # ==========================================================================
    ports:
      - "80:80"      # HTTP (redirect to HTTPS)
      - "443:443"    # HTTPS
      # Dashboard via HTTPS routing (sem porta externa 8080 - SEGURAN√áA)
    networks:
      - conexao-network-swarm  # CONFLITO RESOLVIDO: rede fixa para consist√™ncia

    # ==========================================================================
    # üîß ENVIRONMENT VARIABLES (Azure Key Vault Compatible)
    # ==========================================================================
    environment:
      - TZ=${TZ:-America/Sao_Paulo}
      - TRAEFIK_ACME_EMAIL=${TRAEFIK_ACME_EMAIL:-facilitaservicos.tec@gmail.com}
      # Security (Azure Key Vault integration)
      - TRAEFIK_API_DASHBOARD=${ENABLE_DASHBOARD:-true}
      - TRAEFIK_API_INSECURE=${API_INSECURE:-false}
      # Performance
      - TRAEFIK_LOG_LEVEL=${LOG_LEVEL:-INFO}
      - TRAEFIK_ACCESSLOG=${ACCESS_LOG_ENABLED:-true}
      # Azure Integration

    # ==========================================================================
    # üìÅ VOLUMES (Seguran√ßa Aprimorada)
    # ==========================================================================
    volumes:
      # Docker socket para descoberta de servi√ßos (com permiss√µes corretas)
      - /var/run/docker.sock:/var/run/docker.sock:ro

      # Certificados Let's Encrypt
      - letsencrypt:/letsencrypt

      # Configura√ß√£o din√¢mica
      - ./traefik/dynamic:/etc/traefik/dynamic:ro

      # Configura√ß√£o principal do Traefik
      - ./traefik/traefik.yml:/etc/traefik/traefik.yml:ro

    secrets:
      - source: traefik_secrets
        target: /secrets/traefik-basicauth

    # ==========================================================================
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "5"

    # ==========================================================================
    # üè• HEALTH CHECK (Padronizado e Otimizado)
    # ==========================================================================
    healthcheck:
      test: ["CMD", "traefik", "healthcheck", "--ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

    # ==========================================================================
    # üöÄ COMMAND & DEPLOY (Docker Swarm Optimized)
    # ==========================================================================
    command:
      - --configFile=/etc/traefik/traefik.yml

    deploy:
      # Docker Swarm Configuration
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: rollback
        order: start-first
      # Recursos otimizados
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

      # =======================================================================
      # üè∑Ô∏è LABELS (Docker Swarm - CONFLITO RESOLVIDO)
      # =======================================================================
      labels:
        # Habilitar Traefik para este servi√ßo
        - traefik.enable=true
        - traefik.docker.network=conexao-network-swarm

        # ===================================================================
        # üîÄ API BACKEND PROXY (Consolidado) - COMENTADO TEMPORARIAMENTE
        # ===================================================================
        # - >-
        #   traefik.http.routers.api-backend.rule=HostRegexp(`{host:(www\.)?${BASE_DOMAIN:-conexaodesorte.com.br}}`) && PathPrefix(`/rest/gateway`)
        # - traefik.http.routers.api-backend.entrypoints=websecure
        # - traefik.http.routers.api-backend.tls.certresolver=letsencrypt
        # - traefik.http.routers.api-backend.service=api-backend-service
        # - >-
        #   traefik.http.routers.api-backend.middlewares=cors-api@file,security-headers@file,rate-limit@file
        # - >-
        #   traefik.http.services.api-backend-service.loadbalancer.server.port=${BACKEND_PORT:-8080}
        # - >-
        #   traefik.http.services.api-backend-service.loadbalancer.healthcheck.path=/actuator/health
        # - >-
        #   traefik.http.services.api-backend-service.loadbalancer.healthcheck.interval=30s

        # ===================================================================
        # üîÑ BACKEND LEGACY (Compatibilidade)
        # ===================================================================
        # üè∑Ô∏è METADATA (Compliance)
        # ===================================================================
        - org.opencontainers.image.title=Traefik Gateway - Conex√£o de Sorte
        - org.opencontainers.image.description=Load Balancer e SSL Termination - Consolidated Secure Version
        - org.opencontainers.image.version=v3.5.2-consolidated
        - org.opencontainers.image.vendor=Conex√£o de Sorte
        - org.opencontainers.image.created=${BUILD_DATE:-2024-01-01}

# =============================================================================
# üåê NETWORKS (Consolidado)
# =============================================================================
networks:
  conexao-network-swarm:
    name: conexao-network-swarm
    external: true
    # CONFLITO RESOLVIDO: rede externa obrigat√≥ria para Docker Swarm

volumes:
  letsencrypt:
    external: true
  traefik-logs:
    external: true



secrets:
  traefik_secrets:
    external: true
    name: traefik_basicauth_secret

# =============================================================================
# üìã INSTRU√á√ïES DE USO CONSOLIDADAS
# =============================================================================
#
# DOCKER SWARM MODE (RECOMENDADO):
# ================================
# 1. Inicializar Swarm: docker swarm init
# 2. Criar rede: docker network create --driver overlay conexao-network-swarm
# 3. Configurar Azure: source configuracao-segura.sh
# 4. Deploy: docker stack deploy -c docker-compose.consolidated.yml traefik
# 5. Verificar: docker service ls
#
# STANDALONE MODE (Desenvolvimento):
# ==================================
# 1. Criar rede: docker network create conexao-network-swarm
# 2. Configurar Azure: source configuracao-segura.sh
# 3. Deploy: docker-compose -f docker-compose.consolidated.yml up -d
#
# VARI√ÅVEIS DE AMBIENTE OBRIGAT√ìRIAS (.env):
# ==========================================
# TZ=America/Sao_Paulo
# TRAEFIK_ACME_EMAIL=facilitaservicos.tec@gmail.com
# BASE_DOMAIN=conexaodesorte.com.br
# ENABLE_DASHBOARD=true
# LOG_LEVEL=INFO
# ACCESS_LOG_ENABLED=true
#
# # Azure Key Vault (Obrigat√≥rio para Produ√ß√£o)
# AZURE_CLIENT_ID=your-client-id
# AZURE_TENANT_ID=your-tenant-id
# AZURE_KEYVAULT_ENDPOINT=https://your-keyvault.vault.azure.net/
#
# SEGURAN√áA:
# ==========# - Dashboard protegido por autentica√ß√£o (dashboard-auth@file)
# - SSL/TLS obrigat√≥rio (Let's Encrypt)
# - Headers de seguran√ßa aplicados
# - Rate limiting configurado
# - Logs de auditoria habilitados
# - Azure Key Vault integration
# - Docker socket read-only
#
# =============================================================================
