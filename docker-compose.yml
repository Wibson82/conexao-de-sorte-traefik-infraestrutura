# =============================================================================
# üåê TRAEFIK INFRASTRUCTURE - CONSOLIDATED SECURE VERSION
# =============================================================================
#
# VERS√ÉO CONSOLIDADA E SEGURA que resolve conflitos entre:
# - docker-compose.yml (labels standalone conflitantes)
# - docker-compose.swarm.yml (configura√ß√£o incompleta)
#
# VERS√ÉO: v3.5.2-consolidated
# COMPATIBILIDADE: Docker Swarm (Recomendado) + Standalone
# SEGURAN√áA: Enterprise Grade + Azure Key Vault Integration
# CONFLITOS RESOLVIDOS: ‚úÖ Labels, ‚úÖ Networks, ‚úÖ Health Checks, ‚úÖ Security
# =============================================================================

services:
  traefik:
    # ==========================================================================
    # üîß CONFIGURA√á√ÉO B√ÅSICA
    # ==========================================================================
    image: traefik:v3.5.2
    # CONFLITO RESOLVIDO: container_name removido para compatibilidade Swarm
    restart: unless-stopped

    # ==========================================================================
    # üåê NETWORK & PORTS
    # ==========================================================================
    ports:
      - "80:80"      # HTTP (redirect to HTTPS)
      - "443:443"    # HTTPS
      # Dashboard via HTTPS routing (sem porta externa 8080 - SEGURAN√áA)
    networks:
      - conexao-network-swarm  # CONFLITO RESOLVIDO: rede fixa para consist√™ncia

    # ==========================================================================
    # üîß ENVIRONMENT VARIABLES (Azure Key Vault Compatible)
    # ==========================================================================
    environment:
      - TZ=${TZ:-America/Sao_Paulo}
      - TRAEFIK_ACME_EMAIL=${TRAEFIK_ACME_EMAIL:-facilitaservicos.tec@gmail.com}
      # Security (Azure Key Vault integration)
      - TRAEFIK_API_DASHBOARD=${ENABLE_DASHBOARD:-true}
      - TRAEFIK_API_INSECURE=${API_INSECURE:-false}
      # Performance
      - TRAEFIK_LOG_LEVEL=${LOG_LEVEL:-INFO}
      - TRAEFIK_ACCESSLOG=${ACCESS_LOG_ENABLED:-true}
      # Azure Integration
      - AZURE_CLIENT_ID=${AZURE_CLIENT_ID}
      - AZURE_TENANT_ID=${AZURE_TENANT_ID}
      - AZURE_KEYVAULT_ENDPOINT=${AZURE_KEYVAULT_ENDPOINT}

    # ==========================================================================
    # üìÅ VOLUMES (Seguran√ßa Aprimorada)
    # ==========================================================================
    volumes:
      # Docker socket para descoberta de servi√ßos
      - /var/run/docker.sock:/var/run/docker.sock:ro
      
      # Configura√ß√£o principal do Traefik
      - ./traefik/traefik.yml:/etc/traefik/traefik.yml:ro
      - ./traefik/dynamic:/etc/traefik/dynamic:ro
      
      # Certificados Let's Encrypt
      - ./letsencrypt:/letsencrypt
      
      # Secrets para autentica√ß√£o
      - ./secrets:/secrets:ro

    # ==========================================================================
    # üè• HEALTH CHECK (Padronizado e Otimizado)
    # ==========================================================================
    healthcheck:
      test: ["CMD", "traefik", "healthcheck", "--ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 45s  # CONFLITO RESOLVIDO: padronizado em 45s

    # ==========================================================================
    # üöÄ COMMAND & DEPLOY (Docker Swarm Optimized)
    # ==========================================================================
    command:
      - --configFile=/etc/traefik/traefik.yml

    deploy:
      # Docker Swarm Configuration
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: rollback
        order: start-first
      # Recursos otimizados
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

      # =======================================================================
      # üè∑Ô∏è LABELS (Docker Swarm - CONFLITO RESOLVIDO)
      # =======================================================================
      labels:
        # Habilitar Traefik para este servi√ßo
        - traefik.enable=true
        - traefik.docker.network=conexao-network-swarm

        # ===================================================================
        # üìä DASHBOARD HTTPS (Seguro - sem porta externa)
        # ===================================================================
        - traefik.http.routers.dashboard.rule=Host(`${TRAEFIK_DOMAIN:-traefik.conexaodesorte.com.br}`)
        - traefik.http.routers.dashboard.entrypoints=websecure
        - traefik.http.routers.dashboard.tls.certresolver=letsencrypt
        - traefik.http.routers.dashboard.service=api@internal
        - traefik.http.routers.dashboard.middlewares=dashboard-auth@file,security-headers@file

        # Dashboard HTTP redirect (Seguran√ßa)
        - traefik.http.routers.dashboard-redirect.rule=Host(`${TRAEFIK_DOMAIN:-traefik.conexaodesorte.com.br}`)
        - traefik.http.routers.dashboard-redirect.entrypoints=web
        - traefik.http.routers.dashboard-redirect.middlewares=https-redirect@file

        # ===================================================================
        # üîÄ API BACKEND PROXY (Consolidado)
        # ===================================================================
        - traefik.http.routers.api-backend.rule=Host(`${API_DOMAIN:-api.conexaodesorte.com.br}`)
        - traefik.http.routers.api-backend.entrypoints=websecure
        - traefik.http.routers.api-backend.tls.certresolver=letsencrypt
        - traefik.http.routers.api-backend.service=api-backend-service
        - traefik.http.routers.api-backend.middlewares=cors-api@file,security-headers@file,rate-limit@file
        - traefik.http.services.api-backend-service.loadbalancer.server.port=${BACKEND_PORT:-8080}
        - traefik.http.services.api-backend-service.loadbalancer.healthcheck.path=/actuator/health
        - traefik.http.services.api-backend-service.loadbalancer.healthcheck.interval=30s

        # ===================================================================
        # üîÑ BACKEND LEGACY (Compatibilidade)
        # ===================================================================
        - traefik.http.routers.backend-legacy.rule=Host(`${API_DOMAIN:-api.conexaodesorte.com.br}`) && PathPrefix(`/legacy`)
        - traefik.http.routers.backend-legacy.entrypoints=websecure
        - traefik.http.routers.backend-legacy.tls.certresolver=letsencrypt
        - traefik.http.routers.backend-legacy.middlewares=security-headers-api@file,cors-api@file
        - traefik.http.routers.backend-legacy.service=backend-legacy
        - traefik.http.services.backend-legacy.loadbalancer.server.url=http://${BACKEND_SERVICE:-backend-prod}:${BACKEND_PORT:-8080}

        # ===================================================================
        # üè∑Ô∏è METADATA (Compliance)
        # ===================================================================
        - org.opencontainers.image.title=Traefik Gateway - Conex√£o de Sorte
        - org.opencontainers.image.description=Load Balancer e SSL Termination - Consolidated Secure Version
        - org.opencontainers.image.version=v3.5.2-consolidated
        - org.opencontainers.image.vendor=Conex√£o de Sorte
        - org.opencontainers.image.created=${BUILD_DATE:-2024-01-01}

# =============================================================================
# üåê NETWORKS (Consolidado)
# =============================================================================
networks:
  conexao-network-swarm:
    name: conexao-network-swarm
    external: true
    # CONFLITO RESOLVIDO: rede externa obrigat√≥ria para Docker Swarm

# =============================================================================
# üìã INSTRU√á√ïES DE USO CONSOLIDADAS
# =============================================================================
#
# DOCKER SWARM MODE (RECOMENDADO):
# ================================
# 1. Inicializar Swarm: docker swarm init
# 2. Criar rede: docker network create --driver overlay conexao-network-swarm
# 3. Configurar Azure: source configuracao-segura.sh
# 4. Deploy: docker stack deploy -c docker-compose.consolidated.yml traefik
# 5. Verificar: docker service ls
#
# STANDALONE MODE (Desenvolvimento):
# ==================================
# 1. Criar rede: docker network create conexao-network-swarm
# 2. Configurar Azure: source configuracao-segura.sh
# 3. Deploy: docker-compose -f docker-compose.consolidated.yml up -d
#
# VARI√ÅVEIS DE AMBIENTE OBRIGAT√ìRIAS (.env):
# ==========================================
# TZ=America/Sao_Paulo
# TRAEFIK_ACME_EMAIL=facilitaservicos.tec@gmail.com
# TRAEFIK_DOMAIN=traefik.conexaodesorte.com.br
# API_DOMAIN=api.conexaodesorte.com.br
# BACKEND_SERVICE=backend-prod
# BACKEND_PORT=8080
# ENABLE_DASHBOARD=true
# LOG_LEVEL=INFO
# ACCESS_LOG_ENABLED=true
#
# # Azure Key Vault (Obrigat√≥rio para Produ√ß√£o)
# AZURE_CLIENT_ID=your-client-id
# AZURE_TENANT_ID=your-tenant-id
# AZURE_KEYVAULT_ENDPOINT=https://your-keyvault.vault.azure.net/
#
# SEGURAN√áA:
# ==========
# - Dashboard protegido por autentica√ß√£o (dashboard-auth@file)
# - SSL/TLS obrigat√≥rio (Let's Encrypt)
# - Headers de seguran√ßa aplicados
# - Rate limiting configurado
# - Logs de auditoria habilitados
# - Azure Key Vault integration
# - Docker socket read-only
#
# =============================================================================