#!/bin/bash

# =============================================================================
# üîß CORRETOR DE CONFIGURA√á√ÉO DO TRAEFIK
# =============================================================================
# Este script corrige problemas comuns na configura√ß√£o do Traefik v3.x

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m' # No Color

echo -e "${BLUE}=== üîß Iniciando corre√ß√£o da configura√ß√£o do Traefik ===${NC}"

# Verificar vers√£o do Traefik no docker-compose.yml
COMPOSE_VERSION=$(grep "image: traefik:" docker-compose.yml | awk -F':' '{print $2}')
echo -e "${BLUE}üìã Vers√£o do Traefik no docker-compose.yml: ${COMPOSE_VERSION}${NC}"

# Verificar vers√£o real do Traefik no cont√™iner
if docker ps | grep -q "traefik"; then
    CONTAINER_VERSION=$(docker inspect --format='{{range .Config.Image}}{{.}}{{end}}' $(docker ps | grep traefik | awk '{print $1}'))
    echo -e "${BLUE}üìã Vers√£o do Traefik em execu√ß√£o: ${CONTAINER_VERSION}${NC}"

    if [[ "$CONTAINER_VERSION" != *"$COMPOSE_VERSION"* ]]; then
        echo -e "${YELLOW}‚ö†Ô∏è  Aviso: Vers√£o do Traefik no docker-compose.yml difere da vers√£o em execu√ß√£o${NC}"
        echo -e "${BLUE}‚ÑπÔ∏è  Recomenda√ß√£o: Atualize o docker-compose.yml para usar a mesma vers√£o: ${CONTAINER_VERSION}${NC}"
    fi
fi

# 1. Corrigir regras de PathPrefix
echo -e "\n${BLUE}=== üõ†Ô∏è  Corrigindo regras de PathPrefix ===${NC}"

# Verificar se o backend-prod tem r√≥tulos (labels) espec√≠ficos para o PathPrefix
if docker inspect backend-prod &>/dev/null; then
    echo -e "${BLUE}üìã Verificando labels do cont√™iner backend-prod${NC}"

    # Extrair labels relacionados a regras PathPrefix com m√∫ltiplos caminhos
    PROBLEMATIC_LABELS=$(docker inspect backend-prod --format='{{range $k, $v := .Config.Labels}}{{if and (contains $k "traefik.http.routers") (contains $v "PathPrefix")}}{{$k}}={{$v}}{{end}}{{end}}')

    if [[ -n "$PROBLEMATIC_LABELS" ]]; then
        echo -e "${YELLOW}‚ö†Ô∏è  Encontrados labels problem√°ticos no backend-prod:${NC}"
        echo -e "$PROBLEMATIC_LABELS"

        echo -e "\n${BLUE}üî® Criando arquivo de corre√ß√£o...${NC}"

        # Criar arquivo corrigido para atualizar os labels
        cat > fix-backend-labels.sh << EOF
#!/bin/bash

# Remover labels problem√°ticos
docker label backend-prod $(echo "$PROBLEMATIC_LABELS" | cut -d= -f1 | sed 's/^/--label-rm /')

# Adicionar labels corrigidos
EOF

        # Para cada PathPrefix com m√∫ltiplos caminhos, criar regras separadas
        echo "$PROBLEMATIC_LABELS" | while read -r label; do
            KEY=$(echo "$label" | cut -d= -f1)
            VALUE=$(echo "$label" | cut -d= -f2-)

            if [[ "$VALUE" == *"PathPrefix(\`"*","* ]]; then
                # Extrair parte do Host da regra
                HOST_PART=$(echo "$VALUE" | grep -o "Host(\`[^)]*\`)" || echo "Host(\`conexaodesorte.com.br\`)")

                # Extrair os caminhos do PathPrefix
                PATHS=$(echo "$VALUE" | grep -o "PathPrefix(\`[^)]*\`)" | sed "s/PathPrefix(\`//g" | sed "s/\`//g")

                # Gerar novas regras para cada caminho
                i=1
                echo "$PATHS" | tr ',' '\n' | while read -r path; do
                    ROUTER_NAME=$(echo "$KEY" | sed 's/rule$//')
                    echo "docker label backend-prod ${ROUTER_NAME}${i}.rule=\"${HOST_PART} && PathPrefix(\`${path}\`)\"" >> fix-backend-labels.sh
                    i=$((i+1))
                done
            fi
        done

        chmod +x fix-backend-labels.sh
        echo -e "${GREEN}‚úÖ Arquivo de corre√ß√£o criado: fix-backend-labels.sh${NC}"
        echo -e "${BLUE}‚ÑπÔ∏è  Para aplicar as corre√ß√µes, execute: ./fix-backend-labels.sh${NC}"
    else
        echo -e "${GREEN}‚úÖ N√£o foram encontrados labels problem√°ticos no backend-prod${NC}"
    fi
else
    echo -e "${YELLOW}‚ö†Ô∏è  O cont√™iner backend-prod n√£o est√° presente${NC}"
fi

# 2. Corrigir arquivo de autentica√ß√£o b√°sica ausente
echo -e "\n${BLUE}=== üõ†Ô∏è  Corrigindo arquivo de autentica√ß√£o b√°sica ===${NC}"
if [ ! -d "./secrets" ]; then
    mkdir -p ./secrets
    echo -e "${GREEN}‚úÖ Criado diret√≥rio ./secrets${NC}"
fi

if [ ! -f "./secrets/traefik-basicauth" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Arquivo traefik-basicauth n√£o encontrado${NC}"
    echo -e "${BLUE}üî® Criando arquivo de autentica√ß√£o b√°sica...${NC}"

    # Gerar credencial segura (admin:admin gerado com htpasswd ou equivalente)
    echo "admin:$(openssl passwd -apr1 admin)" > ./secrets/traefik-basicauth
    chmod 600 ./secrets/traefik-basicauth

    echo -e "${GREEN}‚úÖ Arquivo traefik-basicauth criado com usu√°rio 'admin' e senha 'admin'${NC}"
    echo -e "${YELLOW}‚ö†Ô∏è  Recomenda√ß√£o: Altere a senha padr√£o ap√≥s o primeiro login${NC}"
else
    echo -e "${GREEN}‚úÖ Arquivo traefik-basicauth j√° existe${NC}"
fi

# 3. Corrigir mapeamento de volumes no docker-compose.yml
echo -e "\n${BLUE}=== üõ†Ô∏è  Verificando mapeamentos de volumes no docker-compose.yml ===${NC}"
if grep -q "/secrets:/secrets" docker-compose.yml; then
    echo -e "${GREEN}‚úÖ O volume de secrets j√° est√° mapeado corretamente${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  O volume de secrets n√£o est√° mapeado no docker-compose.yml${NC}"
    echo -e "${BLUE}üî® Adicionando mapeamento no docker-compose.yml...${NC}"

    # Backup do arquivo
    cp docker-compose.yml docker-compose.yml.bak

    # Adicionar mapeamento de volume
    sed -i '' '/volumes:/a\\      - ./secrets:/secrets:ro' docker-compose.yml 2>/dev/null || sed -i '/volumes:/a\\      - ./secrets:/secrets:ro' docker-compose.yml

    echo -e "${GREEN}‚úÖ Volume de secrets adicionado ao docker-compose.yml${NC}"
    echo -e "${BLUE}‚ÑπÔ∏è  Foi criado um backup: docker-compose.yml.bak${NC}"
fi

# 4. Corrigir vers√£o do Traefik no docker-compose.yml
echo -e "\n${BLUE}=== üõ†Ô∏è  Verificando vers√£o do Traefik no docker-compose.yml ===${NC}"
if [[ -n "$CONTAINER_VERSION" && "$CONTAINER_VERSION" != *"$COMPOSE_VERSION"* ]]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Vers√µes incompat√≠veis detectadas${NC}"
    echo -e "${BLUE}üî® Atualizando vers√£o no docker-compose.yml...${NC}"

    # Backup do arquivo se ainda n√£o existir
    if [ ! -f "docker-compose.yml.bak" ]; then
        cp docker-compose.yml docker-compose.yml.bak
        echo -e "${BLUE}‚ÑπÔ∏è  Foi criado um backup: docker-compose.yml.bak${NC}"
    fi

    # Extrair a vers√£o real
    REAL_VERSION=$(echo "$CONTAINER_VERSION" | grep -o "v[0-9]\+\.[0-9]\+\(\.[0-9]\+\)*" || echo "v3.1.7")

    # Atualizar a vers√£o no docker-compose.yml
    sed -i '' "s|image: traefik:.*|image: traefik:${REAL_VERSION}|" docker-compose.yml 2>/dev/null || sed -i "s|image: traefik:.*|image: traefik:${REAL_VERSION}|" docker-compose.yml

    echo -e "${GREEN}‚úÖ Vers√£o do Traefik atualizada para ${REAL_VERSION} no docker-compose.yml${NC}"
fi

echo -e "\n${GREEN}=== üéâ Corre√ß√µes conclu√≠das ===${NC}"
echo -e "${BLUE}‚ÑπÔ∏è  Para aplicar as altera√ß√µes, reinicie os cont√™ineres:${NC}"
echo -e "${BLUE}   docker-compose down${NC}"
echo -e "${BLUE}   docker-compose up -d${NC}"
echo -e "\n${YELLOW}‚ö†Ô∏è  Observe os logs ap√≥s a reinicializa√ß√£o para verificar se todos os problemas foram resolvidos:${NC}"
echo -e "${BLUE}   docker-compose logs -f traefik${NC}"