#!/bin/bash

# Script para corrigir permiss√µes no runner self-hosted
# Autor: Equipe Conex√£o de Sorte
# Data: $(date +"%d/%m/%Y")

# Definir cores para output
RED="\033[0;31m"
GREEN="\033[0;32m"
YELLOW="\033[0;33m"
BLUE="\033[0;34m"
NC="\033[0m" # No Color

echo -e "${BLUE}=== Verificador e Corretor de Permiss√µes para Runner Self-Hosted ===${NC}"
echo -e "${YELLOW}Iniciando verifica√ß√£o de permiss√µes...${NC}"

# Verificar se est√° sendo executado como root ou com sudo
if [ "$(id -u)" -ne 0 ]; then
  echo -e "${YELLOW}‚ö†Ô∏è  Este script n√£o est√° sendo executado como root.${NC}"
  echo -e "${YELLOW}‚ö†Ô∏è  Algumas opera√ß√µes podem falhar por falta de permiss√µes.${NC}"
  echo -e "${YELLOW}‚ö†Ô∏è  Recomendamos executar com sudo.${NC}"
  echo
  read -p "Deseja continuar mesmo assim? (s/n): " choice
  if [ "$choice" != "s" ] && [ "$choice" != "S" ]; then
    echo -e "${RED}Opera√ß√£o cancelada pelo usu√°rio.${NC}"
    exit 1
  fi
fi

# Definir diret√≥rio de trabalho
if [ -z "$GITHUB_WORKSPACE" ]; then
  WORKSPACE_DIR="$(pwd)"
  echo -e "${YELLOW}Vari√°vel GITHUB_WORKSPACE n√£o definida. Usando diret√≥rio atual: $WORKSPACE_DIR${NC}"
else
  WORKSPACE_DIR="$GITHUB_WORKSPACE"
  echo -e "${GREEN}Usando GITHUB_WORKSPACE: $WORKSPACE_DIR${NC}"
fi

# Verificar se o diret√≥rio existe
if [ ! -d "$WORKSPACE_DIR" ]; then
  echo -e "${RED}‚ùå Diret√≥rio de trabalho n√£o existe: $WORKSPACE_DIR${NC}"
  exit 1
fi

# Obter usu√°rio e grupo do runner
RUNNER_USER=$(whoami)
RUNNER_GROUP=$(id -gn)

echo -e "${BLUE}Informa√ß√µes do ambiente:${NC}"
echo -e "- Usu√°rio do runner: ${GREEN}$RUNNER_USER${NC}"
echo -e "- Grupo do runner: ${GREEN}$RUNNER_GROUP${NC}"
echo -e "- Diret√≥rio de trabalho: ${GREEN}$WORKSPACE_DIR${NC}"

# Fun√ß√£o para corrigir permiss√µes
fix_permissions() {
  local dir=$1
  local description=$2
  
  if [ -d "$dir" ]; then
    echo -e "${YELLOW}üîß Corrigindo permiss√µes para $description: $dir${NC}"
    chown -R $RUNNER_USER:$RUNNER_GROUP "$dir" 2>/dev/null
    chmod -R u+rwX "$dir" 2>/dev/null
    
    if [ $? -eq 0 ]; then
      echo -e "${GREEN}‚úÖ Permiss√µes corrigidas com sucesso para $description${NC}"
    else
      echo -e "${RED}‚ùå Falha ao corrigir permiss√µes para $description${NC}"
    fi
  else
    echo -e "${YELLOW}‚ö†Ô∏è Diret√≥rio n√£o encontrado: $dir${NC}"
  fi
}

# Fun√ß√£o para verificar e remover arquivos problem√°ticos
check_and_clean_files() {
  local dir=$1
  local description=$2
  
  if [ -d "$dir" ]; then
    echo -e "${YELLOW}üîç Verificando arquivos problem√°ticos em $description: $dir${NC}"
    
    # Lista de arquivos problem√°ticos conhecidos
    local problem_files=("security-headers.yml" "middlewares.yml" "tls.yml")
    
    for file in "${problem_files[@]}"; do
      if [ -f "$dir/$file" ]; then
        echo -e "${YELLOW}üóëÔ∏è Removendo arquivo problem√°tico: $dir/$file${NC}"
        rm -f "$dir/$file" 2>/dev/null
        
        if [ $? -eq 0 ]; then
          echo -e "${GREEN}‚úÖ Arquivo removido com sucesso: $file${NC}"
        else
          echo -e "${RED}‚ùå Falha ao remover arquivo: $file${NC}"
          echo -e "${YELLOW}‚ö†Ô∏è Tentando com sudo...${NC}"
          sudo rm -f "$dir/$file" 2>/dev/null
          
          if [ $? -eq 0 ]; then
            echo -e "${GREEN}‚úÖ Arquivo removido com sucesso usando sudo: $file${NC}"
          else
            echo -e "${RED}‚ùå Falha ao remover arquivo mesmo com sudo: $file${NC}"
          fi
        fi
      fi
    done
  else
    echo -e "${YELLOW}‚ö†Ô∏è Diret√≥rio n√£o encontrado: $dir${NC}"
  fi
}

# Fun√ß√£o para verificar processos bloqueando arquivos
check_blocking_processes() {
  local dir=$1
  
  echo -e "${YELLOW}üîç Verificando processos que podem estar bloqueando arquivos em: $dir${NC}"
  
  if command -v lsof &> /dev/null; then
    lsof +D "$dir" 2>/dev/null
    
    if [ $? -eq 0 ]; then
      echo -e "${RED}‚ö†Ô∏è Processos encontrados bloqueando arquivos!${NC}"
    else
      echo -e "${GREEN}‚úÖ Nenhum processo bloqueando arquivos${NC}"
    fi
  else
    echo -e "${YELLOW}‚ö†Ô∏è Comando 'lsof' n√£o dispon√≠vel. N√£o foi poss√≠vel verificar processos bloqueando arquivos.${NC}"
  fi
}

# Corrigir permiss√µes do diret√≥rio de trabalho
fix_permissions "$WORKSPACE_DIR" "diret√≥rio de trabalho"

# Verificar diret√≥rios espec√≠ficos
DYNAMIC_DIR="$WORKSPACE_DIR/traefik/dynamic"
fix_permissions "$DYNAMIC_DIR" "diret√≥rio traefik/dynamic"

# Verificar e limpar arquivos problem√°ticos
check_and_clean_files "$DYNAMIC_DIR" "diret√≥rio traefik/dynamic"

# Verificar processos bloqueando arquivos
check_blocking_processes "$WORKSPACE_DIR"

echo -e "\n${GREEN}‚úÖ Verifica√ß√£o e corre√ß√£o de permiss√µes conclu√≠da!${NC}"
echo -e "${YELLOW}Execute este script no runner self-hosted antes de iniciar o workflow para evitar problemas de permiss√£o.${NC}"