name: "üöÄ Traefik Infrastructure - Pipeline Principal"

on:
  push:
    branches: [main]
    tags: ['v*']
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'For√ßar deploy mesmo se valida√ß√£o falhar'
        required: false
        default: false
        type: boolean
      skip_security:
        description: 'Pular verifica√ß√µes de seguran√ßa'
        required: false
        default: false
        type: boolean
      environment:
        description: 'Ambiente de destino'
        required: false
        default: 'production'
        type: choice
        options:
        - production
        - staging
  schedule:
    # Verifica√ß√µes de seguran√ßa di√°rias √†s 02:00 UTC
  - cron: '0 2 * * *'

env:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1
  TZ: America/Sao_Paulo

jobs:
  # =============================================================================
  # DETEC√á√ÉO DE MUDAN√áAS
  # =============================================================================
  detect-changes:
    name: üîç Detectar Mudan√ßas
    runs-on: ubuntu-latest
    outputs:
      config-changed: ${{ steps.changes.outputs.config }}
      workflows-changed: ${{ steps.changes.outputs.workflows }}
      should-deploy: ${{ steps.deploy-check.outputs.should-deploy }}
      environment: ${{ steps.deploy-check.outputs.environment }}
      run-security: ${{ steps.security-check.outputs.run-security }}

    steps:
    - name: üì• Checkout c√≥digo
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: üîç Detectar mudan√ßas em arquivos
      uses: dorny/paths-filter@v3
      id: changes
      with:
        filters: |
          config:
            - 'config/**'
            - 'dynamic/**'
            - 'docker-compose.yml'
            - '.env.example'
          workflows:
            - '.github/workflows/**'
            - 'scripts/**'

    - name: üéØ Verificar necessidade de deploy
      id: deploy-check
      run: |
        SHOULD_DEPLOY="false"
        ENVIRONMENT="staging"

        # Deploy for√ßado via workflow_dispatch
        if [ "${{ github.event.inputs.force_deploy }}" == "true" ]; then
          SHOULD_DEPLOY="true"
          ENVIRONMENT="${{ github.event.inputs.environment }}"
          echo "üöÄ Deploy for√ßado pelo usu√°rio"
        # Deploy autom√°tico em tags para produ√ß√£o
        elif [[ "${{ github.ref }}" == refs/tags/* ]]; then
          SHOULD_DEPLOY="true"
          ENVIRONMENT="production"
          echo "üè∑Ô∏è Deploy autom√°tico via tag"
        # Deploy autom√°tico em push para main (padr√£o)
        elif [ "${{ github.event_name }}" == "push" ] && [ "${{ github.ref }}" == "refs/heads/main" ]; then
          SHOULD_DEPLOY="true"
          ENVIRONMENT="staging"
          echo "üìù Deploy autom√°tico em push para main"
        fi

        echo "should-deploy=$SHOULD_DEPLOY" >> $GITHUB_OUTPUT
        echo "environment=$ENVIRONMENT" >> $GITHUB_OUTPUT

    - name: üîí Verificar necessidade de security scan
      id: security-check
      run: |
        RUN_SECURITY="false"

        # Executar sempre em schedule
        if [ "${{ github.event_name }}" == "schedule" ]; then
          RUN_SECURITY="true"
        # Executar em push/PR se n√£o foi pulado
        elif [ "${{ github.event.inputs.skip_security }}" != "true" ]; then
          RUN_SECURITY="true"
        fi

        echo "run-security=$RUN_SECURITY" >> $GITHUB_OUTPUT

  # =============================================================================
  # VALIDA√á√ÉO E CI
  # =============================================================================
  validate:
    name: ‚úÖ Valida√ß√£o e Testes
    runs-on: ubuntu-latest
    needs: detect-changes
    if: github.event_name == 'push' || github.event_name == 'pull_request' || needs.detect-changes.outputs.config-changed == 'true' || needs.detect-changes.outputs.workflows-changed == 'true'

    steps:
    - name: üì• Checkout c√≥digo
      uses: actions/checkout@v4

    - name: üê≥ Setup Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: üì¶ Cache Docker layers
      uses: actions/cache@v4
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: üîß Validar sintaxe YAML
      run: |
        python3 -m pip install yamllint
        find . -name "*.yml" -o -name "*.yaml" | xargs python3 -m yamllint -d relaxed || true
        echo "‚úÖ Valida√ß√£o YAML conclu√≠da (warnings ignorados)"

    - name: üîç Validar configura√ß√µes Traefik
      run: |
        echo "üîç Validando sintaxe dos arquivos de configura√ß√£o Traefik..."
        # Valida√ß√£o r√°pida de sintaxe YAML
        for file in config/traefik.yml config/dynamic/middlewares.yml config/dynamic/services.yml; do
          if python3 -c "import yaml; yaml.safe_load(open('$file'))" 2>/dev/null; then
            echo "‚úÖ $file: Sintaxe YAML v√°lida"
          else
            echo "‚ùå $file: Erro de sintaxe YAML"
            exit 1
          fi
        done
        echo "‚úÖ Valida√ß√£o de configura√ß√£o Traefik conclu√≠da"

    - name: üß™ Testar docker-compose
      run: |
        docker compose config
        docker compose config --services

    - name: üåê Testes de conectividade
      run: |
        echo "üåê Testando conectividade b√°sica do Traefik..."
        
        # Criar rede de teste
        docker network create traefik-test || true

        # Iniciar Traefik em modo de teste (sem portas expostas para evitar conflitos)
        docker run -d --name traefik-test \
          --network traefik-test \
          -v "$PWD/config:/etc/traefik:ro" \
          -v "$PWD/dynamic:/etc/traefik/dynamic:ro" \
          traefik:v3.0

        # Aguardar Traefik inicializar
        sleep 10

        # Verificar se o container est√° rodando
        if docker ps | grep -q traefik-test; then
          echo "‚úÖ Traefik iniciou com sucesso"
        else
          echo "‚ùå Falha ao iniciar Traefik"
          docker logs traefik-test
          exit 1
        fi

        # Verificar logs para erros cr√≠ticos
        if docker logs traefik-test 2>&1 | grep -i "error\|fatal\|panic"; then
          echo "‚ö†Ô∏è Avisos encontrados nos logs (podem ser normais)"
        fi

        # Cleanup
        docker stop traefik-test || true
        docker rm traefik-test || true
        docker network rm traefik-test || true
        
        echo "‚úÖ Teste de conectividade conclu√≠do"

  # =============================================================================
  # VERIFICA√á√ïES DE SEGURAN√áA
  # =============================================================================
  security:
    name: üîí Verifica√ß√µes de Seguran√ßa
    runs-on: ubuntu-latest
    needs: [detect-changes, validate]
    if: needs.detect-changes.outputs.run-security == 'true' && (success() || github.event_name == 'schedule')

    steps:
    - name: üì• Checkout c√≥digo
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: üîç Scan de secrets
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: ${{ github.event_name == 'pull_request' && github.event.pull_request.base.sha || 'HEAD~1' }}
        head: HEAD
        extra_args: --debug --only-verified

    - name: üê≥ Scan de vulnerabilidades em imagens
      run: |
        # Instalar Trivy
        sudo apt-get update
        sudo apt-get install wget apt-transport-https gnupg lsb-release
        wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
        echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
        sudo apt-get update
        sudo apt-get install trivy

        # Scan da imagem Traefik
        trivy image --severity HIGH,CRITICAL traefik:v3.0

    - name: üõ°Ô∏è Verificar configura√ß√µes de seguran√ßa
      run: |
        echo "üîç Verificando configura√ß√µes de seguran√ßa..."

        SCORE=0
        TOTAL=8

        # HTTPS obrigat√≥rio
        if grep -q "websecure" config/traefik.yml; then
          echo "‚úÖ HTTPS configurado"
          SCORE=$((SCORE + 1))
        else
          echo "‚ùå HTTPS n√£o configurado"
        fi

        # Let's Encrypt
        if grep -q "letsencrypt" config/traefik.yml; then
          echo "‚úÖ Let's Encrypt configurado"
          SCORE=$((SCORE + 1))
        else
          echo "‚ùå Let's Encrypt n√£o configurado"
        fi

        # Security headers
        if grep -q "security-headers" dynamic/middlewares.yml; then
          echo "‚úÖ Security headers configurados"
          SCORE=$((SCORE + 1))
        else
          echo "‚ùå Security headers n√£o configurados"
        fi

        # Rate limiting
        if grep -q "rate-limit" dynamic/middlewares.yml; then
          echo "‚úÖ Rate limiting configurado"
          SCORE=$((SCORE + 1))
        else
          echo "‚ùå Rate limiting n√£o configurado"
        fi

        # Dashboard protegido
        if grep -A 10 "traefik-dashboard" dynamic/services.yml | grep -q "auth"; then
          echo "‚úÖ Dashboard protegido"
          SCORE=$((SCORE + 1))
        else
          echo "‚ùå Dashboard n√£o protegido"
        fi

        # TLS vers√£o m√≠nima
        if grep -q "VersionTLS12" dynamic/services.yml; then
          echo "‚úÖ TLS vers√£o m√≠nima configurada"
          SCORE=$((SCORE + 1))
        else
          echo "‚ùå TLS vers√£o m√≠nima n√£o configurada"
        fi

        # Logs de acesso
        if grep -q "accessLog" config/traefik.yml; then
          echo "‚úÖ Logs de acesso habilitados"
          SCORE=$((SCORE + 1))
        else
          echo "‚ùå Logs de acesso n√£o habilitados"
        fi

        # M√©tricas
        if grep -q "prometheus" config/traefik.yml; then
          echo "‚úÖ M√©tricas habilitadas"
          SCORE=$((SCORE + 1))
        else
          echo "‚ùå M√©tricas n√£o habilitadas"
        fi

        echo ""
        echo "üìä Score de Seguran√ßa: $SCORE/$TOTAL ($(( SCORE * 100 / TOTAL ))%)"

        if [ $SCORE -lt 6 ]; then
          echo "‚ö†Ô∏è Score de seguran√ßa baixo. Revisar configura√ß√µes."
          exit 1
        fi

  # =============================================================================
  # BACKUP PR√â-DEPLOY
  # =============================================================================
  backup:
    name: üíæ Backup Configura√ß√µes
    runs-on: ubuntu-latest
    needs: [detect-changes, validate, security]
    if: needs.detect-changes.outputs.should-deploy == 'true' && (success() || needs.detect-changes.outputs.should-deploy == 'true')

    steps:
    - name: üì• Checkout c√≥digo
      uses: actions/checkout@v4

    - name: üíæ Criar backup
      run: |
        TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
        BACKUP_DIR="backup_configs_${TIMESTAMP}"

        mkdir -p "$BACKUP_DIR"
        cp -r config/ "$BACKUP_DIR/"
        cp -r dynamic/ "$BACKUP_DIR/"
        cp docker-compose.yml "$BACKUP_DIR/"
        cp .env.example "$BACKUP_DIR/"

        cat > "$BACKUP_DIR/metadata.json" << EOF
        {
          "timestamp": "$TIMESTAMP",
          "commit": "${{ github.sha }}",
          "ref": "${{ github.ref }}",
          "environment": "${{ needs.detect-changes.outputs.environment }}",
          "actor": "${{ github.actor }}"
        }
        EOF

        tar -czf "backup_configs_${TIMESTAMP}.tar.gz" "$BACKUP_DIR"
        echo "üì¶ Backup criado: backup_configs_${TIMESTAMP}.tar.gz"

    - name: üì§ Upload backup
      uses: actions/upload-artifact@v4
      with:
        name: config-backup-${{ github.sha }}
        path: backup_configs_*.tar.gz
        retention-days: 30

  # =============================================================================
  # DEPLOY
  # =============================================================================
  deploy:
    name: üöÄ Deploy ${{ needs.detect-changes.outputs.environment }}
    runs-on: ubuntu-latest
    needs: [detect-changes, validate, security, backup]
    if: needs.detect-changes.outputs.should-deploy == 'true' && success()
    environment: ${{ needs.detect-changes.outputs.environment }}

    steps:
    - name: üì• Checkout c√≥digo
      uses: actions/checkout@v4

    - name: üîß Configurar ambiente
      run: |
        # Configura√ß√µes b√°sicas
        echo "DOMAIN=conexaodesorte.com.br" >> .env
        echo "ACME_EMAIL=facilitaservicos.dev@gmail.com" >> .env
        echo "VERSION=latest" >> .env
        
        if [ "${{ needs.detect-changes.outputs.environment }}" == "production" ]; then
          echo "ENVIRONMENT=production" >> .env
          echo "LOG_LEVEL=INFO" >> .env
          echo "TRAEFIK_LOG_LEVEL=INFO" >> .env
        else
          echo "ENVIRONMENT=staging" >> .env
          echo "LOG_LEVEL=DEBUG" >> .env
          echo "TRAEFIK_LOG_LEVEL=DEBUG" >> .env
        fi

        echo "DEPLOY_TIMESTAMP=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> .env
        echo "DEPLOY_COMMIT=${{ github.sha }}" >> .env

    - name: üß™ Teste de Conectividade SSH
      run: |
        # Validar secrets obrigat√≥rios
        if [ -z "${{ secrets.SSH_HOST }}" ]; then
          echo "‚ùå Erro: SSH_HOST n√£o configurado"
          exit 1
        fi
        
        if [ -z "${{ secrets.SSH_USER }}" ]; then
          echo "‚ùå Erro: SSH_USER n√£o configurado"
          exit 1
        fi
        
        # Executar teste de conectividade SSH
        echo "üîç Executando teste de conectividade SSH..."
        GITHUB_ACTIONS=true ./scripts/test-ssh-connectivity.sh "${{ secrets.SSH_HOST }}" "${{ secrets.SSH_USER }}"

    - name: üîë Setup SSH
      run: |
        # Validar chave SSH
        if [ -z "${{ secrets.VPS_SSH_KEY }}" ]; then
          echo "‚ùå Erro: VPS_SSH_KEY n√£o configurado"
          exit 1
        fi
        
        echo "‚úÖ Secrets SSH validados"
        
        # Configurar SSH
        mkdir -p ~/.ssh
        echo "${{ secrets.VPS_SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        
        # Adicionar host √†s known_hosts
        echo "üîç Adicionando ${{ secrets.SSH_HOST }} √†s known_hosts..."
        ssh-keyscan -T 10 -H "${{ secrets.SSH_HOST }}" >> ~/.ssh/known_hosts
        
        echo "‚úÖ SSH configurado com sucesso"

    - name: üì¶ Preparar e enviar arquivos
      run: |
        # Criar diret√≥rio no servidor se n√£o existir
        ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "mkdir -p ~/traefik-deploy"
        
        # Preparar e enviar arquivos
        tar -czf deploy-package.tar.gz config/ dynamic/ docker-compose.yml .env
        scp deploy-package.tar.gz ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:~/traefik-deploy/

    - name: üê≥ Deploy via SSH
      run: |
        ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
          # Capturar informa√ß√µes do servidor
          echo "üñ•Ô∏è  Conectado ao servidor: $(hostname)"
          echo "üìç IP do servidor: $(hostname -I | awk '{print $1}')"
          echo "üïê Data/hora do servidor: $(date)"
          echo "üë§ Usu√°rio conectado: $(whoami)"
          echo ""
          
          cd ~/traefik-deploy

          echo "üöÄ Iniciando deploy para ${{ needs.detect-changes.outputs.environment }}"

          # Extrair e preparar
          tar -xzf deploy-package.tar.gz

          if [ -d "current" ]; then
            mv current backup-$(date +%Y%m%d_%H%M%S)
          fi

          mkdir -p current
          mv config dynamic docker-compose.yml .env current/
          cd current

          # Parar containers Traefik existentes para evitar conflito de porta
          echo "üõë Parando containers Traefik existentes..."
          docker stop $(docker ps -q --filter "name=traefik") 2>/dev/null || echo "Nenhum container Traefik rodando"
          docker rm $(docker ps -aq --filter "name=traefik") 2>/dev/null || echo "Nenhum container Traefik para remover"
          
          # Deploy
          echo "üöÄ Iniciando novo deploy..."
          docker compose config
          docker compose pull
          docker compose up -d --force-recreate traefik

          echo "‚úÖ Deploy conclu√≠do!"
        EOF

    - name: üîç Verifica√ß√£o p√≥s-deploy
      run: |
        echo "üîç Verificando sa√∫de dos servi√ßos..."
        sleep 30

        ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
          echo "üîç Verifica√ß√£o em: $(hostname) ($(hostname -I | awk '{print $1}'))"
          cd ~/traefik-deploy/current
          
          echo "üìä Status dos containers:"
          docker compose ps
          
          echo "\nüîê Verificando certificados SSL:"
          docker exec conexao-traefik ls -la /certs/ 2>/dev/null || echo "‚ùå Diret√≥rio de certificados n√£o encontrado"
          
          echo "\nüìã Logs do Traefik (√∫ltimas 50 linhas):"
          docker compose logs --tail=50 traefik
          
          echo "\nüåê Testando conectividade interna:"
          docker exec conexao-traefik wget -qO- --timeout=5 http://conexao-frontend:3000 > /dev/null && echo "‚úÖ Frontend acess√≠vel" || echo "‚ùå Frontend inacess√≠vel"
          docker exec conexao-traefik wget -qO- --timeout=5 http://backend-prod:8080/actuator/health > /dev/null && echo "‚úÖ Backend acess√≠vel" || echo "‚ùå Backend inacess√≠vel"
          
          echo "\nüîç Verificando configura√ß√£o do Traefik:"
          docker exec conexao-traefik traefik version
        EOF

        echo "‚úÖ Verifica√ß√µes conclu√≠das!"

  # =============================================================================
  # NOTIFICA√á√ïES E RELAT√ìRIOS
  # =============================================================================
  report:
    name: üìã Relat√≥rio Final
    runs-on: ubuntu-latest
    needs: [detect-changes, validate, security, backup, deploy]
    if: always()

    steps:
    - name: üìä Consolidar resultados
      run: |
        echo "üìã Relat√≥rio do Pipeline - $(date -u +%Y-%m-%dT%H:%M:%SZ)"
        echo "================================================"
        echo "üìù Commit: ${{ github.sha }}"
        echo "üåø Branch: ${{ github.ref_name }}"
        echo "üë§ Autor: ${{ github.actor }}"
        echo "üéØ Ambiente: ${{ needs.detect-changes.outputs.environment }}"
        echo ""

        echo "üìä Status dos Jobs:"
        echo "- Detec√ß√£o de Mudan√ßas: ‚úÖ"
        echo "- Valida√ß√£o: ${{ needs.validate.result == 'success' && '‚úÖ' || '‚ùå' }}"
        echo "- Seguran√ßa: ${{ needs.security.result == 'success' && '‚úÖ' || needs.detect-changes.outputs.run-security == 'false' && '‚è≠Ô∏è' || '‚ùå' }}"
        echo "- Backup: ${{ needs.backup.result == 'success' && '‚úÖ' || needs.detect-changes.outputs.should-deploy == 'false' && '‚è≠Ô∏è' || '‚ùå' }}"
        echo "- Deploy: ${{ needs.deploy.result == 'success' && '‚úÖ' || needs.detect-changes.outputs.should-deploy == 'false' && '‚è≠Ô∏è' || '‚ùå' }}"
        echo ""

        # Determinar status geral
        if [ "${{ needs.validate.result }}" == "success" ] && \
           ([ "${{ needs.security.result }}" == "success" ] || [ "${{ needs.detect-changes.outputs.run-security }}" == "false" ]) && \
           ([ "${{ needs.deploy.result }}" == "success" ] || [ "${{ needs.detect-changes.outputs.should-deploy }}" == "false" ]); then
          echo "üéâ Pipeline executado com sucesso!"
        else
          echo "‚ö†Ô∏è Pipeline teve falhas. Revisar logs acima."
        fi

        echo ""
        echo "üîó Links √∫teis:"
        echo "- Workflow: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        echo "- Commit: ${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}"
