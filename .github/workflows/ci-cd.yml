name: "🌐 Traefik Infrastructure – CI/CD Pipeline"

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  SERVICE_NAME: traefik-infrastructure

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  validate-and-build:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y python3 python3-yaml

      - name: Prepare scripts
        run: |
          chmod +x .github/workflows/scripts/validate-traefik.sh
          chmod +x .github/workflows/scripts/security-validation.sh

      - name: Validate Traefik Configs
        run: .github/workflows/scripts/validate-traefik.sh

      - name: Security Validation
        run: .github/workflows/scripts/security-validation.sh

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: traefik-configs
          path: |
            docker-compose.yml
            traefik/
            letsencrypt/

  deploy-selfhosted:
    needs: validate-and-build
    runs-on: [ self-hosted, Linux, X64, conexao, conexao-de-sorte-traefik-infraestrutura ]
    timeout-minutes: 15
    if: github.ref == 'refs/heads/main'
    permissions:
      id-token: write
      contents: read
    env:
      DOCKER_NETWORK_NAME: conexao-network-swarm  # Usar rede overlay existente
      STACK_NAME: conexao-traefik
      COMPOSE_FILE: docker-compose.yml
    steps:
      - uses: actions/checkout@v4
        with:
          clean: true
          fetch-depth: 1
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: traefik-configs
          path: .

      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Fetch Azure Key Vault secrets
        id: kv
        shell: bash
        run: |
          set -euo pipefail
          VAULT_ENDPOINT="${{ secrets.AZURE_KEYVAULT_ENDPOINT }}"
          if [[ "$VAULT_ENDPOINT" =~ https://([^.]+)\.vault\.azure\.net ]]; then
            VAULT="${BASH_REMATCH[1]}"
          else
            echo "ERROR: Invalid AZURE_KEYVAULT_ENDPOINT format: $VAULT_ENDPOINT" >&2
            exit 1
          fi

          echo "🔐 Loading secrets from Azure Key Vault: $VAULT"
          get() {
            echo "🔍 Fetching secret: $1" >&2
            SECRET_VALUE=$(az keyvault secret show --vault-name "$VAULT" --name "$1" --query value -o tsv 2>/dev/null)
            if [ $? -ne 0 ] || [ -z "$SECRET_VALUE" ]; then
              echo "ERROR: Secret $1 not found in Azure Key Vault $VAULT" >&2
              exit 1
            fi
            echo "$SECRET_VALUE"
          }

          # 🔐 SEGREDOS PADRONIZADOS - conforme SEGREDOS_PADRONIZADOS.md
          echo "REDIS_HOST=$(get conexao-de-sorte-redis-host)" >> $GITHUB_ENV
          echo "REDIS_PORT=$(get conexao-de-sorte-redis-port)" >> $GITHUB_ENV
          echo "REDIS_PASSWORD=$(get conexao-de-sorte-redis-password)" >> $GITHUB_ENV
          echo "REDIS_DATABASE=$(get conexao-de-sorte-redis-database)" >> $GITHUB_ENV
          echo "DATABASE_JDBC_URL=$(get conexao-de-sorte-database-jdbc-url)" >> $GITHUB_ENV
          echo "DATABASE_R2DBC_URL=$(get conexao-de-sorte-database-r2dbc-url)" >> $GITHUB_ENV
          echo "DATABASE_USERNAME=$(get conexao-de-sorte-database-username)" >> $GITHUB_ENV
          echo "DATABASE_PASSWORD=$(get conexao-de-sorte-database-password)" >> $GITHUB_ENV
          echo "DATABASE_HOST=$(get conexao-de-sorte-database-host)" >> $GITHUB_ENV
          echo "DATABASE_PORT=$(get conexao-de-sorte-database-port)" >> $GITHUB_ENV
          echo "JWT_SECRET=$(get conexao-de-sorte-jwt-secret)" >> $GITHUB_ENV
          echo "JWT_ISSUER=$(get conexao-de-sorte-jwt-issuer)" >> $GITHUB_ENV
          echo "JWT_JWKS_URI=$(get conexao-de-sorte-jwt-jwks-uri)" >> $GITHUB_ENV
          echo "JWT_KEY_ID=$(get conexao-de-sorte-jwt-key-id)" >> $GITHUB_ENV
          echo "JWT_SIGNING_KEY=$(get conexao-de-sorte-jwt-signing-key)" >> $GITHUB_ENV
          echo "JWT_VERIFICATION_KEY=$(get conexao-de-sorte-jwt-verification-key)" >> $GITHUB_ENV
          echo "JWT_PRIVATE_KEY=$(get conexao-de-sorte-jwt-privateKey)" >> $GITHUB_ENV
          echo "JWT_PUBLIC_KEY=$(get conexao-de-sorte-jwt-publicKey)" >> $GITHUB_ENV
          echo "CORS_ALLOWED_ORIGINS=$(get conexao-de-sorte-cors-allowed-origins)" >> $GITHUB_ENV
          echo "CORS_ALLOW_CREDENTIALS=$(get conexao-de-sorte-cors-allow-credentials)" >> $GITHUB_ENV
          echo "SSL_ENABLED=$(get conexao-de-sorte-ssl-enabled)" >> $GITHUB_ENV
          echo "SSL_KEYSTORE_PATH=$(get conexao-de-sorte-ssl-keystore-path)" >> $GITHUB_ENV
          echo "SSL_KEYSTORE_PASSWORD=$(get conexao-de-sorte-ssl-keystore-password)" >> $GITHUB_ENV
          echo "ENCRYPTION_MASTER_KEY=$(get conexao-de-sorte-encryption-master-key)" >> $GITHUB_ENV
          echo "ENCRYPTION_MASTER_PASSWORD=$(get conexao-de-sorte-encryption-master-password)" >> $GITHUB_ENV
          echo "ENCRYPTION_BACKUP_KEY=$(get conexao-de-sorte-encryption-backup-key)" >> $GITHUB_ENV

          echo "✅ Azure Key Vault secrets loaded successfully using standardized naming"

      - name: Prepare scripts
        run: |
          chmod +x .github/workflows/scripts/deploy-traefik.sh .github/workflows/scripts/healthcheck-traefik.sh .github/workflows/scripts/connectivity-validation.sh
          # Usar arquivo de ambiente específico para CI/CD
          cp .env.ci .env

      - name: Deploy Traefik Stack
        env:
          STACK_NAME: conexao-traefik
          COMPOSE_FILE: docker-compose.yml
        run: .github/workflows/scripts/deploy-traefik.sh

      - name: Healthcheck Traefik
        env:
          STACK_NAME: conexao-traefik
        run: .github/workflows/scripts/healthcheck-traefik.sh

      - name: Connectivity Validation
        env:
          STACK_NAME: conexao-traefik
        run: .github/workflows/scripts/connectivity-validation.sh
