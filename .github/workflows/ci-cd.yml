name: "üåê Traefik Infrastructure ‚Äì CI/CD Pipeline"

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  SERVICE_NAME: traefik-infrastructure

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  validate-and-build:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y python3 python3-yaml

      - name: Prepare scripts
        run: |
          chmod +x .github/workflows/scripts/validate-traefik.sh
          chmod +x .github/workflows/scripts/security-validation.sh

      - name: Validate Traefik Configs
        run: .github/workflows/scripts/validate-traefik.sh

      - name: Security Validation
        run: .github/workflows/scripts/security-validation.sh

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: traefik-configs
          path: |
            docker-compose.yml
            docker-compose.swarm.yml
            traefik/
            letsencrypt/

  deploy-selfhosted:
    needs: validate-and-build
    runs-on: [ self-hosted, Linux, X64, conexao, conexao-de-sorte-traefik-infraestrutura ]
    timeout-minutes: 15
    if: github.ref == 'refs/heads/main'
    permissions:
      id-token: write
      contents: read
    env:
      DOCKER_NETWORK_NAME: conexao-network-swarm  # Usar rede overlay existente
      STACK_NAME: conexao-traefik
      COMPOSE_FILE: docker-compose.yml
    steps:
      - uses: actions/checkout@v4
        with:
          clean: true
          fetch-depth: 1
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: traefik-configs
          path: .

      # REMOVIDO: Azure CLI n√£o deve ser usado em produ√ß√£o
      # Traefik usa apenas Docker Secrets sincronizados pela infraestrutura-core

      - name: "üîç Verificar Docker Secrets (sem Azure CLI)"
        shell: bash
        run: |
          echo "üîç Verificando Docker Secrets dispon√≠veis para Traefik..."

          # Verificar se os secrets essenciais est√£o dispon√≠veis
          REQUIRED_SECRETS=(
            "conexao-de-sorte-cors-allowed-origins"
            "conexao-de-sorte-ssl-enabled"
          )

          MISSING_SECRETS=""
          for secret in "${REQUIRED_SECRETS[@]}"; do
            if docker secret inspect "$secret" >/dev/null 2>&1; then
              echo "‚úÖ $secret: Dispon√≠vel"
            else
              echo "‚ùå $secret: AUSENTE"
              MISSING_SECRETS="$MISSING_SECRETS $secret"
            fi
          done

          if [[ -n "$MISSING_SECRETS" ]]; then
            echo "‚ö†Ô∏è Secrets ausentes:$MISSING_SECRETS"
            echo "üîß Execute infraestrutura-core pipeline para sincronizar secrets"
          else
            echo "‚úÖ Secrets essenciais para Traefik est√£o dispon√≠veis"
          fi

      - name: Prepare scripts
        run: |
          chmod +x .github/workflows/scripts/deploy-traefik.sh .github/workflows/scripts/healthcheck-traefik.sh .github/workflows/scripts/connectivity-validation.sh
          # Usar arquivo de ambiente espec√≠fico para CI/CD
          cp .env.ci .env

      - name: Deploy Traefik Stack
        env:
          STACK_NAME: conexao-traefik
          COMPOSE_FILE: docker-compose.yml
        run: .github/workflows/scripts/deploy-traefik.sh

      - name: Healthcheck Traefik
        env:
          STACK_NAME: conexao-traefik
        run: .github/workflows/scripts/healthcheck-traefik.sh

      - name: Connectivity Validation
        env:
          STACK_NAME: conexao-traefik
        run: .github/workflows/scripts/connectivity-validation.sh
