name: "üõ°Ô∏è Traefik Infrastructure ‚Äì CI/CD"

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  id-token: write

jobs:
  validate:
    runs-on: [ self-hosted, Linux, X64, srv649924, conexao, conexao-de-sorte-backend-gateway ]
    timeout-minutes: 12
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4.3.0
        with:
          fetch-depth: 1

      - name: Validate Azure identifiers (secrets)
        env:
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          AZURE_KEYVAULT_NAME: ${{ secrets.AZURE_KEYVAULT_NAME }}
        run: |
          set -Eeuo pipefail
          missing=()
          for var in AZURE_CLIENT_ID AZURE_TENANT_ID AZURE_SUBSCRIPTION_ID AZURE_KEYVAULT_NAME; do
            if [[ -z "${!var:-}" ]]; then
              missing+=("$var")
            fi
          done
          if (( ${#missing[@]} )); then
            printf '‚ùå Repository Variables obrigat√≥rias ausentes: %s\n' "${missing[*]}"
            exit 1
          fi
          echo "‚úÖ Identificadores Azure configurados via secrets (seguros)"

      - name: Ensure Python deps
        run: |
          set -Eeuo pipefail
          if ! command -v python3 >/dev/null 2>&1; then
            echo '‚ùå python3 n√£o est√° dispon√≠vel no runner self-hosted.' >&2
            exit 1
          fi
          python3 -c "import importlib.util, subprocess, sys; import importlib; spec = importlib.util.find_spec('yaml'); subprocess.check_call([sys.executable, '-m', 'pip', 'install', '--user', 'PyYAML']) if spec is None else None"
          echo "‚úÖ Depend√™ncias Python dispon√≠veis"

      - name: Validate Backend YAML files
        run: |
          set -Eeuo pipefail
          python3 -c "import pathlib, yaml; paths=[pathlib.Path('docker-compose.yml')]; [yaml.safe_load(p.read_text(encoding='utf-8')) for p in paths]; print('‚úÖ YAML v√°lido para backend:', ', '.join(str(p) for p in paths))"

      - name: Validate Docker Compose
        run: |
          set -Eeuo pipefail
          docker compose -f docker-compose.yml config -q
          echo "‚úÖ docker-compose.yml v√°lido"

      - name: Security scan (Backend)
        run: |
          set -Eeuo pipefail
          if grep -R "password[[:space:]]*:[[:space:]]*['\"]" --include="*.yml" docker-compose.yml 2>/dev/null | grep -v '\${'; then
            echo "‚ö†Ô∏è Poss√≠vel credencial hardcoded detectada"
            exit 1
          fi
          echo "‚úÖ Nenhum segredo hardcoded identificado no backend"

  deploy:
    needs: validate
    runs-on: [ self-hosted, Linux, X64, srv649924, conexao, conexao-de-sorte-backend-gateway ]
    timeout-minutes: 25
    permissions:
      contents: read
      id-token: write
    env:
      STACK_NAME: conexao-traefik
      DOCKER_NETWORK_NAME: conexao-network-swarm
      COMPOSE_FILE: docker-compose.yml
    steps:
      - name: Checkout
        uses: actions/checkout@v4.3.0
        with:
          fetch-depth: 1
          clean: true

      - name: Azure Login (OIDC) with Security Hardening
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          audience: api://AzureADTokenExchange
          allow-no-subscriptions: false

      - name: "Get Key Vault secrets (Infra Domain Only - Traefik) via az CLI"
        id: kv
        shell: bash
        env:
          AZURE_KEYVAULT_NAME: ${{ secrets.AZURE_KEYVAULT_NAME }}
        run: |
          set -Eeuo pipefail
          IFS=$'\n\t'

          echo "üîê Recuperando segredos do Key Vault (infra-only)..."

          declare -A mapping=(
            [DASHBOARD_SECRET]=conexao-de-sorte-traefik-dashboard-password
            [ACME_EMAIL]=conexao-de-sorte-letsencrypt-email
            [SSL_CERT_PASSWORD]=conexao-de-sorte-ssl-cert-password
            [TRAEFIK_BASICAUTH]=conexao-de-sorte-traefik-basicauth-password
            [ADMIN_USERS]=conexao-de-sorte-admin-users
            [AUDIT_USERS]=conexao-de-sorte-audit-users
            [CRYPTO_USERS]=conexao-de-sorte-crypto-users
          )

          for var in "${!mapping[@]}"; do
            secret_name=${mapping[$var]}
            secret_value=$(az keyvault secret show --vault-name "$AZURE_KEYVAULT_NAME" --name "$secret_name" --query value -o tsv 2>/dev/null || true)
            if [[ -n "$secret_value" ]]; then
              # Mask value in logs and export to env for next steps
              echo "::add-mask::$secret_value"
              echo "$var=$secret_value" >> "$GITHUB_ENV"
              echo "‚úÖ Recuperado e mascarado: $secret_name -> $var"
            else
              echo "‚ö†Ô∏è Segredo n√£o encontrado ou sem acesso: $secret_name"
            fi
          done

      - name: Prepare secrets and configuration
        env:
          ACME_EMAIL: ${{ env.ACME_EMAIL }}
          DASHBOARD_SECRET: ${{ env.DASHBOARD_SECRET }}
        run: |
          set -Eeuo pipefail
          if [[ -z "$DASHBOARD_SECRET" || -z "$ACME_EMAIL" ]]; then
            echo '‚ùå Segredos obrigat√≥rios n√£o retornados pelo Key Vault'
            exit 1
          fi
          echo "::add-mask::$DASHBOARD_SECRET"
          echo "::add-mask::$ACME_EMAIL"

          mkdir -p secrets letsencrypt
          printf '%s\n' "$DASHBOARD_SECRET" > secrets/traefik-basicauth
          chmod 600 secrets/traefik-basicauth

          if [[ ! -f letsencrypt/acme.json ]]; then
            printf '{}\n' > letsencrypt/acme.json
          fi
          chmod 600 letsencrypt/acme.json

          cp .env.ci .env
          python3 - <<'PY'
            import os
            import pathlib

            acme_email = os.environ['ACME_EMAIL']
            env_path = pathlib.Path('.env')
            lines = env_path.read_text(encoding='utf-8').splitlines()
            seen_acme = False
            seen_staging = False
            with env_path.open('w', encoding='utf-8') as handle:
                for line in lines:
                    if line.startswith('TRAEFIK_ACME_EMAIL='):
                        handle.write(f'TRAEFIK_ACME_EMAIL={acme_email}\n')
                        seen_acme = True
                    elif line.startswith('LETSENCRYPT_STAGING='):
                        handle.write('LETSENCRYPT_STAGING=false\n')
                        seen_staging = True
                    else:
                        handle.write(line + '\n')
                if not seen_acme:
                    handle.write(f'TRAEFIK_ACME_EMAIL={acme_email}\n')
                if not seen_staging:
                    handle.write('LETSENCRYPT_STAGING=false\n')
          PY

      - name: Ensure Docker network
        run: |
          set -Eeuo pipefail
          if ! docker network ls | grep -q "$DOCKER_NETWORK_NAME"; then
            echo "üåê Criando rede $DOCKER_NETWORK_NAME"
            docker network create --driver overlay "$DOCKER_NETWORK_NAME"
          else
            echo "‚úÖ Rede $DOCKER_NETWORK_NAME j√° existe"
          fi

      - name: Deploy Backend Gateway stack
        run: |
          set -Eeuo pipefail
          docker compose -f "$COMPOSE_FILE" config -q
          docker stack deploy -c "$COMPOSE_FILE" "$STACK_NAME"
          echo "‚è≥ Aguardando estabiliza√ß√£o do backend..."
          sleep 30

      - name: Health check (Backend)
        run: |
          set -Eeuo pipefail
          service="${STACK_NAME}_backend"
          attempts=12
          for attempt in $(seq 1 "$attempts"); do
            echo "üîç Tentativa $attempt/$attempts - Verificando backend"
            container=$(docker ps --filter "name=${service}" -q | head -n1)
            if [[ -n "$container" ]]; then
              # Health check espec√≠fico para backend (ajuste conforme necess√°rio)
              if docker exec "$container" curl -f http://localhost:8080/health >/dev/null 2>&1; then
                echo "‚úÖ Backend respondendo corretamente"
                exit 0
              fi
            fi
            sleep 10
          done

          echo "‚ùå Health check do backend falhou"
          docker service ps "$service" || true
          docker service logs "$service" --tail 50 || true
          exit 1

      - name: Post-deploy summary (Backend)
        run: |
          set -Eeuo pipefail
          docker service ls | grep -E "(backend|gateway|NAME)" || true
          echo "‚úÖ Deploy do Backend Gateway conclu√≠do"
