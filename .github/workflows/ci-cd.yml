name: "üöÄ Traefik Infrastructure ‚Äì CI/CD Pipeline"

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

# Controle de concorr√™ncia para evitar execu√ß√µes simult√¢neas
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# Vari√°veis de ambiente global
env:
  SERVICE_NAME: traefik-infrastructure
  STACK_NAME: conexao-traefik
  DOCKER_NETWORK_NAME: conexao-network-swarm

permissions:
  id-token: write    # Necess√°rio para OIDC com Azure (azure/login@v2)
  contents: read     # Necess√°rio para checkout em jobs

jobs:
  validate-and-build:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: read
      id-token: write
    outputs:
      has_keyvault: ${{ steps.check_secrets.outputs.has_keyvault }}
      has_azure_creds: ${{ steps.check_secrets.outputs.has_azure_creds }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4.3.0
        with:
          fetch-depth: 1

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y python3 python3-yaml jq

      - name: Validate Docker Compose
        run: |
          docker compose -f docker-compose.yml config -q
          echo "‚úÖ Docker Compose syntax is valid"

      - name: Security Validation - No Hardcoded Passwords
        run: |
          # Verificar se n√£o h√° hardcoded passwords
          if grep -r "password.*:" docker-compose.yml | grep -v "\${" | grep -v "#" | grep -v "external:"; then
            echo "‚ùå Found potential hardcoded passwords"
            exit 1
          else
            echo "‚úÖ No hardcoded passwords found"
          fi

      - name: üîé Validar identificadores Azure (tempor√°rio em secrets)
        id: check_secrets
        env:
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          AZURE_KEYVAULT_NAME: ${{ secrets.AZURE_KEYVAULT_NAME }}
          AZURE_KEYVAULT_ENDPOINT: ${{ secrets.AZURE_KEYVAULT_ENDPOINT }}
        run: |
          set -Eeuo pipefail
          missing=()
          for var in AZURE_CLIENT_ID AZURE_TENANT_ID AZURE_SUBSCRIPTION_ID AZURE_KEYVAULT_NAME; do
            if [[ -z "${!var:-}" ]]; then
              missing+=("$var")
            fi
          done
          if (( ${#missing[@]} )); then
            printf '‚ùå GitHub Secrets obrigat√≥rios ausentes: %s\n' "${missing[*]}"
            exit 1
          fi
          echo "‚úÖ Identificadores Azure configurados via secrets"
          echo "has_azure_creds=true" >> "$GITHUB_OUTPUT"
          # Key Vault opcional para Traefik (modo desenvolvimento)
          if [[ -n "${AZURE_KEYVAULT_NAME:-}" ]]; then
            echo "has_keyvault=true" >> "$GITHUB_OUTPUT"
          else
            echo "has_keyvault=false" >> "$GITHUB_OUTPUT"
            echo '‚ÑπÔ∏è Key Vault n√£o configurado (Traefik usar√° modo desenvolvimento)'
          fi
          if [[ -z "${AZURE_KEYVAULT_ENDPOINT:-}" ]]; then
            echo '‚ÑπÔ∏è AZURE_KEYVAULT_ENDPOINT n√£o definido (usando endpoint padr√£o)'
          else
            echo '‚úÖ Endpoint customizado definido'
          fi

      - name: Validate YAML files
        run: |
          python3 -c "
          import yaml
          import pathlib

          # Validar arquivos YAML principais
          yaml_files = [
              'docker-compose.yml',
              'traefik/traefik.yml'
          ]

          for file_path in yaml_files:
              if pathlib.Path(file_path).exists():
                  try:
                      with open(file_path, 'r', encoding='utf-8') as f:
                          yaml.safe_load(f)
                      print(f'‚úÖ YAML v√°lido: {file_path}')
                  except Exception as e:
                      print(f'‚ùå Erro no YAML {file_path}: {e}')
                      exit(1)
          "

      - name: Cache optimization setup
        run: |
          # Configurar ambiente de cache inteligente
          CACHE_DIR="/tmp/.traefik-cache"
          mkdir -p "$CACHE_DIR"/{configs,secrets,compose}

          # Gerar chaves de cache baseadas em hash dos arquivos
          CONFIG_HASH=$(find traefik/ -name "*.yml" -o -name "*.yaml" | sort | xargs sha256sum | sha256sum | cut -d' ' -f1 | head -c 12)
          COMPOSE_HASH=$(sha256sum docker-compose.yml | cut -d' ' -f1 | head -c 12)

          echo "CONFIG_CACHE_KEY=traefik-config-${CONFIG_HASH}" >> $GITHUB_ENV
          echo "COMPOSE_CACHE_KEY=traefik-compose-${COMPOSE_HASH}" >> $GITHUB_ENV
          echo "CACHE_DIR=$CACHE_DIR" >> $GITHUB_ENV

          echo "‚úÖ Cache optimization configurado"

      - name: Validation completed
        run: |
          echo "‚úÖ Valida√ß√£o conclu√≠da - pronto para deploy"

  deploy-selfhosted:
    needs: validate-and-build
    runs-on: [self-hosted, Linux, X64, conexao, conexao-de-sorte-traefik-infraestrutura]
    timeout-minutes: 15
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4.3.0
        with:
          clean: true
          fetch-depth: 1

      - name: üîê Azure Login (OIDC) - Opcional
        id: azure-login
        if: ${{ needs.validate-and-build.outputs.has_azure_creds == 'true' }}
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        continue-on-error: true

      - name: Verificar status do login Azure
        if: ${{ needs.validate-and-build.outputs.has_azure_creds == 'true' }}
        run: |
          echo "üîç Verificando status do login Azure..."
          
          # Verificar se o login foi bem-sucedido
          if az account show >/dev/null 2>&1; then
            echo "‚úÖ Login Azure realizado com sucesso"
            echo "AZURE_LOGIN_SUCCESS=true" >> $GITHUB_ENV
            echo "Conta atual: $(az account show --query name -o tsv)"
            echo "Subscription ID: $(az account show --query id -o tsv)"
          else
            echo "‚ö†Ô∏è Login Azure n√£o realizado ou falhou"
            echo "AZURE_LOGIN_SUCCESS=false" >> $GITHUB_ENV
            echo "Os segredos do Key Vault n√£o ser√£o buscados devido √† falta de autentica√ß√£o"
          fi

      - name: Get Key Vault secrets via Azure CLI (M√©todo recomendado)
        id: kv
        if: ${{ needs.validate-and-build.outputs.has_keyvault == 'true' && env.AZURE_LOGIN_SUCCESS == 'true' }}
        uses: azure/CLI@v1
        with:
          inlineScript: |
            set -euo pipefail
            echo "üîç Buscando segredos do Key Vault via Azure CLI..."
            echo "Key Vault: ${{ secrets.AZURE_KEYVAULT_NAME }}"
            echo "Tenant ID: ${{ secrets.AZURE_TENANT_ID }}"

            # Verificar conectividade com Key Vault
            echo "üîç Testando conectividade com Key Vault..."
            if az keyvault show --name ${{ secrets.AZURE_KEYVAULT_NAME }} --query name -o tsv >/dev/null 2>&1; then
              echo "‚úÖ Conectividade com Key Vault estabelecida"
            else
              echo "‚ùå N√£o foi poss√≠vel conectar ao Key Vault: ${{ secrets.AZURE_KEYVAULT_NAME }}"
              echo "Verifique:"
              echo "  1. Se o Key Vault existe"
              echo "  2. Permiss√µes RBAC (Key Vault Secrets User)"
              echo "  3. Configura√ß√£o do Federated Identity Credential"
              exit 1
            fi

            # Buscar email Let's Encrypt
            echo "üîç Buscando conexao-de-sorte-letsencrypt-email..."
            if ACME_EMAIL=$(az keyvault secret show --name conexao-de-sorte-letsencrypt-email --vault-name ${{ secrets.AZURE_KEYVAULT_NAME }} --query value -o tsv 2>/dev/null); then
              echo "::add-mask::$ACME_EMAIL"
              echo "ACME_EMAIL=$ACME_EMAIL" >> $GITHUB_ENV
              echo "‚úÖ Email Let's Encrypt obtido"
            else
              echo "‚ö†Ô∏è Email Let's Encrypt n√£o encontrado"
              echo "ACME_EMAIL=" >> $GITHUB_ENV
            fi

            # Buscar senha dashboard
            echo "üîç Buscando conexao-de-sorte-traefik-dashboard-password..."
            if DASHBOARD_PASSWORD=$(az keyvault secret show --name conexao-de-sorte-traefik-dashboard-password --vault-name ${{ secrets.AZURE_KEYVAULT_NAME }} --query value -o tsv 2>/dev/null); then
              echo "::add-mask::$DASHBOARD_PASSWORD"
              echo "DASHBOARD_PASSWORD=$DASHBOARD_PASSWORD" >> $GITHUB_ENV
              echo "‚úÖ Senha dashboard obtida"
            else
              echo "‚ö†Ô∏è Senha dashboard n√£o encontrada"
              echo "DASHBOARD_PASSWORD=" >> $GITHUB_ENV
            fi

            echo "‚úÖ Busca de segredos conclu√≠da"
        continue-on-error: true

      - name: Verificar segredos espec√≠ficos do Traefik Infrastructure
        id: verify-traefik-secrets
        if: ${{ needs.validate-and-build.outputs.has_keyvault == 'true' }}
        uses: azure/CLI@v1
        with:
          inlineScript: |
            set -euo pipefail
            echo "üîç Verificando segredos espec√≠ficos do Traefik Infrastructure..."
            
            # Lista de segredos a verificar
            secrets_to_check=(
              "conexao-de-sorte-traefik-admin-password"
              "conexao-de-sorte-traefik-audit-password"
              "conexao-de-sorte-traefik-crypto-password"
              "conexao-de-sorte-traefik-dashboard-password"
              "conexao-de-sorte-webhook-secret"
              "conexao-de-sorte-zookeeper-client-port"
            )
            
            missing_secrets=()
            invalid_secrets=()
            valid_secrets=()
            
            for secret_name in "${secrets_to_check[@]}"; do
              echo "üîç Verificando: $secret_name"
              
              # Buscar o segredo do Key Vault
              if secret_value=$(az keyvault secret show --name "$secret_name" --vault-name ${{ secrets.AZURE_KEYVAULT_NAME }} --query value -o tsv 2>/dev/null); then
                
                # Validar se n√£o est√° vazio
                if [[ -z "$secret_value" ]]; then
                  echo "  ‚ö†Ô∏è Segredo encontrado mas VAZIO"
                  invalid_secrets+=("$secret_name (vazio)")
                  continue
                fi
                
                # Validar comprimento m√≠nimo (exceto para porta que pode ser num√©rica)
                if [[ "$secret_name" == *"zookeeper-client-port"* ]]; then
                  # Para porta, verificar se √© num√©rico e dentro da faixa v√°lida
                  if [[ "$secret_value" =~ ^[0-9]+$ ]] && [[ "$secret_value" -ge 1 ]] && [[ "$secret_value" -le 65535 ]]; then
                    echo "  ‚úÖ Porta v√°lida: $secret_value"
                    valid_secrets+=("$secret_name")
                    echo "${secret_name^^}=$secret_value" >> $GITHUB_ENV
                  else
                    echo "  ‚ö†Ô∏è Porta inv√°lida: $secret_value"
                    invalid_secrets+=("$secret_name (porta inv√°lida: $secret_value)")
                  fi
                else
                  # Para senhas, verificar comprimento m√≠nimo
                  secret_length=${#secret_value}
                  if [[ $secret_length -ge 8 ]]; then
                    echo "  ‚úÖ Senha v√°lida (${secret_length} caracteres)"
                    valid_secrets+=("$secret_name")
                    echo "::add-mask::$secret_value"
                    echo "${secret_name^^}=$secret_value" >> $GITHUB_ENV
                  else
                    echo "  ‚ö†Ô∏è Senha muito curta (${secret_length} caracteres)"
                    invalid_secrets+=("$secret_name (muito curta: ${secret_length} caracteres)")
                  fi
                fi
                
              else
                echo "  ‚ùå Segredo N√ÉO ENCONTRADO"
                missing_secrets+=("$secret_name")
              fi
            done
            
            # Resumo da verifica√ß√£o
            echo ""
            echo "üìä RESUMO DA VERIFICA√á√ÉO DE SEGREDOS:"
            echo "‚úÖ V√°lidos: ${#valid_secrets[@]}"
            printf '   - %s\n' "${valid_secrets[@]}" 2>/dev/null || true
            
            echo ""
            echo "‚ö†Ô∏è Inv√°lidos: ${#invalid_secrets[@]}"
            printf '   - %s\n' "${invalid_secrets[@]}" 2>/dev/null || true
            
            echo ""
            echo "‚ùå Ausentes: ${#missing_secrets[@]}"
            printf '   - %s\n' "${missing_secrets[@]}" 2>/dev/null || true
            
            # Salvar contagens para steps posteriores
            echo "VALID_SECRETS_COUNT=${#valid_secrets[@]}" >> $GITHUB_ENV
            echo "INVALID_SECRETS_COUNT=${#invalid_secrets[@]}" >> $GITHUB_ENV
            echo "MISSING_SECRETS_COUNT=${#missing_secrets[@]}" >> $GITHUB_ENV
            
            echo "‚úÖ Verifica√ß√£o de segredos espec√≠ficos conclu√≠da"
        continue-on-error: true

      - name: Validar secrets obrigat√≥rios para produ√ß√£o
        run: |
          set -Eeuo pipefail

          echo "üîç Validando secrets obrigat√≥rios para deploy em produ√ß√£o..."

          # Verificar se o login Azure foi bem-sucedido
          if [[ "${AZURE_LOGIN_SUCCESS:-false}" == "false" ]]; then
            echo "‚ö†Ô∏è Login Azure n√£o realizado ou falhou"
            echo "‚ÑπÔ∏è O deploy continuar√° sem os segredos do Key Vault (modo desenvolvimento)"
            echo "‚ÑπÔ∏è Para usar SSL autom√°tico, configure o login Azure OIDC corretamente"
            exit 0
          fi

          # Verificar se conseguiu secrets essenciais via Azure CLI
          missing_secrets=()

          if [[ -z "${ACME_EMAIL:-}" ]]; then
            missing_secrets+=("conexao-de-sorte-letsencrypt-email")
          fi

          if [[ -z "${DASHBOARD_PASSWORD:-}" ]]; then
            missing_secrets+=("conexao-de-sorte-traefik-dashboard-password")
          fi

          if [[ ${#missing_secrets[@]} -gt 0 ]]; then
            echo "‚ùå Secrets obrigat√≥rios ausentes no Key Vault:"
            printf '   - %s\n' "${missing_secrets[@]}"
            echo ""
            echo "üí° Para resolver:"
            echo "   1. Verifique se os secrets existem no Key Vault: ${{ secrets.AZURE_KEYVAULT_NAME }}"
            echo "   2. Verifique permiss√µes RBAC (Key Vault Secrets User)"
            echo "   3. Verifique configura√ß√£o OIDC do GitHub"
            echo ""
            echo "‚ùå Deploy cancelado - secrets obrigat√≥rios ausentes"
            exit 1
          fi

          echo "‚úÖ Todos os secrets obrigat√≥rios est√£o dispon√≠veis"
          echo "‚úÖ SSL autom√°tico: Let's Encrypt configurado"
          echo "‚úÖ Dashboard: Autentica√ß√£o segura configurada"

      - name: üöÄ Deploy Traefik Stack (Swarm-Only)
        env:
          STACK_NAME: conexao-traefik
          COMPOSE_FILE: docker-compose.yml
          ACME_EMAIL: ${{ env.ACME_EMAIL }}
          DASHBOARD_PASSWORD: ${{ env.DASHBOARD_PASSWORD }}
        run: |
          echo "üöÄ Iniciando deploy do Traefik com Docker Swarm..."
          
          # Configurar vari√°veis de ambiente para o Traefik
          if [[ -n "${ACME_EMAIL:-}" ]]; then
            export ACME_EMAIL="$ACME_EMAIL"
            echo "‚úÖ Email Let's Encrypt configurado: ${ACME_EMAIL:0:3}***${ACME_EMAIL##*@}"
          else
            echo "‚ö†Ô∏è Email Let's Encrypt n√£o configurado (modo desenvolvimento)"
          fi
          
          if [[ -n "${DASHBOARD_PASSWORD:-}" ]]; then
            export DASHBOARD_PASSWORD="$DASHBOARD_PASSWORD"
            echo "‚úÖ Senha do dashboard configurada (mascarada)"
          else
            echo "‚ö†Ô∏è Senha do dashboard n√£o configurada (modo desenvolvimento)"
          fi

          # Criar rede se n√£o existir
          if ! docker network ls | grep -q "conexao-network-swarm"; then
            echo "üåê Criando rede conexao-network-swarm"
            docker network create --driver overlay conexao-network-swarm
          else
            echo "‚úÖ Rede conexao-network-swarm j√° existe"
          fi

          # Remover stack existente se houver
          if docker stack ls | grep -q "$STACK_NAME"; then
            echo "üîÑ Removendo stack existente '$STACK_NAME'..."
            docker stack rm "$STACK_NAME"
            sleep 10
          fi

          # Deploy da nova stack
          echo "üèóÔ∏è Executando deploy da stack '$STACK_NAME'..."
          docker stack deploy -c "$COMPOSE_FILE" "$STACK_NAME"

          echo "‚è∞ Aguardando estabiliza√ß√£o dos servi√ßos Traefik..."
          sleep 35


      - name: Healthcheck Traefik (Multi-m√©todo)
        env:
          STACK_NAME: conexao-traefik
        run: |
          echo "üîç Validando sa√∫de do Traefik com health checks robustos..."

          # Aguardar at√© 3 minutos para Traefik ficar dispon√≠vel
          timeout=180
          elapsed=0
          health_passed=false

          while [ $elapsed -lt $timeout ] && [ "$health_passed" = false ]; do
            TRAEFIK_CONTAINER=$(docker ps -q -f name="${STACK_NAME}_traefik" | head -1)

            if [ -n "$TRAEFIK_CONTAINER" ]; then
              echo "üîç Testando health check do Traefik... ($elapsed/$timeout segundos)"

              # M√©todo 1: Comando nativo wget para ping endpoint
              if docker exec "$TRAEFIK_CONTAINER" wget -q -O- http://localhost:8080/ping 2>/dev/null | grep -q "OK"; then
                echo "‚úÖ Traefik health check passed (ping endpoint)"
                health_passed=true
                break
              fi

              # M√©todo 2: Verificar logs de inicializa√ß√£o
              if docker logs "$TRAEFIK_CONTAINER" 2>/dev/null | grep -q "Configuration loaded\\|Traefik version"; then
                echo "‚úÖ Traefik health check passed (logs validation)"
                health_passed=true
                break
              fi

              # M√©todo 3: Verificar se porta est√° ativa
              if docker exec "$TRAEFIK_CONTAINER" ss -tuln 2>/dev/null | grep -q ":8080\\|:80\\|:443"; then
                echo "‚úÖ Traefik health check passed (ports active)"
                health_passed=true
                break
              fi

              echo "‚è≥ Traefik ainda n√£o est√° pronto... ($elapsed/$timeout segundos)"
            else
              echo "‚è≥ Container Traefik ainda n√£o encontrado... ($elapsed/$timeout segundos)"
            fi

            sleep 10
            elapsed=$((elapsed + 10))
          done

          if [ "$health_passed" = false ]; then
            echo "‚ö†Ô∏è Traefik health check n√£o passou em $timeout segundos"
            echo "üîç Verificando logs finais do Traefik..."
            if [ -n "$TRAEFIK_CONTAINER" ]; then
              echo "--- √öltimos 30 logs do Traefik ---"
              docker logs "$TRAEFIK_CONTAINER" --tail 30 2>/dev/null || true
              echo "--- Fim dos logs ---"
            fi
            echo "üí° Nota: Traefik pode estar funcionando mesmo com health check parcial"
            echo "üí° Verifique os logs acima para diagn√≥stico"
            exit 1
          else
            echo "‚úÖ Traefik health check conclu√≠do com sucesso!"
          fi

      - name: Connectivity Validation
        env:
          STACK_NAME: conexao-traefik
        run: |
          echo "üîç Validando conectividade do Traefik..."

          # Verificar se o servi√ßo est√° listado no Swarm
          if docker service ls | grep -q "${STACK_NAME}_traefik"; then
            echo "‚úÖ Servi√ßo Traefik encontrado no Swarm"
          else
            echo "‚ùå Servi√ßo Traefik n√£o encontrado no Swarm"
            exit 1
          fi

          # Verificar se est√° na rede correta
          if docker network inspect conexao-network-swarm | grep -q traefik; then
            echo "‚úÖ Traefik conectado √† rede overlay"
          else
            echo "‚ö†Ô∏è Traefik pode n√£o estar na rede overlay correta"
          fi

          # Verificar endpoints espec√≠ficos
          TRAEFIK_CONTAINER=$(docker ps -q -f name="${STACK_NAME}_traefik" | head -1)
          if [ -n "$TRAEFIK_CONTAINER" ]; then
            # Testar API port
            if docker exec "$TRAEFIK_CONTAINER" ss -tuln 2>/dev/null | grep -q ":8080"; then
              echo "‚úÖ Traefik API port ativo (porta 8080)"
            else
              echo "‚ÑπÔ∏è Traefik API port n√£o detectado"
            fi

            # Testar HTTP port
            if docker exec "$TRAEFIK_CONTAINER" ss -tuln 2>/dev/null | grep -q ":80"; then
              echo "‚úÖ Traefik HTTP port ativo (porta 80)"
            else
              echo "‚ÑπÔ∏è Traefik HTTP port n√£o detectado"
            fi
          fi

          echo "üìä Status final dos servi√ßos:"
          docker service ls --filter name="${STACK_NAME}_*" --format "table {{.Name}}\t{{.Replicas}}\t{{.Image}}"

  cleanup-artifacts:
    needs: deploy-selfhosted
    runs-on: ubuntu-latest
    timeout-minutes: 5
    if: always()
    permissions:
      contents: read
    steps:
      - name: Cleanup artifacts
        run: |
          echo "üßπ Limpando artefatos antigos..."
          # Aqui poderia ser implementada limpeza de artefatos via API do GitHub
          echo "‚úÖ Limpeza de artefatos conclu√≠da"
