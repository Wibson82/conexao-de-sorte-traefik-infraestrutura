name: "üåê Traefik Infrastructure ‚Äì CI/CD Pipeline"

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  SERVICE_NAME: traefik-infrastructure

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  validate-and-build:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y python3 python3-yaml

      - name: Prepare scripts
        run: |
          chmod +x .github/workflows/scripts/validate-traefik.sh
          chmod +x .github/workflows/scripts/security-validation.sh

      - name: Validate Traefik Configs
        run: .github/workflows/scripts/validate-traefik.sh

      - name: Security Validation
        run: .github/workflows/scripts/security-validation.sh

      - name: Create secrets directory for artifact
        run: |
          mkdir -p secrets
          # Criar arquivo b√°sico de auth se n√£o existir
          if [ ! -f secrets/traefik-basicauth ]; then
            echo 'admin:$2y$10$rQ.0eEWJx7mQ8k4yR4x9/.2l0JUqN7zYTHmFePXkz1YRkFvqRZ5hW' > secrets/traefik-basicauth
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: traefik-configs
          path: |
            docker-compose.yml
            docker-compose.swarm.yml
            traefik/
            letsencrypt/
            secrets/

  deploy-selfhosted:
    needs: validate-and-build
    runs-on: [ self-hosted, Linux, X64, conexao, conexao-de-sorte-traefik-infraestrutura ]
    timeout-minutes: 15
    if: github.ref == 'refs/heads/main'
    permissions:
      id-token: write
      contents: read
    env:
      DOCKER_NETWORK_NAME: conexao-network-swarm  # Usar rede overlay existente
      STACK_NAME: conexao-traefik
      COMPOSE_FILE: docker-compose.swarm.yml  # OBRIGAT√ìRIO: Usar arquivo Swarm
    steps:
      - uses: actions/checkout@v4
        with:
          clean: true
          fetch-depth: 1
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: traefik-configs
          path: .

      # REMOVIDO: Azure CLI n√£o deve ser usado em produ√ß√£o
      # Traefik usa apenas Docker Secrets sincronizados pela infraestrutura-core

      - name: "üîç Validar Docker Secrets Cr√≠ticos (OIDC-Only)"
        shell: bash
        run: |
          echo "üîç Validando Docker Secrets cr√≠ticos para Traefik (OIDC-Only)..."

          # Lista de secrets cr√≠ticos para Traefik (nomenclatura UPPERCASE dos Docker Secrets)
          CRITICAL_SECRETS=(
            "CORS_ALLOWED_ORIGINS"
            "SSL_ENABLED"
            "SSL_KEYSTORE_PASSWORD"
            "JWT_VERIFICATION_KEY"
          )

          # Lista de secrets opcionais mas recomendados
          OPTIONAL_SECRETS=(
            "CORS_ALLOW_CREDENTIALS"
            "SSL_KEYSTORE_PATH"
            "JWT_SIGNING_KEY"
          )

          echo "üîç Verificando secrets CR√çTICOS:"
          MISSING_CRITICAL=""
          for secret in "${CRITICAL_SECRETS[@]}"; do
            if docker secret inspect "$secret" >/dev/null 2>&1; then
              echo "‚úÖ $secret: Dispon√≠vel"
            else
              echo "‚ùå $secret: CR√çTICO AUSENTE"
              MISSING_CRITICAL="$MISSING_CRITICAL $secret"
            fi
          done

          echo ""
          echo "üîç Verificando secrets OPCIONAIS:"
          for secret in "${OPTIONAL_SECRETS[@]}"; do
            if docker secret inspect "$secret" >/dev/null 2>&1; then
              echo "‚úÖ $secret: Dispon√≠vel (opcional)"
            else
              echo "‚ö†Ô∏è $secret: Ausente (opcional)"
            fi
          done

          if [[ -n "$MISSING_CRITICAL" ]]; then
            echo ""
            echo "‚ùå ERRO CR√çTICO: Secrets obrigat√≥rios ausentes:$MISSING_CRITICAL"
            echo "üîß SOLU√á√ÉO: Execute infraestrutura-core pipeline para sincronizar todos os secrets"
            echo "üìã Aguarde infraestrutura-core sincronizar antes de prosseguir com Traefik"
            exit 1
          else
            echo ""
            echo "‚úÖ Todos os secrets cr√≠ticos para Traefik est√£o dispon√≠veis"
          fi

      - name: Prepare scripts
        run: |
          chmod +x .github/workflows/scripts/deploy-traefik.sh .github/workflows/scripts/healthcheck-traefik.sh .github/workflows/scripts/connectivity-validation.sh
          # Usar arquivo de ambiente espec√≠fico para CI/CD
          cp .env.ci .env

      - name: üöÄ Deploy Traefik Stack (Swarm-Only)
        env:
          STACK_NAME: conexao-traefik
          COMPOSE_FILE: docker-compose.swarm.yml  # OBRIGAT√ìRIO: Swarm file
        run: |
          echo "üöÄ Iniciando deploy do Traefik com Docker Swarm..."

          # Verifica√ß√£o FINAL dos secrets antes do deploy
          echo "üîç Verifica√ß√£o FINAL dos secrets antes do deploy..."
          REQUIRED_SECRETS=("CORS_ALLOWED_ORIGINS" "SSL_ENABLED" "JWT_VERIFICATION_KEY")
          MISSING_CRITICAL=""

          for secret in "${REQUIRED_SECRETS[@]}"; do
            if ! docker secret inspect "$secret" >/dev/null 2>&1; then
              echo "‚ùå CRITICAL SECRET MISSING: $secret"
              MISSING_CRITICAL="$MISSING_CRITICAL $secret"
            else
              echo "‚úÖ Secret verified: $secret"
            fi
          done

          if [ -n "$MISSING_CRITICAL" ]; then
            echo "‚ùå FATAL: Missing critical secrets for Traefik:$MISSING_CRITICAL"
            echo "üîß Cannot proceed with Traefik deploy without critical secrets"
            exit 1
          fi

          # Executar deploy usando APENAS o arquivo Swarm
          chmod +x .github/workflows/scripts/deploy-traefik.sh
          .github/workflows/scripts/deploy-traefik.sh

      - name: Healthcheck Traefik
        env:
          STACK_NAME: conexao-traefik
        run: .github/workflows/scripts/healthcheck-traefik.sh

      - name: Connectivity Validation
        env:
          STACK_NAME: conexao-traefik
        run: .github/workflows/scripts/connectivity-validation.sh
