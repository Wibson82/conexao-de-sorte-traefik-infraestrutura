#!/bin/bash
# ============================================================================
# üê≥ DOCKER ENTRYPOINT - TRAEFIK INFRASTRUCTURE
# ============================================================================
#
# Script de inicializa√ß√£o personalizado para Traefik Infrastructure
# Contexto: Componente cr√≠tico de infraestrutura exposta (Reverse Proxy)
# - Valida√ß√µes espec√≠ficas para Traefik 3.x e Let's Encrypt
# - Health checks para reverse proxy e load balancer
# - Valida√ß√£o de certificados SSL/TLS
# - Verifica√ß√£o de configura√ß√£o de seguran√ßa
# - Teste de conectividade com backend services
# - Valida√ß√£o de middlewares e plugins
#
# Uso: Configurar no Dockerfile como ENTRYPOINT
# ============================================================================

set -euo pipefail

# ============================================================================
# üìã CONFIGURA√á√ÉO ESPEC√çFICA DO TRAEFIK
# ============================================================================

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Fun√ß√£o de log
log() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')] [TRAFIK]${NC} $1"
}

error() {
    echo -e "${RED}[$(date +'%Y-%m-%d %H:%M:%S')] [TRAFIK] ERROR:${NC} $1" >&2
}

success() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] [TRAFIK] SUCCESS:${NC} $1"
}

warning() {
    echo -e "${YELLOW}[$(date +'%Y-%m-%d %H:%M:%S')] [TRAFIK] WARNING:${NC} $1"
}

# ============================================================================
# üîß VALIDA√á√ÉO DE AMBIENTE - TRAEFIK ESPEC√çFICO
# ============================================================================

log "üöÄ Iniciando valida√ß√£o de ambiente - Traefik Infrastructure..."

# Verificar se estamos rodando como usu√°rio correto
if [[ "$(id -u)" -eq 0 ]]; then
    warning "Executando como root - isso pode ser inseguro em produ√ß√£o"
fi

# Vari√°veis obrigat√≥rias espec√≠ficas do Traefik
required_vars=(
    "CONEXAO_DE_SORTE_LETSENCRYPT_EMAIL"
    "CONEXAO_DE_SORTE_TRAEFIK_DASHBOARD_PASSWORD"
    "CONEXAO_DE_SORTE_SERVER_PORT"
)

missing_vars=()
for var in "${required_vars[@]}"; do
    if [[ -z "${!var:-}" ]]; then
        missing_vars+=("$var")
    fi
done

if [[ ${#missing_vars[@]} -gt 0 ]]; then
    error "Vari√°veis de ambiente obrigat√≥rias n√£o definidas para Traefik:"
    for var in "${missing_vars[@]}"; do
        error "  - $var"
    done
    exit 1
fi

# Valida√ß√µes espec√≠ficas do Traefik
if [[ "$CONEXAO_DE_SORTE_SERVER_PORT" != "80" && "$CONEXAO_DE_SORTE_SERVER_PORT" != "443" ]]; then
    warning "Porta do Traefik diferente do padr√£o HTTP/HTTPS: $CONEXAO_DE_SORTE_SERVER_PORT"
fi

# Validar email do Let's Encrypt
if [[ ! "$CONEXAO_DE_SORTE_LETSENCRYPT_EMAIL" =~ ^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$ ]]; then
    error "‚ùå Email do Let's Encrypt inv√°lido: $CONEXAO_DE_SORTE_LETSENCRYPT_EMAIL"
    exit 1
fi

success "‚úÖ Valida√ß√£o de ambiente conclu√≠da - Traefik Infrastructure"

# ============================================================================
# üîê VALIDA√á√ÉO DE SEGURAN√áA ESPEC√çFICA - TRAEFIK
# ============================================================================

log "üîê Executando valida√ß√µes de seguran√ßa espec√≠ficas do Traefik..."

# Verificar se h√° exposi√ß√£o de dashboard sem prote√ß√£o
if [[ -n "${TRAFIK_DASHBOARD_ENABLED:-}" ]]; then
    if [[ "${TRAFIK_DASHBOARD_ENABLED}" == "true" ]]; then
        if [[ -z "${CONEXAO_DE_SORTE_TRAEFIK_DASHBOARD_PASSWORD:-}" ]]; then
            error "‚ùå Dashboard do Traefik habilitado sem senha - viola√ß√£o de seguran√ßa cr√≠tica"
            exit 1
        fi
        success "‚úÖ Dashboard do Traefik protegido com senha"
    fi
fi

# Validar complexidade da senha do dashboard
if [[ -n "${CONEXAO_DE_SORTE_TRAEFIK_DASHBOARD_PASSWORD:-}" ]]; then
    if [[ ${#CONEXAO_DE_SORTE_TRAEFIK_DASHBOARD_PASSWORD} -lt 8 ]]; then
        error "‚ùå Senha do dashboard do Traefik muito curta (m√≠nimo 8 caracteres)"
        exit 1
    fi
    success "‚úÖ Complexidade da senha do dashboard validada"
fi

# Validar se n√£o est√° usando certificados auto-assinados em produ√ß√£o
if [[ "${LETSENCRYPT_STAGING:-}" == "true" ]]; then
    warning "‚ö†Ô∏è Usando Let's Encrypt Staging - certificados n√£o confi√°veis em produ√ß√£o"
fi

# ============================================================================
# üåê VALIDA√á√ÉO DE CONECTIVIDADE - NETWORK
# ============================================================================

log "üîç Validando conectividade de rede..."

# Verificar se Docker est√° dispon√≠vel
if ! docker info >/dev/null 2>&1; then
    error "‚ùå Docker n√£o est√° dispon√≠vel ou n√£o est√° rodando"
    exit 1
fi

# Verificar se Docker Swarm est√° ativo
if ! docker info --format '{{.Swarm.LocalNodeState}}' | grep -q "active"; then
    warning "‚ö†Ô∏è Docker Swarm n√£o est√° ativo - inicializando..."
    if ! docker swarm init --advertise-addr $(hostname -I | awk '{print $1}') 2>/dev/null; then
        log "‚ÑπÔ∏è Docker Swarm pode j√° estar inicializado ou n√£o √© poss√≠vel inicializar"
    fi
fi

success "‚úÖ Docker e Docker Swarm dispon√≠veis"

# ============================================================================
# üîÑ VALIDA√á√ÉO DE CONECTIVIDADE - BACKEND SERVICES
# ============================================================================

log "üîç Validando conectividade com backend services..."

# Lista de services que devem estar dispon√≠veis
backend_services=(
    "conexao-gateway"
    "conexao-resultados"
    "conexao-redis"
    "conexao-mysql"
)

for service in "${backend_services[@]}"; do
    if docker service ls --format '{{.Name}}' | grep -q "^${service}$"; then
        success "‚úÖ Backend service encontrado: $service"
    else
        warning "‚ö†Ô∏è Backend service n√£o encontrado: $service (pode estar iniciando)"
    fi
done

# ============================================================================
# üìã VALIDA√á√ÉO DE CONFIGURA√á√ÉO TRAEFIK
# ============================================================================

log "üîç Validando configura√ß√£o espec√≠fica do Traefik..."

# Verificar se h√° configura√ß√£o de middlewares de seguran√ßa
if [[ -f "/app/traefik.yml" ]]; then
    if grep -q "basicAuth" /app/traefik.yml; then
        success "‚úÖ Middleware de autentica√ß√£o b√°sica configurado"
    fi

    if grep -q "rateLimit" /app/traefik.yml; then
        success "‚úÖ Middleware de rate limiting configurado"
    fi

    if grep -q "cors" /app/traefik.yml; then
        success "‚úÖ Middleware de CORS configurado"
    fi
fi

# Validar configura√ß√£o de Let's Encrypt
if [[ -n "${LETSENCRYPT_STAGING:-}" ]]; then
    log "‚ÑπÔ∏è Let's Encrypt configurado para ambiente: ${LETSENCRYPT_STAGING:-production}"
fi

# ============================================================================
# üè• VALIDA√á√ÉO DE HEALTH ENDPOINTS
# ============================================================================

log "üè• Validando health endpoints dos servi√ßos..."

# Fun√ß√£o para testar health endpoint
test_health_endpoint() {
    local service_name=$1
    local port=${2:-80}
    local protocol=${3:-http}

    local url="${protocol}://localhost:${port}/health"
    if [[ "$service_name" == "gateway" ]]; then
        url="${protocol}://localhost:${port}/actuator/health"
    elif [[ "$service_name" == "resultados" ]]; then
        url="${protocol}://localhost:${port}/actuator/health"
    fi

    if curl -f -s "$url" >/dev/null 2>&1; then
        success "‚úÖ Health endpoint acess√≠vel: $service_name ($url)"
        return 0
    else
        warning "‚ö†Ô∏è Health endpoint n√£o acess√≠vel: $service_name ($url)"
        return 1
    fi
}

# Testar health endpoints dos servi√ßos principais
test_health_endpoint "gateway" "8086" "http" || true
test_health_endpoint "resultados" "8083" "http" || true

# ============================================================================
# üîí VALIDA√á√ÉO DE CERTIFICADOS SSL
# ============================================================================

log "üîí Validando configura√ß√£o de SSL/TLS..."

if [[ -d "/app/certs" ]]; then
    if [[ -f "/app/certs/tls.crt" && -f "/app/certs/tls.key" ]]; then
        success "‚úÖ Certificados SSL encontrados"

        # Validar data de expira√ß√£o (se openssl estiver dispon√≠vel)
        if command -v openssl >/dev/null 2>&1; then
            expiry_date=$(openssl x509 -in /app/certs/tls.crt -enddate -noout 2>/dev/null | cut -d= -f2 || echo "")
            if [[ -n "$expiry_date" ]]; then
                expiry_timestamp=$(date -d "$expiry_date" +%s 2>/dev/null || echo "")
                current_timestamp=$(date +%s)

                if [[ -n "$expiry_timestamp" && "$expiry_timestamp" -gt "$current_timestamp" ]]; then
                    days_remaining=$(( (expiry_timestamp - current_timestamp) / 86400 ))
                    if [[ $days_remaining -lt 30 ]]; then
                        warning "‚ö†Ô∏è Certificado SSL expira em $days_remaining dias"
                    else
                        success "‚úÖ Certificado SSL v√°lido por mais $days_remaining dias"
                    fi
                else
                    warning "‚ö†Ô∏è Certificado SSL expirado ou inv√°lido"
                fi
            fi
        fi
    else
        warning "‚ö†Ô∏è Certificados SSL n√£o encontrados em /app/certs"
    fi
fi

# ============================================================================
# üìä INFORMA√á√ïES DO AMBIENTE - TRAEFIK
# ============================================================================

log "üìã Informa√ß√µes do ambiente - Traefik Infrastructure:"
echo "  - Service: Conex√£o de Sorte - Traefik Infrastructure"
echo "  - Profile: ${SPRING_PROFILES_ACTIVE:-default}"
echo "  - Server Port: $CONEXAO_DE_SORTE_SERVER_PORT (Padr√£o: 80/443)"
echo "  - Let's Encrypt Email: $CONEXAO_DE_SORTE_LETSENCRYPT_EMAIL"
echo "  - Dashboard: ${TRAFIK_DASHBOARD_ENABLED:-Desabilitado}"
echo "  - Staging Mode: ${LETSENCRYPT_STAGING:-false}"
echo "  - SSL Certificates: ${SSL_CERTS_CONFIGURED:-N√£o configurado}"
echo "  - Health Endpoint: http://localhost:$CONEXAO_DE_SORTE_SERVER_PORT/ping"
echo "  - Dashboard: http://localhost:8080/dashboard"
echo "  - API: http://localhost:8080/api"

# ============================================================================
# üèÉ EXECU√á√ÉO DA APLICA√á√ÉO - TRAEFIK
# ============================================================================

log "üèÉ Iniciando Traefik Infrastructure..."

# Executar aplica√ß√£o com exec para permitir signal handling
exec "$@"
