#!/bin/bash
set -euo pipefail

echo "üöÄ [$(date)] Iniciando aplica√ß√£o backend..."

# Detectar ambiente baseado em vari√°veis
if [[ "${ENVIRONMENT:-dev}" == "production" ]] || [[ "${SPRING_PROFILES_ACTIVE:-}" == *"prod"* ]]; then
    echo "üè≠ [$(date)] Modo: PRODU√á√ÉO"
    DETECTED_ENV="production"
else
    echo "üîç [$(date)] Modo: DESENVOLVIMENTO"
    DETECTED_ENV="development"
fi

# OVERRIDE: Se ENVIRONMENT=production, sempre mostrar PRODU√á√ÉO
if [[ "${ENVIRONMENT:-}" == "production" ]]; then
    echo "üè≠ [$(date)] OVERRIDE: For√ßando modo PRODU√á√ÉO (ENVIRONMENT=production)"
    DETECTED_ENV="production"
fi

# Verificar se estamos em ambiente de produ√ß√£o com Docker Swarm
if [[ "${DETECTED_ENV}" == "production" ]] && [[ -d "/run/secrets" ]]; then
    echo "üîê [$(date)] Modo PRODU√á√ÉO: Carregando secrets do Docker Swarm..."
    
    # Lista de secrets necess√°rios (Managed Identity + fallback Service Principal)
    required_secrets=(
      AZURE_KEYVAULT_ENDPOINT
      AZURE_CLIENT_ID
      AZURE_CLIENT_SECRET
      AZURE_TENANT_ID
    )
    
    load_secret() {
      local name="$1"
      local file="/run/secrets/$name"

      if [[ ! -r "$file" ]]; then
        echo "‚ö†Ô∏è  [$(date)] Secret $file n√£o encontrado - usando fallback" >&2
        return 1
      fi

      local value
      value=$(cat "$file")
      printf '%s' "$value"
    }
    
    # Carregar secrets do Docker Swarm (Managed Identity primeiro)
    if AZURE_KEYVAULT_ENDPOINT=$(load_secret AZURE_KEYVAULT_ENDPOINT 2>/dev/null); then
        echo "‚úÖ [$(date)] Azure Key Vault endpoint carregado"
        export AZURE_KEYVAULT_ENDPOINT="$AZURE_KEYVAULT_ENDPOINT"
        export AZURE_MANAGED_IDENTITY_ENABLED=true
    else
        echo "‚ùå [$(date)] AZURE_KEYVAULT_ENDPOINT obrigat√≥rio n√£o encontrado"
        exit 1
    fi
    
    # Carregar Service Principal como fallback (opcional)
    if AZURE_CLIENT_ID=$(load_secret AZURE_CLIENT_ID 2>/dev/null); then
        export AZURE_CLIENT_ID="$AZURE_CLIENT_ID"
        if AZURE_CLIENT_SECRET=$(load_secret AZURE_CLIENT_SECRET 2>/dev/null); then
            export AZURE_CLIENT_SECRET="$AZURE_CLIENT_SECRET"
            if AZURE_TENANT_ID=$(load_secret AZURE_TENANT_ID 2>/dev/null); then
                export AZURE_TENANT_ID="$AZURE_TENANT_ID"
                echo "‚úÖ [$(date)] Service Principal carregado como fallback"
            fi
        fi
    else
        echo "‚ÑπÔ∏è  [$(date)] Service Principal n√£o configurado - usando apenas Managed Identity"
    fi
    
    echo "‚úÖ [$(date)] Secrets do Docker Swarm carregados"
else
    if [[ "${DETECTED_ENV}" == "production" ]]; then
        echo "üè≠ [$(date)] Modo PRODU√á√ÉO: Usando vari√°veis de ambiente (sem Docker Swarm)"
    else
        echo "üõ†Ô∏è [$(date)] Modo DESENVOLVIMENTO: Usando vari√°veis de ambiente para Azure Key Vault"
    fi
    
    # Verificar se o endpoint do Azure Key Vault est√° definido
    if [[ -n "${AZURE_KEYVAULT_ENDPOINT:-}" ]]; then
        echo "‚úÖ [$(date)] Azure Key Vault endpoint encontrado - ativando Managed Identity"
        export AZURE_MANAGED_IDENTITY_ENABLED=true
        export SPRING_PROFILES_ACTIVE="${SPRING_PROFILES_ACTIVE:-dev}"
    else
        echo "‚ö†Ô∏è  [$(date)] Azure Key Vault n√£o configurado - usando configura√ß√µes locais"
        export SPRING_PROFILES_ACTIVE="${SPRING_PROFILES_ACTIVE:-dev}"
    fi
fi

echo "üìä [$(date)] Profile ativo: ${SPRING_PROFILES_ACTIVE}"
echo "üåç [$(date)] Plataforma: ${DOCKER_PLATFORM:-desconhecida}"
echo "üóÑÔ∏è  [$(date)] Banco de dados: ${SPRING_DATASOURCE_URL:-${CONEXAO_DE_SORTE_DATABASE_URL:-configurado via secrets}}"

if [[ -n "${AZURE_KEYVAULT_ENDPOINT:-}" ]]; then
    echo "üîê [$(date)] Azure Key Vault: ${AZURE_KEYVAULT_ENDPOINT}"
else
    echo "‚ö†Ô∏è  [$(date)] Azure Key Vault n√£o configurado - usando configura√ß√µes locais"
fi

# Verificar se o JAR existe
if [[ ! -f "/app/app.jar" ]]; then
    echo "‚ùå [$(date)] Arquivo JAR n√£o encontrado em /app/app.jar"
    exit 1
fi

echo "‚úÖ [$(date)] Iniciando aplica√ß√£o Spring Boot com m√©todo compat√≠vel..."
echo "üîß [$(date)] JAVA_OPTS: ${JAVA_OPTS:-sem op√ß√µes espec√≠ficas}"

# Executar a aplica√ß√£o Spring Boot usando o m√©todo mais compat√≠vel
exec java ${JAVA_OPTS:-} -jar /app/app.jar
