#!/bin/bash

# =============================================================================
# SCRIPT DE VERIFICA√á√ÉO DE SA√öDE DO AZURE KEY VAULT
# =============================================================================
# Verifica se o Azure Key Vault est√° funcionando corretamente e se h√°
# problemas de permiss√µes que possam impedir o funcionamento da aplica√ß√£o.
# =============================================================================

set -euo pipefail

# Configura√ß√µes
CONTAINER_NAME="${1:-backend-teste}"
MAX_WAIT_SECONDS=300
CHECK_INTERVAL=10
AZURE_ERRORS_FOUND=false

echo "üîç [$(date)] Verificando sa√∫de do Azure Key Vault..."
echo "üì¶ Container: $CONTAINER_NAME"

# Fun√ß√£o para verificar logs do container
check_azure_logs() {
    local container="$1"
    local logs
    
    if ! logs=$(docker logs "$container" 2>&1); then
        echo "‚ùå [$(date)] Erro ao obter logs do container $container"
        return 1
    fi
    
    # Verificar erros cr√≠ticos do Azure Key Vault
    if echo "$logs" | grep -q "Status code 403.*Forbidden"; then
        echo "üö´ [$(date)] ERRO CR√çTICO: Service Principal sem permiss√£o de escrita no Azure Key Vault"
        echo "üîß [$(date)] SOLU√á√ÉO: Conceder role 'Key Vault Secrets Officer' ao Service Principal"
        echo "üìã [$(date)] Service Principal ID: b8a756de-d867-4bfc-95cb-b20a4a8c35ef"
        echo "üè¢ [$(date)] Key Vault: chave-conexao-de-sorte"
        echo ""
        echo "üìã [$(date)] COMANDO PARA CORRIGIR:"
        echo "az role assignment create \\"
        echo "  --assignee 'b8a756de-d867-4bfc-95cb-b20a4a8c35ef' \\"
        echo "  --role 'Key Vault Secrets Officer' \\"
        echo "  --scope '/subscriptions/ae1add23-6db8-40a9-8a2d-b88996ef3128/resourcegroups/grupo-servicoes-conexao-de-sorte/providers/microsoft.keyvault/vaults/chave-conexao-de-sorte'"
        echo ""
        AZURE_ERRORS_FOUND=true
    fi
    
    if echo "$logs" | grep -q "Last unit does not have enough valid bits"; then
        echo "üîê [$(date)] ERRO: Chaves JWT corrompidas - senha de criptografia pode ter mudado"
        echo "üîß [$(date)] SOLU√á√ÉO: Verificar vari√°vel APP_ENCRYPTION_MASTER_PASSWORD"
        echo "üí° [$(date)] As chaves ser√£o regeneradas automaticamente ap√≥s corre√ß√£o"
        echo ""
        AZURE_ERRORS_FOUND=true
    fi
    
    if echo "$logs" | grep -q "PRODU√á√ÉO BLOQUEADA.*Azure Key Vault"; then
        echo "üõë [$(date)] APLICA√á√ÉO BLOQUEADA: Azure Key Vault obrigat√≥rio em produ√ß√£o"
        echo "‚ö° [$(date)] A√á√ÉO URGENTE: Corrigir permiss√µes Azure Key Vault"
        echo ""
        AZURE_ERRORS_FOUND=true
    fi
    
    if echo "$logs" | grep -q "SecretClient do Azure Key Vault n√£o dispon√≠vel"; then
        echo "üîå [$(date)] ERRO: SecretClient n√£o conectado ao Azure Key Vault"
        echo "üîß [$(date)] SOLU√á√ÉO: Verificar credenciais Azure (CLIENT_ID, CLIENT_SECRET, TENANT_ID)"
        echo ""
        AZURE_ERRORS_FOUND=true
    fi
    
    # Verificar sucessos
    if echo "$logs" | grep -q "‚úÖ SecretClient do Azure Key Vault injetado com sucesso"; then
        echo "‚úÖ [$(date)] SecretClient conectado com sucesso"
    fi
    
    if echo "$logs" | grep -q "‚úÖ Teste de escrita bem-sucedido"; then
        echo "‚úÖ [$(date)] Permiss√µes de escrita Azure Key Vault OK"
    fi
    
    if echo "$logs" | grep -q "‚úÖ Chaves JWT geradas e armazenadas no Azure Key Vault"; then
        echo "‚úÖ [$(date)] Chaves JWT armazenadas no Azure Key Vault com sucesso"
    fi
}

# Fun√ß√£o para aguardar container ficar dispon√≠vel
wait_for_container() {
    local container="$1"
    local elapsed=0
    
    echo "‚è≥ [$(date)] Aguardando container $container ficar dispon√≠vel..."
    
    while [ $elapsed -lt $MAX_WAIT_SECONDS ]; do
        if docker ps --format "table {{.Names}}" | grep -q "^$container$"; then
            echo "‚úÖ [$(date)] Container $container encontrado"
            return 0
        fi
        
        sleep $CHECK_INTERVAL
        elapsed=$((elapsed + CHECK_INTERVAL))
        echo "‚è≥ [$(date)] Aguardando... ($elapsed/${MAX_WAIT_SECONDS}s)"
    done
    
    echo "‚ùå [$(date)] Timeout: Container $container n√£o encontrado ap√≥s ${MAX_WAIT_SECONDS}s"
    return 1
}

# Fun√ß√£o principal
main() {
    echo "üöÄ [$(date)] Iniciando verifica√ß√£o de sa√∫de do Azure Key Vault..."
    
    # Aguardar container
    if ! wait_for_container "$CONTAINER_NAME"; then
        echo "‚ùå [$(date)] Container n√£o encontrado - abortando verifica√ß√£o"
        exit 1
    fi
    
    # Aguardar um pouco para aplica√ß√£o inicializar
    echo "‚è≥ [$(date)] Aguardando aplica√ß√£o inicializar..."
    sleep 30
    
    # Verificar logs
    check_azure_logs "$CONTAINER_NAME"
    
    # Resultado final
    if [ "$AZURE_ERRORS_FOUND" = true ]; then
        echo ""
        echo "‚ùå [$(date)] PROBLEMAS ENCONTRADOS NO AZURE KEY VAULT"
        echo "‚ö° [$(date)] A√á√ÉO NECESS√ÅRIA: Corrigir problemas listados acima"
        echo "üîÑ [$(date)] Ap√≥s corre√ß√£o, reiniciar aplica√ß√£o"
        echo ""
        
        # Definir output para GitHub Actions
        echo "azure_errors=true" >> $GITHUB_OUTPUT
        echo "azure_status=failed" >> $GITHUB_OUTPUT
        
        exit 1
    else
        echo ""
        echo "‚úÖ [$(date)] Azure Key Vault funcionando corretamente"
        echo "üîê [$(date)] Aplica√ß√£o segura e operacional"
        echo ""
        
        # Definir output para GitHub Actions
        echo "azure_errors=false" >> $GITHUB_OUTPUT
        echo "azure_status=success" >> $GITHUB_OUTPUT
        
        exit 0
    fi
}

# Executar fun√ß√£o principal
main "$@"
