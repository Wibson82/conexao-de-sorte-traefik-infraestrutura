name: "üöÄ Deploy Unificado - Conex√£o de Sorte"

on:
  workflow_dispatch:
    inputs:
      deploy_type:
        description: 'Tipo de deploy'
        required: true
        type: choice
        options: ['prod', 'teste']
        default: 'teste'
      force_deploy:
        description: 'For√ßar deploy mesmo sem mudan√ßas'
        required: false
        type: boolean
        default: false
  push:
    branches: [refatoracao-arquitetura-limpa]

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: docker.io
  REGISTRY_NAMESPACE: facilita
  IMAGE_NAME_TESTE: conexao-de-sorte-backend-teste
  IMAGE_NAME_PROD: conexao-de-sorte-backend

jobs:
  build-and-push:
    name: "üî® Build e Push"
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.meta.outputs.image_tag }}
      deploy_type: ${{ steps.meta.outputs.deploy_type }}
      full_image: ${{ steps.meta.outputs.full_image }}
      image_name: ${{ steps.meta.outputs.image_name }}
    steps:
      - name: "üì• Checkout"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: "üîç Determinar tipo de deploy"
        id: determine
        run: |
          set -euo pipefail
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            DEPLOY_TYPE="${{ github.event.inputs.deploy_type }}"
          else
            DEPLOY_TYPE="teste"
          fi
          echo "deploy_type=${DEPLOY_TYPE}" >> $GITHUB_OUTPUT
          echo "‚úÖ Deploy type determined: ${DEPLOY_TYPE}"

      - name: "üè∑Ô∏è Metadados da imagem"
        id: meta
        env:
          REGISTRY: ${{ env.REGISTRY }}
          REGISTRY_NAMESPACE: ${{ env.REGISTRY_NAMESPACE }}
          IMAGE_NAME_TESTE: ${{ env.IMAGE_NAME_TESTE }}
          IMAGE_NAME_PROD: ${{ env.IMAGE_NAME_PROD }}
        run: |
          set -euo pipefail
          export TZ=America/Sao_Paulo

          # Obter tipo de deploy
          DEPLOY_TYPE="${{ steps.determine.outputs.deploy_type }}"

          # Gerar timestamp no formato correto
          TIMESTAMP="$(date +'%d-%m-%Y-%H-%M')"

          # Determinar nome da imagem baseado no tipo de deploy
          if [[ "${DEPLOY_TYPE}" == "teste" ]]; then
            IMAGE_NAME="${IMAGE_NAME_TESTE}"
          else
            IMAGE_NAME="${IMAGE_NAME_PROD}"
          fi

          # Construir URL completa da imagem
          FULL_IMAGE="${REGISTRY}/${REGISTRY_NAMESPACE}/${IMAGE_NAME}:${TIMESTAMP}"

          # Definir outputs
          echo "image_tag=${TIMESTAMP}" >> $GITHUB_OUTPUT
          echo "deploy_type=${DEPLOY_TYPE}" >> $GITHUB_OUTPUT
          echo "full_image=${FULL_IMAGE}" >> $GITHUB_OUTPUT
          echo "image_name=${IMAGE_NAME}" >> $GITHUB_OUTPUT
          echo "tags=${FULL_IMAGE}" >> $GITHUB_OUTPUT

          # Log para debug
          echo "‚úÖ Metadados gerados:"
          echo "   - Deploy Type: ${DEPLOY_TYPE}"
          echo "   - Image Tag: ${TIMESTAMP}"
          echo "   - Image Name: ${IMAGE_NAME}"
          echo "   - Full Image: ${FULL_IMAGE}"
          echo "   - Registry: ${REGISTRY}"
          echo "   - Namespace: ${REGISTRY_NAMESPACE}"

      - name: "üîë Login Docker Hub"
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: "üê≥ Build & Push Docker Image"
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: |
            org.opencontainers.image.title=Conexao de Sorte Backend
            org.opencontainers.image.description=Backend da aplica√ß√£o Conex√£o de Sorte
            org.opencontainers.image.version=${{ steps.meta.outputs.image_tag }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ github.run_started_at }}
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.url=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.vendor=Facilita Servi√ßos
            deploy.type=${{ steps.meta.outputs.deploy_type }}

      - name: "‚úÖ Verificar imagem criada"
        run: |
          echo "üîç Verificando se a imagem foi criada com sucesso..."
          echo "üì¶ Imagem: ${{ steps.meta.outputs.full_image }}"
          echo "üè∑Ô∏è Tag: ${{ steps.meta.outputs.image_tag }}"
          echo "üéØ Deploy Type: ${{ steps.meta.outputs.deploy_type }}"

          # Validar a configura√ß√£o de porta
          echo "üîß Validando configura√ß√£o de porta para o ambiente: ${{ steps.meta.outputs.deploy_type }}"
          if [[ "${{ steps.meta.outputs.deploy_type }}" == "teste" ]]; then
            echo "üîç Validando porta 8081 para ambiente de teste"
          else
            echo "üîç Validando porta 8080 para ambiente de produ√ß√£o"
          fi

  deploy:
    name: "üö¢ Deploy ${{ needs.build-and-push.outputs.deploy_type }}"
    runs-on: ubuntu-latest
    needs: build-and-push
    environment: ${{ fromJSON('{"prod":"production","teste":"staging"}')[needs.build-and-push.outputs.deploy_type] || 'staging' }}
    env:
      DEPLOY_TYPE: ${{ needs.build-and-push.outputs.deploy_type }}
      IMAGE_TAG: ${{ needs.build-and-push.outputs.image_tag }}
      FULL_IMAGE: ${{ needs.build-and-push.outputs.full_image }}
      IMAGE_NAME: ${{ needs.build-and-push.outputs.image_name }}
    steps:
      - name: "üì• Checkout"
        uses: actions/checkout@v4

      - name: "üîê Configurar SSH"
        run: |
          set -euo pipefail
          mkdir -p ~/.ssh
          echo "${{ secrets.VPS_SSH_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan -p ${{ secrets.VPS_SSH_PORT }} ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts
          echo "‚úÖ SSH configurado com sucesso"

      - name: "ÔøΩ Validar vari√°veis"
        run: |
          set -euo pipefail
          echo "üîç Validando vari√°veis de deploy..."
          echo "   - DEPLOY_TYPE: [${{ env.DEPLOY_TYPE }}]"
          echo "   - IMAGE_TAG: [${{ env.IMAGE_TAG }}]"
          echo "   - FULL_IMAGE: [${{ env.FULL_IMAGE }}]"
          echo "   - IMAGE_NAME: [${{ env.IMAGE_NAME }}]"

          # Validar se todas as vari√°veis est√£o definidas
          if [[ -z "${{ env.DEPLOY_TYPE }}" ]]; then
            echo "‚ùå ERRO: DEPLOY_TYPE n√£o est√° definido"
            exit 1
          fi
          if [[ -z "${{ env.IMAGE_TAG }}" ]]; then
            echo "‚ùå ERRO: IMAGE_TAG n√£o est√° definido"
            exit 1
          fi

          # Validar endpoint de sa√∫de ap√≥s deploy
          echo "üîç Validando endpoint de sa√∫de..."
          if [[ "${{ needs.build-and-push.outputs.deploy_type }}" == "teste" ]]; then
            HEALTH_URL="http://localhost:8081/actuator/health"
            EXTERNAL_URL="https://www.conexaodesorte.com.br/teste/rest/actuator/health"
          else
            HEALTH_URL="http://localhost:8080/actuator/health"  
            EXTERNAL_URL="https://www.conexaodesorte.com.br/rest/actuator/health"
          fi

          # Aguardar aplica√ß√£o estar pronta
          echo "‚è≥ Aguardando aplica√ß√£o estar pronta..."
          for i in {1..10}; do
            if curl -f -s --connect-timeout 10 "$HEALTH_URL" >/dev/null 2>&1; then
              echo "‚úÖ Aplica√ß√£o est√° respondendo localmente"
              break
            fi
            echo "‚è≥ Tentativa $i/10 - aguardando..."
            sleep 10
          done

          # Testar acesso externo
          echo "üîç Testando acesso externo..."
          if curl -f -s --connect-timeout 10 "$EXTERNAL_URL" >/dev/null; then
            echo "‚úÖ Endpoint de sa√∫de acess√≠vel externamente: $EXTERNAL_URL"
          else
            echo "‚ö†Ô∏è Endpoint de sa√∫de n√£o acess√≠vel externamente (pode ser problema de proxy)"
            echo "üìã URL testada: $EXTERNAL_URL"
          fi
          if [[ -z "${{ env.FULL_IMAGE }}" ]]; then
            echo "‚ö†Ô∏è FULL_IMAGE vazio - reconstruindo localmente"
            FULL_IMAGE="${{ env.REGISTRY }}/${{ env.REGISTRY_NAMESPACE }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}"
            echo "   FULL_IMAGE reconstru√≠do: [${FULL_IMAGE}]"
            echo "FULL_IMAGE=${FULL_IMAGE}" >> $GITHUB_ENV
          fi
          echo "‚úÖ Todas as vari√°veis est√£o v√°lidas"

      - name: "üõë Limpeza de containers antigos"
        run: |
          set -euo pipefail
          echo "üßπ Limpando containers antigos do tipo: ${{ env.DEPLOY_TYPE }}"

          if [[ "${{ env.DEPLOY_TYPE }}" == "teste" ]]; then
            CONTAINER_NAME="backend-teste"
          else
            CONTAINER_NAME="backend-prod"
          fi

          ssh -i ~/.ssh/id_ed25519 -p ${{ secrets.VPS_SSH_PORT }} -o StrictHostKeyChecking=no ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }} "
            set -euo pipefail
            echo 'üîç Verificando containers existentes...'

            # Parar e remover container espec√≠fico
            if docker ps -a --format '{{.Names}}' | grep -q '^${CONTAINER_NAME}$'; then
              echo 'üõë Parando container: ${CONTAINER_NAME}'
              docker stop '${CONTAINER_NAME}' || true
              echo 'üóëÔ∏è Removendo container: ${CONTAINER_NAME}'
              docker rm '${CONTAINER_NAME}' || true
            else
              echo '‚úÖ Nenhum container ${CONTAINER_NAME} encontrado'
            fi
          "
          echo "‚úÖ Limpeza conclu√≠da"

      - name: "üöÄ Deploy remoto"
        run: |
          set -euo pipefail
          echo "üöÄ Iniciando deploy remoto..."
          echo "   - Tipo: ${{ env.DEPLOY_TYPE }}"
          echo "   - Imagem: ${{ env.FULL_IMAGE }}"

          # Executar deploy no servidor remoto
          ssh -i ~/.ssh/id_ed25519 -p ${{ secrets.VPS_SSH_PORT }} -o StrictHostKeyChecking=no ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }} << 'REMOTE_SCRIPT'
          set -euo pipefail
          export TZ=America/Sao_Paulo

          # Vari√°veis passadas do GitHub Actions
          DEPLOY_TYPE="${{ env.DEPLOY_TYPE }}"
          IMAGE_TAG="${{ env.IMAGE_TAG }}"
          FULL_IMAGE_RECEIVED="${{ env.FULL_IMAGE }}"
          IMAGE_NAME="${{ env.IMAGE_NAME }}"

          echo "üîç Vari√°veis recebidas no servidor:"
          echo "   - DEPLOY_TYPE: [${DEPLOY_TYPE}]"
          echo "   - IMAGE_TAG: [${IMAGE_TAG}]"
          echo "   - FULL_IMAGE_RECEIVED: [${FULL_IMAGE_RECEIVED}]"
          echo "   - IMAGE_NAME: [${IMAGE_NAME}]"

          # Valida√ß√£o das vari√°veis b√°sicas
          if [[ -z "${DEPLOY_TYPE}" || -z "${IMAGE_TAG}" ]]; then
            echo "‚ùå ERRO: Vari√°veis b√°sicas n√£o foram passadas corretamente"
            echo "   DEPLOY_TYPE: [${DEPLOY_TYPE:-VAZIO}]"
            echo "   IMAGE_TAG: [${IMAGE_TAG:-VAZIO}]"
            exit 1
          fi

          # Reconstruir FULL_IMAGE sempre para garantir que est√° correta
          if [[ "${DEPLOY_TYPE}" == "teste" ]]; then
            FINAL_IMAGE_NAME="conexao-de-sorte-backend-teste"
            SERVER_PORT="8081"
          else
            FINAL_IMAGE_NAME="conexao-de-sorte-backend"
            SERVER_PORT="8080"
          fi

          FULL_IMAGE="docker.io/facilita/${FINAL_IMAGE_NAME}:${IMAGE_TAG}"

          echo "üîß Imagem final constru√≠da:"
          echo "   - FINAL_IMAGE_NAME: [${FINAL_IMAGE_NAME}]"
          echo "   - FULL_IMAGE: [${FULL_IMAGE}]"
          echo "   - SERVER_PORT: [${SERVER_PORT}]"

          echo "üîë Fazendo login no Docker Hub..."
          echo '${{ secrets.DOCKER_PASSWORD }}' | docker login -u '${{ secrets.DOCKER_USERNAME }}' --password-stdin

          echo "üì• Baixando imagem: ${FULL_IMAGE}"
          docker pull "${FULL_IMAGE}"

          echo "üåê Criando rede Docker se n√£o existir..."
          docker network create conexao-network 2>/dev/null || true

          echo "üöÄ Iniciando deploy para: ${DEPLOY_TYPE}"
          if [[ "${DEPLOY_TYPE}" == "prod" ]]; then
            echo "üè≠ Configurando ambiente de PRODU√á√ÉO..."

            # Configura√ß√µes espec√≠ficas de produ√ß√£o
            CONTAINER_NAME="backend-prod"
            SERVER_PORT="8080"
            # Traefik removido - acesso direto via porta

            echo "üöÄ Iniciando container de produ√ß√£o..."
            docker run -d \
              --name "${CONTAINER_NAME}" \
              --network conexao-network \
              --restart unless-stopped \
              -p "${SERVER_PORT}:${SERVER_PORT}" \
              --health-cmd="curl -f http://localhost:${SERVER_PORT}/actuator/health || exit 1" \
              --health-interval=60s \
              --health-timeout=30s \
              --health-retries=3 \
              --health-start-period=120s \
              -e SPRING_PROFILES_ACTIVE=prod,azure \
              -e ENVIRONMENT=production \
              -e SERVER_PORT="${SERVER_PORT}" \
              -e AZURE_KEYVAULT_ENABLED=true \
              -e AZURE_KEYVAULT_ENDPOINT='${{ secrets.AZURE_KEYVAULT_ENDPOINT }}' \
              -e AZURE_CLIENT_ID='${{ secrets.AZURE_CLIENT_ID }}' \
              -e AZURE_CLIENT_SECRET='${{ secrets.AZURE_CLIENT_SECRET }}' \
              -e AZURE_TENANT_ID='${{ secrets.AZURE_TENANT_ID }}' \
              -e AZURE_KEYVAULT_FALLBACK_ENABLED=false \
              -e SPRING_DATASOURCE_URL='jdbc:mysql://conexao-mysql:3306/conexao_de_sorte?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=America/Sao_Paulo' \
              -e SPRING_DATASOURCE_USERNAME='${{ secrets.CONEXAO_DE_SORTE_DATABASE_USERNAME }}' \
              -e SPRING_DATASOURCE_PASSWORD='${{ secrets.CONEXAO_DE_SORTE_DATABASE_PASSWORD }}' \
              -e APP_ENCRYPTION_MASTER_PASSWORD='${{ secrets.APP_ENCRYPTION_MASTER_PASSWORD }}' \
              -e JWT_ISSUER='https://www.conexaodesorte.com.br' \
              -e JWT_AUDIENCE='conexao-de-sorte' \
              -e JWT_ALGORITHM='RS256' \
              -e TZ=America/Sao_Paulo \
              "${FULL_IMAGE}"
          else
            echo "üß™ Configurando ambiente de TESTE..."

            # Configura√ß√µes espec√≠ficas de teste
            CONTAINER_NAME="backend-teste"
            SERVER_PORT="8081"
            # Traefik removido - acesso direto via porta

            echo "üöÄ Iniciando container de teste..."
            docker run -d \
              --name "${CONTAINER_NAME}" \
              --network conexao-network \
              --restart unless-stopped \
              -p "${SERVER_PORT}:${SERVER_PORT}" \
              --health-cmd="curl -f http://localhost:${SERVER_PORT}/actuator/health || exit 1" \
              --health-interval=60s \
              --health-timeout=30s \
              --health-retries=3 \
              --health-start-period=120s \
              -e SPRING_PROFILES_ACTIVE=prod,azure \
              -e ENVIRONMENT=staging \
              -e SERVER_PORT="${SERVER_PORT}" \
              -e AZURE_KEYVAULT_ENABLED=true \
              -e AZURE_KEYVAULT_ENDPOINT='${{ secrets.AZURE_KEYVAULT_ENDPOINT }}' \
              -e AZURE_CLIENT_ID='${{ secrets.AZURE_CLIENT_ID }}' \
              -e AZURE_CLIENT_SECRET='${{ secrets.AZURE_CLIENT_SECRET }}' \
              -e AZURE_TENANT_ID='${{ secrets.AZURE_TENANT_ID }}' \
              -e AZURE_KEYVAULT_FALLBACK_ENABLED=false \
              -e SPRING_DATASOURCE_URL='jdbc:mysql://conexao-mysql:3306/conexao_de_sorte?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=America/Sao_Paulo' \
              -e SPRING_DATASOURCE_USERNAME='${{ secrets.CONEXAO_DE_SORTE_DATABASE_USERNAME }}' \
              -e SPRING_DATASOURCE_PASSWORD='${{ secrets.CONEXAO_DE_SORTE_DATABASE_PASSWORD }}' \
              -e APP_ENCRYPTION_MASTER_PASSWORD='${{ secrets.APP_ENCRYPTION_MASTER_PASSWORD }}' \
              -e JWT_ISSUER='https://www.conexaodesorte.com.br' \
              -e JWT_AUDIENCE='conexao-de-sorte' \
              -e JWT_ALGORITHM='RS256' \
              -e TZ=America/Sao_Paulo \
              "${FULL_IMAGE}"
          fi

          echo "‚úÖ Deploy conclu√≠do com sucesso!"
          echo "üì¶ Container: \$(docker ps --filter name=backend-${DEPLOY_TYPE} --format 'table {{.Names}}\t{{.Status}}\t{{.Ports}}')"
          REMOTE_SCRIPT

      - name: "üè• Health check"
        run: |
          set -euo pipefail
          echo "üè• Iniciando verifica√ß√£o de sa√∫de..."

          DEPLOY_TYPE="${{ env.DEPLOY_TYPE }}"

          # Determinar URL baseada no tipo de deploy
          if [[ "${DEPLOY_TYPE}" == "prod" ]]; then
            HEALTH_URL="http://localhost:8080/rest/actuator/health"
            CONTAINER_NAME="backend-prod"
          else
            HEALTH_URL="http://localhost:8081/rest/actuator/health"
            CONTAINER_NAME="backend-teste"
          fi

          echo "üîç Verificando sa√∫de do container..."
          echo "   - URL: ${HEALTH_URL}"
          echo "   - Container: ${CONTAINER_NAME}"

          # Aguardar container ficar saud√°vel (m√°ximo 5 minutos)
          echo "‚è≥ Aguardando container ficar saud√°vel..."
          for i in $(seq 1 10); do
            echo "   Tentativa ${i}/10..."

            # Verificar se o endpoint responde
            if curl -fsS --connect-timeout 10 --max-time 30 "${HEALTH_URL}" >/dev/null 2>&1; then
              echo "‚úÖ Health check passou! Aplica√ß√£o est√° saud√°vel."

              # Verificar status do container via SSH
              ssh -i ~/.ssh/id_ed25519 -p ${{ secrets.VPS_SSH_PORT }} -o StrictHostKeyChecking=no ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }} "
                echo 'üìä Status final do container:'
                docker ps --filter name=${CONTAINER_NAME} --format 'table {{.Names}}\t{{.Status}}\t{{.Ports}}\t{{.RunningFor}}'
                echo 'üè• Health status:'
                docker inspect ${CONTAINER_NAME} --format='{{.State.Health.Status}}' 2>/dev/null || echo 'Health check n√£o configurado'
              "

              # Verificar sa√∫de do Azure Key Vault
              echo "üîê Verificando sa√∫de do Azure Key Vault..."
              chmod +x .github/workflows/scripts/check-azure-keyvault-health.sh
              if .github/workflows/scripts/check-azure-keyvault-health.sh "${CONTAINER_NAME}"; then
                echo "‚úÖ Azure Key Vault funcionando corretamente"
              else
                echo "‚ö†Ô∏è Problemas encontrados no Azure Key Vault - verificar logs acima"
                echo "::warning title=Azure Key Vault Issues::Problemas de permiss√µes detectados"
              fi

              exit 0
            fi

            echo "   ‚è≥ Aguardando 10 segundos antes da pr√≥xima tentativa..."
            sleep 10
          done

          echo "‚ùå Health check falhou ap√≥s 10 tentativas (5 minutos)"
          echo "üîç Verificando logs do container..."
          ssh -i ~/.ssh/id_ed25519 -p ${{ secrets.VPS_SSH_PORT }} -o StrictHostKeyChecking=no ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }} "
            echo 'üìã Status do container:'
            docker ps -a --filter name=${CONTAINER_NAME} --format 'table {{.Names}}\t{{.Status}}\t{{.Ports}}'
            echo 'üìù √öltimas 500 linhas do log:'
            docker logs --tail 500 ${CONTAINER_NAME} 2>&1 || echo 'N√£o foi poss√≠vel obter logs'
          "
          exit 1

      - name: "‚úÖ Deploy finalizado"
        run: |
          echo "üéâ Deploy realizado com sucesso!"
          echo "   - Tipo: ${{ env.DEPLOY_TYPE }}"
          echo "   - Imagem: ${{ env.FULL_IMAGE }}"
          echo "   - Tag: ${{ env.IMAGE_TAG }}"
          echo "   - Timestamp: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"

  notify-failure:
    name: "üö® Notificar Falha"
    runs-on: ubuntu-latest
    needs: [build-and-push, deploy]
    if: failure()
    steps:
      - name: "üì¢ Notifica√ß√£o de falha"
        run: |
          echo "‚ùå FALHA NO DEPLOY"
          echo "   - Reposit√≥rio: ${{ github.repository }}"
          echo "   - Branch: ${{ github.ref_name }}"
          echo "   - Commit: ${{ github.sha }}"
          echo "   - Workflow: ${{ github.workflow }}"
          echo "   - Run ID: ${{ github.run_id }}"
          echo "   - URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          echo ""
          echo "üîç Verifique os logs acima para identificar o problema."
