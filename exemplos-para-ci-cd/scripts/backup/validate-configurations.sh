#!/bin/bash

# =============================================================================
# SCRIPT DE VALIDA√á√ÉO DE CONFIGURA√á√ïES - CONEX√ÉO DE SORTE
# =============================================================================
# Valida se as configura√ß√µes de desenvolvimento e produ√ß√£o est√£o corretas
# ap√≥s a refatora√ß√£o realizada

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para log colorido
log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# Fun√ß√£o para verificar se um arquivo existe
check_file() {
    if [[ -f "$1" ]]; then
        log_success "Arquivo encontrado: $1"
        return 0
    else
        log_error "Arquivo n√£o encontrado: $1"
        return 1
    fi
}

# Fun√ß√£o para verificar se uma string est√° presente em um arquivo
check_string_in_file() {
    local file="$1"
    local string="$2"
    local description="$3"
    
    if grep -q "$string" "$file" 2>/dev/null; then
        log_success "$description encontrado em $file"
        return 0
    else
        log_error "$description N√ÉO encontrado em $file"
        return 1
    fi
}

# Fun√ß√£o para verificar se uma string N√ÉO est√° presente em um arquivo
check_string_not_in_file() {
    local file="$1"
    local string="$2"
    local description="$3"
    
    if ! grep -q "$string" "$file" 2>/dev/null; then
        log_success "$description N√ÉO encontrado em $file (correto)"
        return 0
    else
        log_error "$description encontrado em $file (INCORRETO)"
        return 1
    fi
}

# Fun√ß√£o para verificar configura√ß√µes de desenvolvimento
validate_dev_config() {
    log_info "Validando configura√ß√µes de desenvolvimento..."
    
    local errors=0
    
    # Verificar arquivos de desenvolvimento
    check_file "src/main/resources/application-dev.yml" || ((errors++))
    check_file "src/main/resources/application-local-fallback.yml" || ((errors++))
    
    # Verificar configura√ß√µes permissivas em desenvolvimento
    check_string_in_file "src/main/resources/application-dev.yml" "localhost:3000" "CORS localhost em dev" || ((errors++))
    check_string_in_file "src/main/resources/application-dev.yml" "AZURE_KEYVAULT_ENABLED=false" "Azure desabilitado em dev" || ((errors++))
    check_string_in_file "src/main/resources/application-dev.yml" "modo-seguranca-estrito: false" "Modo seguran√ßa relaxado em dev" || ((errors++))
    
    # Verificar que URLs de produ√ß√£o N√ÉO est√£o em dev
    check_string_not_in_file "src/main/resources/application-dev.yml" "conexaodesorte.com.br" "URLs de produ√ß√£o em dev" || ((errors++))
    
    # Verificar Docker Compose de desenvolvimento
    check_file "docker-compose.dev.yml" || ((errors++))
    check_string_in_file "docker-compose.dev.yml" "SPRING_PROFILES_ACTIVE=dev" "Perfil dev no Docker Compose" || ((errors++))
    check_string_in_file "docker-compose.dev.yml" "AZURE_KEYVAULT_ENABLED=false" "Azure desabilitado no Docker Compose dev" || ((errors++))
    
    return $errors
}

# Fun√ß√£o para verificar configura√ß√µes de produ√ß√£o
validate_prod_config() {
    log_info "Validando configura√ß√µes de produ√ß√£o..."
    
    local errors=0
    
    # Verificar arquivos de produ√ß√£o
    check_file "src/main/resources/application-production.yml" || ((errors++))
    check_file "deploy/docker-compose.prod.yml" || ((errors++))
    
    # Verificar configura√ß√µes restritivas em produ√ß√£o
    check_string_in_file "src/main/resources/application-production.yml" "conexaodesorte.com.br" "CORS produ√ß√£o em prod" || ((errors++))
    check_string_in_file "src/main/resources/application-production.yml" "AZURE_KEYVAULT_ENABLED=true" "Azure habilitado em prod" || ((errors++))
    check_string_in_file "src/main/resources/application-production.yml" "modo-seguranca-estrito: true" "Modo seguran√ßa estrito em prod" || ((errors++))
    check_string_in_file "src/main/resources/application-production.yml" "auditoria.enabled: true" "Auditoria habilitada em prod" || ((errors++))
    
    # Verificar que URLs de desenvolvimento N√ÉO est√£o em produ√ß√£o
    check_string_not_in_file "src/main/resources/application-production.yml" "localhost:3000" "URLs de desenvolvimento em prod" || ((errors++))
    
    # Verificar Docker Compose de produ√ß√£o
    check_string_in_file "deploy/docker-compose.prod.yml" "SPRING_PROFILES_ACTIVE=production,azure" "Perfil prod+azure no Docker Compose" || ((errors++))
    check_string_in_file "deploy/docker-compose.prod.yml" "AZURE_KEYVAULT_ENABLED=true" "Azure habilitado no Docker Compose prod" || ((errors++))
    check_string_in_file "deploy/docker-compose.prod.yml" "AZURE_KEYVAULT_FALLBACK_ENABLED=true" "Fallback habilitado no Docker Compose prod" || ((errors++))
    
    return $errors
}

# Fun√ß√£o para verificar configura√ß√µes Azure
validate_azure_config() {
    log_info "Validando configura√ß√µes Azure..."
    
    local errors=0
    
    # Verificar arquivos Azure
    check_file "src/main/resources/application-azure.yml" || ((errors++))
    
    # Verificar configura√ß√µes Azure
    check_string_in_file "src/main/resources/application-azure.yml" "fallback.enabled: true" "Fallback Azure habilitado" || ((errors++))
    check_string_in_file "src/main/resources/application-azure.yml" "use-default-credential: true" "DefaultAzureCredential configurado" || ((errors++))
    
    # Verificar fallback local
    check_file "src/main/resources/application-local-fallback.yml" || ((errors++))
    check_string_in_file "src/main/resources/application-local-fallback.yml" "AZURE_KEYVAULT_ENABLED=false" "Azure desabilitado no fallback" || ((errors++))
    
    return $errors
}

# Fun√ß√£o para verificar configura√ß√µes principais
validate_main_config() {
    log_info "Validando configura√ß√£o principal..."
    
    local errors=0
    
    # Verificar arquivo principal
    check_file "src/main/resources/application.yml" || ((errors++))
    
    # Verificar que configura√ß√µes de produ√ß√£o N√ÉO est√£o no arquivo principal
    check_string_not_in_file "src/main/resources/application.yml" "conexaodesorte.com.br" "URLs de produ√ß√£o no arquivo principal" || ((errors++))
    check_string_not_in_file "src/main/resources/application.yml" "auditoria.enabled: true" "Auditoria habilitada no arquivo principal" || ((errors++))
    check_string_not_in_file "src/main/resources/application.yml" "gdpr.compliance.enabled: true" "GDPR habilitado no arquivo principal" || ((errors++))
    
    # Verificar configura√ß√µes padr√£o seguras
    check_string_in_file "src/main/resources/application.yml" "AZURE_KEYVAULT_ENABLED:false" "Azure desabilitado por padr√£o" || ((errors++))
    check_string_in_file "src/main/resources/application.yml" "AUDITORIA_ENABLED:false" "Auditoria desabilitada por padr√£o" || ((errors++))
    check_string_in_file "src/main/resources/application.yml" "GDPR_COMPLIANCE_ENABLED:false" "GDPR desabilitado por padr√£o" || ((errors++))
    
    return $errors
}

# Fun√ß√£o para verificar estrutura de arquivos
validate_file_structure() {
    log_info "Validando estrutura de arquivos..."
    
    local errors=0
    
    # Verificar arquivos essenciais
    local essential_files=(
        "src/main/resources/application.yml"
        "src/main/resources/application-common.yml"
        "src/main/resources/application-dev.yml"
        "src/main/resources/application-production.yml"
        "src/main/resources/application-azure.yml"
        "src/main/resources/application-local-fallback.yml"
        "src/main/resources/application-os-specific.yml"
        "docker-compose.dev.yml"
        "deploy/docker-compose.prod.yml"
    )
    
    for file in "${essential_files[@]}"; do
        check_file "$file" || ((errors++))
    done
    
    return $errors
}

# Fun√ß√£o principal
main() {
    log_info "üîß Iniciando valida√ß√£o de configura√ß√µes..."
    log_info "üìã Verificando se a refatora√ß√£o foi aplicada corretamente"
    echo
    
    local total_errors=0
    
    # Validar estrutura de arquivos
    validate_file_structure
    total_errors=$((total_errors + $?))
    echo
    
    # Validar configura√ß√£o principal
    validate_main_config
    total_errors=$((total_errors + $?))
    echo
    
    # Validar configura√ß√µes de desenvolvimento
    validate_dev_config
    total_errors=$((total_errors + $?))
    echo
    
    # Validar configura√ß√µes de produ√ß√£o
    validate_prod_config
    total_errors=$((total_errors + $?))
    echo
    
    # Validar configura√ß√µes Azure
    validate_azure_config
    total_errors=$((total_errors + $?))
    echo
    
    # Resultado final
    if [[ $total_errors -eq 0 ]]; then
        log_success "üéâ Todas as valida√ß√µes passaram com sucesso!"
        log_success "‚úÖ A refatora√ß√£o foi aplicada corretamente"
        log_success "‚úÖ Configura√ß√µes de desenvolvimento e produ√ß√£o est√£o separadas"
        log_success "‚úÖ Azure Key Vault configurado com fallback"
        echo
        log_info "üìù Pr√≥ximos passos:"
        log_info "   1. Testar em ambiente de desenvolvimento"
        log_info "   2. Validar em ambiente de produ√ß√£o"
        log_info "   3. Monitorar logs de fallback"
        exit 0
    else
        log_error "‚ùå Encontrados $total_errors erro(s) na valida√ß√£o"
        log_error "üîß Corrija os problemas antes de prosseguir"
        exit 1
    fi
}

# Executar fun√ß√£o principal
main "$@" 