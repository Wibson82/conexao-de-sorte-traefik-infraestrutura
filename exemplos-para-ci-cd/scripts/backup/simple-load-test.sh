#!/bin/bash

# =============================================================================
# TESTE DE CARGA SIMPLIFICADO PARA VERIFICA√á√ÉO LOCAL
# =============================================================================

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}üöÄ TESTE DE CARGA SIMPLIFICADO - CONEX√ÉO DE SORTE${NC}"
echo -e "${BLUE}================================================${NC}"

# Configura√ß√µes
BASE_URL="http://localhost:8080"
if [ ! -z "$1" ]; then
    BASE_URL="$1"
fi

echo -e "${YELLOW}üéØ Testando URL: $BASE_URL${NC}"

# Teste 1: Health Check
echo -e "\n${YELLOW}üìä Teste 1: Health Check${NC}"
for i in {1..10}; do
    response=$(curl -s -w "%{http_code}" -o /dev/null "$BASE_URL/actuator/health" || echo "000")
    if [ "$response" = "200" ]; then
        echo -e "${GREEN}‚úÖ Request $i: OK${NC}"
    else
        echo -e "${RED}‚ùå Request $i: HTTP $response${NC}"
    fi
    sleep 0.1
done

# Teste 2: Info Endpoint
echo -e "\n${YELLOW}üìä Teste 2: Info Endpoint${NC}"
for i in {1..5}; do
    response=$(curl -s -w "%{http_code}" -o /dev/null "$BASE_URL/actuator/info" || echo "000")
    if [ "$response" = "200" ]; then
        echo -e "${GREEN}‚úÖ Info Request $i: OK${NC}"
    else
        echo -e "${RED}‚ùå Info Request $i: HTTP $response${NC}"
    fi
    sleep 0.2
done

# Teste 3: Metrics Endpoint
echo -e "\n${YELLOW}üìä Teste 3: Metrics Endpoint${NC}"
response=$(curl -s -w "%{http_code}" -o /dev/null "$BASE_URL/actuator/metrics" || echo "000")
if [ "$response" = "200" ]; then
    echo -e "${GREEN}‚úÖ Metrics: OK${NC}"
else
    echo -e "${RED}‚ùå Metrics: HTTP $response${NC}"
fi

# Teste 4: Prometheus Endpoint
echo -e "\n${YELLOW}üìä Teste 4: Prometheus Endpoint${NC}"
response=$(curl -s -w "%{http_code}" -o /dev/null "$BASE_URL/actuator/prometheus" || echo "000")
if [ "$response" = "200" ]; then
    echo -e "${GREEN}‚úÖ Prometheus: OK${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è Prometheus: HTTP $response (pode n√£o estar habilitado)${NC}"
fi

# Teste 5: Concurrent Requests
echo -e "\n${YELLOW}üìä Teste 5: Requisi√ß√µes Concorrentes (20 requests)${NC}"
success_count=0
for i in {1..20}; do
    (
        response=$(curl -s -w "%{http_code}" -o /dev/null "$BASE_URL/actuator/health" || echo "000")
        if [ "$response" = "200" ]; then
            echo -e "${GREEN}‚úÖ Concurrent $i: OK${NC}"
        else
            echo -e "${RED}‚ùå Concurrent $i: HTTP $response${NC}"
        fi
    ) &
done

# Aguardar todas as requisi√ß√µes concorrentes
wait

echo -e "\n${BLUE}üìã RELAT√ìRIO FINAL${NC}"
echo -e "${BLUE}==================${NC}"
echo -e "${GREEN}‚úÖ Testes b√°sicos de carga conclu√≠dos${NC}"
echo -e "${YELLOW}üìä URL testada: $BASE_URL${NC}"
echo -e "${YELLOW}üîç Verifique os logs da aplica√ß√£o para detalhes${NC}"

echo -e "\n${GREEN}üéØ PR√ìXIMOS PASSOS:${NC}"
echo "1. Verificar logs da aplica√ß√£o"
echo "2. Monitorar m√©tricas no /actuator/metrics"
echo "3. Executar testes mais robustos em produ√ß√£o"

echo -e "\n${GREEN}‚úÖ Teste de carga simplificado conclu√≠do!${NC}"
