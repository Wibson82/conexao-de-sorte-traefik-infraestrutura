#!/bin/bash
# üîç Teste Espec√≠fico de Roteamento de Dom√≠nios - Traefik
# ‚úÖ Verifica especificamente se conexaodesorte.com.br e www.conexaodesorte.com.br
#    est√£o roteando corretamente para frontend (porta 3000) e backend (porta 8080)

set -euo pipefail

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Fun√ß√µes de log
log_header() { echo -e "\n${PURPLE}=== $1 ===${NC}"; }
log_step() { echo -e "${BLUE}üîß $1${NC}"; }
log_info() { echo -e "${CYAN}‚ÑπÔ∏è  $1${NC}"; }
log_success() { echo -e "${GREEN}‚úÖ $1${NC}"; }
log_warning() { echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"; }
log_error() { echo -e "${RED}‚ùå $1${NC}"; }

# Configura√ß√µes espec√≠ficas para teste de roteamento
DOMAINS=("conexaodesorte.com.br" "www.conexaodesorte.com.br")
FRONTEND_TEST_PATHS=("/" "/favicon.ico" "/static/js/main.js")
BACKEND_TEST_PATHS=("/rest/actuator/health" "/rest/v1/info" "/rest/v1/publico/teste")
TRAEFIK_API_PORT="8080"

# Fun√ß√£o para testar redirecionamento HTTP‚ÜíHTTPS
test_http_redirect() {
    local domain="$1"
    local timeout=10

    log_step "Testando redirecionamento HTTP‚ÜíHTTPS: $domain"

    # Fazer request HTTP e capturar redirecionamento
    response=$(curl -s -w "%{http_code}|%{redirect_url}|%{time_total}" \
        --max-time $timeout \
        --connect-timeout 5 \
        "http://$domain" 2>/dev/null || echo "000|||")

    # Parse response
    http_code=$(echo "$response" | cut -d'|' -f1)
    redirect_url=$(echo "$response" | cut -d'|' -f2)
    time_total=$(echo "$response" | cut -d'|' -f3)

    if [[ "$redirect_url" == *"https://"* ]]; then
        log_success "‚úÖ Redirecionamento HTTP‚ÜíHTTPS funcionando: http://$domain ‚Üí $redirect_url (${time_total}s)"
        return 0
    elif [[ "$http_code" == "301" || "$http_code" == "302" ]]; then
        log_success "‚úÖ Redirecionamento $http_code detectado: $redirect_url"
        return 0
    else
        log_error "‚ùå Redirecionamento HTTP‚ÜíHTTPS falhou: HTTP $http_code"
        return 1
    fi
}

# Fun√ß√£o para testar roteamento frontend
test_frontend_routing() {
    local domain="$1"
    local path="$2"
    local timeout=10

    log_step "Testando frontend ($domain$path)"

    # Fazer request HTTPS para frontend
    response=$(curl -s -w "%{http_code}|%{content_type}|%{time_total}" \
        --max-time $timeout \
        --connect-timeout 5 \
        --insecure \
        "https://$domain$path" 2>/dev/null || echo "000|||")

    http_code=$(echo "$response" | cut -d'|' -f1)
    content_type=$(echo "$response" | cut -d'|' -f2)
    time_total=$(echo "$response" | cut -d'|' -f3)

    case $http_code in
        200)
            # Verificar se √© conte√∫do frontend (HTML/JS/CSS)
            if [[ "$content_type" == *"text/html"* ]] || [[ "$content_type" == *"application/javascript"* ]] || [[ "$content_type" == *"text/css"* ]]; then
                log_success "‚úÖ Frontend roteando corretamente: $domain$path (${time_total}s)"
                return 0
            else
                log_warning "‚ö†Ô∏è  Frontend responde mas content-type inesperado: $content_type"
                return 1
            fi
            ;;
        404)
            if [[ "$path" == "/favicon.ico" ]]; then
                log_info "‚ÑπÔ∏è  Favicon n√£o encontrado (normal para desenvolvimento)"
                return 0
            else
                log_error "‚ùå Frontend n√£o encontrado: $domain$path"
                return 1
            fi
            ;;
        502|503|504)
            log_error "‚ùå Frontend indispon√≠vel: HTTP $http_code"
            return 1
            ;;
        000)
            log_error "‚ùå Timeout/Erro de conex√£o para frontend"
            return 1
            ;;
        *)
            log_warning "‚ö†Ô∏è  Frontend retornou HTTP $http_code (inesperado)"
            return 1
            ;;
    esac
}

# Fun√ß√£o para testar roteamento backend
test_backend_routing() {
    local domain="$1"
    local path="$2"
    local timeout=10

    log_step "Testando backend ($domain$path)"

    # Fazer request HTTPS para backend
    response=$(curl -s -w "%{http_code}|%{content_type}|%{time_total}" \
        --max-time $timeout \
        --connect-timeout 5 \
        --insecure \
        "https://$domain$path" 2>/dev/null || echo "000|||")

    http_code=$(echo "$response" | cut -d'|' -f1)
    content_type=$(echo "$response" | cut -d'|' -f2)
    time_total=$(echo "$response" | cut -d'|' -f3)

    case $http_code in
        200)
            # Verificar se √© JSON (backend API)
            if [[ "$content_type" == *"application/json"* ]]; then
                log_success "‚úÖ Backend roteando corretamente: $domain$path (${time_total}s)"
                return 0
            else
                log_warning "‚ö†Ô∏è  Backend responde mas content-type inesperado: $content_type"
                return 1
            fi
            ;;
        404)
            log_warning "‚ö†Ô∏è  Endpoint backend n√£o encontrado: $domain$path (pode ser normal)"
            return 0
            ;;
        502|503|504)
            log_error "‚ùå Backend indispon√≠vel: HTTP $http_code"
            return 1
            ;;
        000)
            log_error "‚ùå Timeout/Erro de conex√£o para backend"
            return 1
            ;;
        *)
            log_warning "‚ö†Ô∏è  Backend retornou HTTP $http_code (inesperado)"
            return 1
            ;;
    esac
}

# Fun√ß√£o para verificar containers Docker espec√≠ficos
check_docker_containers() {
    log_header "VERIFICA√á√ÉO DE CONTAINERS DOCKER"

    local containers=("traefik" "backend" "frontend")
    local all_running=true

    for container in "${containers[@]}"; do
        if docker ps --format "table {{.Names}}\t{{.Status}}" | grep -q "$container.*Up"; then
            log_success "‚úÖ Container $container est√° rodando"
        else
            log_error "‚ùå Container $container n√£o est√° rodando"
            all_running=false
        fi
    done

    if [[ "$all_running" == "false" ]]; then
        log_error "‚ùå Nem todos os containers est√£o rodando. Abortando teste de roteamento."
        return 1
    fi

    return 0
}

# Fun√ß√£o para verificar configura√ß√£o espec√≠fica do Traefik
check_traefik_routing_config() {
    log_header "VERIFICA√á√ÉO DA CONFIGURA√á√ÉO DO TRAEFIK"

    # Verificar se Traefik API est√° respondendo
    if curl -s -f "http://localhost:$TRAEFIK_API_PORT/ping" >/dev/null 2>&1; then
        log_success "‚úÖ Traefik API est√° respondendo na porta $TRAEFIK_API_PORT"
    else
        log_error "‚ùå Traefik API n√£o est√° respondendo na porta $TRAEFIK_API_PORT"
        return 1
    fi

    # Verificar rotas espec√≠ficas configuradas
    log_step "Rotas configuradas no Traefik:"
    local routes=$(curl -s "http://localhost:$TRAEFIK_API_PORT/api/http/routers" 2>/dev/null || echo "[]")

    if echo "$routes" | jq -r '.[] | "  - \(.name): \(.rule)"' 2>/dev/null; then
        log_success "‚úÖ Rotas do Traefik obtidas com sucesso"
    else
        log_warning "‚ö†Ô∏è  N√£o foi poss√≠vel obter rotas do Traefik ou n√£o h√° rotas configuradas"
    fi

    # Verificar servi√ßos espec√≠ficos
    log_step "Servi√ßos configurados no Traefik:"
    local services=$(curl -s "http://localhost:$TRAEFIK_API_PORT/api/http/services" 2>/dev/null || echo "[]")

    if echo "$services" | jq -r '.[] | "  - \(.name): \(.loadBalancer.servers[0].url // "N/A")"' 2>/dev/null; then
        log_success "‚úÖ Servi√ßos do Traefik obtidos com sucesso"
    else
        log_warning "‚ö†Ô∏è  N√£o foi poss√≠vel obter servi√ßos do Traefik"
    fi
}

# Fun√ß√£o para testar roteamento espec√≠fico por dom√≠nio
test_domain_routing() {
    local domain="$1"
    local frontend_success=0
    local backend_success=0
    local total_frontend_tests=0
    local total_backend_tests=0

    log_header "TESTE DE ROTEAMENTO PARA $domain"

    # Testar redirecionamento HTTP‚ÜíHTTPS
    if test_http_redirect "$domain"; then
        log_success "‚úÖ Redirecionamento HTTP‚ÜíHTTPS OK para $domain"
    else
        log_error "‚ùå Redirecionamento HTTP‚ÜíHTTPS falhou para $domain"
    fi

    # Testar roteamento frontend
    log_step "Testando roteamento frontend..."
    for path in "${FRONTEND_TEST_PATHS[@]}"; do
        ((total_frontend_tests++))
        if test_frontend_routing "$domain" "$path"; then
            ((frontend_success++))
        fi
    done

    # Testar roteamento backend
    log_step "Testando roteamento backend..."
    for path in "${BACKEND_TEST_PATHS[@]}"; do
        ((total_backend_tests++))
        if test_backend_routing "$domain" "$path"; then
            ((backend_success++))
        fi
    done

    # Resumo do dom√≠nio
    log_header "RESUMO PARA $domain"
    echo -e "${BLUE}Frontend:${NC} $frontend_success/$total_frontend_tests testes passaram"
    echo -e "${BLUE}Backend:${NC} $backend_success/$total_backend_tests testes passaram"

    if [[ $frontend_success -eq $total_frontend_tests && $backend_success -eq $total_backend_tests ]]; then
        log_success "‚úÖ Roteamento completo funcionando para $domain"
        return 0
    else
        log_warning "‚ö†Ô∏è  Roteamento parcial para $domain"
        return 1
    fi
}

# Fun√ß√£o principal
main() {
    log_header "TESTE ESPEC√çFICO DE ROTEAMENTO DE DOM√çNIOS"
    echo -e "${CYAN}üéØ Objetivo: Verificar se Traefik est√° roteando corretamente${NC}"
    echo -e "${CYAN}   Frontend (React) ‚Üí conexaodesorte.com.br:3000${NC}"
    echo -e "${CYAN}   Backend (API) ‚Üí conexaodesorte.com.br:8080/rest${NC}\n"

    # Verificar containers
    if ! check_docker_containers; then
        exit 1
    fi

    # Verificar configura√ß√£o do Traefik
    if ! check_traefik_routing_config; then
        log_error "‚ùå Configura√ß√£o do Traefik com problemas"
        exit 1
    fi

    # Testar roteamento para cada dom√≠nio
    local overall_success=true
    for domain in "${DOMAINS[@]}"; do
        if ! test_domain_routing "$domain"; then
            overall_success=false
        fi
    done

    # Resumo final
    log_header "RESUMO FINAL"
    if [[ "$overall_success" == "true" ]]; then
        log_success "üéâ Todos os dom√≠nios est√£o roteando corretamente!"
        echo -e "${GREEN}‚úÖ Frontend e Backend acess√≠veis via HTTPS${NC}"
        echo -e "${GREEN}‚úÖ Redirecionamento HTTP‚ÜíHTTPS funcionando${NC}"
        echo -e "${GREEN}‚úÖ Traefik configurado corretamente${NC}"
        exit 0
    else
        log_error "‚ùå Alguns problemas de roteamento detectados"
        echo -e "${YELLOW}üí° Verificar:${NC}"
        echo -e "  ‚Ä¢ Configura√ß√£o do Traefik no docker-compose.prod.yml"
        echo -e "  ‚Ä¢ Labels dos containers (traefik.enable, traefik.http.routers)"
        echo -e "  ‚Ä¢ Redes Docker (conexao-network)"
        echo -e "  ‚Ä¢ Portas dos servi√ßos (3000 frontend, 8080 backend)"
        exit 1
    fi
}

# Executar fun√ß√£o principal
main "$@"
