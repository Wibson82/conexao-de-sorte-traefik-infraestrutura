#!/bin/bash

# üéØ TESTE ESPEC√çFICO DO ENDPOINT CR√çTICO
# ‚úÖ Testa especificamente: https://www.conexaodesorte.com.br/rest/v1/resultados/publico/ultimo/rio

set -euo pipefail

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Configura√ß√µes
ENDPOINT_URL="https://www.conexaodesorte.com.br/rest/v1/resultados/publico/ultimo/rio"
TIMEOUT=15

# Fun√ß√µes de log
log_header() { echo -e "\n${PURPLE}=== $1 ===${NC}"; }
log_step() { echo -e "${BLUE}üîß $1${NC}"; }
log_info() { echo -e "${CYAN}‚ÑπÔ∏è  $1${NC}"; }
log_success() { echo -e "${GREEN}‚úÖ $1${NC}"; }
log_warn() { echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"; }
log_error() { echo -e "${RED}‚ùå $1${NC}"; }

# Fun√ß√£o principal de teste
test_endpoint() {
    log_header "TESTE ESPEC√çFICO DO ENDPOINT CR√çTICO"
    
    echo -e "${YELLOW}üéØ Testando endpoint que deve funcionar:${NC}"
    echo -e "${BLUE}URL: $ENDPOINT_URL${NC}\n"
    
    # Teste detalhado
    log_step "Executando requisi√ß√£o..."
    
    # Capturar resposta completa
    local temp_file="/tmp/endpoint_response_$(date +%s).txt"
    local response=$(curl -s -w "%{http_code}|%{content_type}|%{time_total}|%{size_download}" \
                          -H "Accept: application/json" \
                          -H "User-Agent: ConexaoDeSorte-Test/1.0" \
                          -o "$temp_file" \
                          "$ENDPOINT_URL" \
                          --connect-timeout "$TIMEOUT" \
                          --max-time "$TIMEOUT" \
                          -k \
                          2>/dev/null || echo "000|||0")
    
    IFS='|' read -r http_code content_type time_total size_download <<< "$response"
    local content=$(cat "$temp_file" 2>/dev/null || echo "")
    
    # An√°lise da resposta
    log_info "HTTP Code: $http_code"
    log_info "Content-Type: $content_type"
    log_info "Tempo: ${time_total}s"
    log_info "Tamanho: ${size_download} bytes"
    
    echo ""
    
    case "$http_code" in
        "200")
            log_success "HTTP 200 - Endpoint funcionando!"
            
            # Verificar se √© JSON
            if echo "$content" | jq . >/dev/null 2>&1; then
                log_success "Resposta √© JSON v√°lido"
                
                # Extrair dados espec√≠ficos
                local horario=$(echo "$content" | jq -r '.horario // "N/A"' 2>/dev/null)
                local data=$(echo "$content" | jq -r '.data // "N/A"' 2>/dev/null)
                local numeros=$(echo "$content" | jq -r '.numeros // [] | length' 2>/dev/null)
                
                log_info "Dados retornados:"
                log_info "  Hor√°rio: $horario"
                log_info "  Data: $data"
                log_info "  N√∫meros: $numeros"
                
                if [[ "$numeros" != "0" && "$numeros" != "null" ]]; then
                    log_success "Endpoint retorna dados v√°lidos!"
                    echo -e "\n${GREEN}üéâ SUCESSO: Endpoint funcionando perfeitamente!${NC}"
                    return 0
                else
                    log_warn "Endpoint funciona mas n√£o h√° dados dispon√≠veis"
                    echo -e "\n${YELLOW}‚ö†Ô∏è PARCIAL: Endpoint funciona mas sem dados${NC}"
                    return 1
                fi
            else
                log_error "Resposta n√£o √© JSON v√°lido"
                log_info "Conte√∫do (primeiros 200 chars): $(echo "$content" | head -c 200)..."
                
                if echo "$content" | grep -q -i "html\|<!DOCTYPE"; then
                    log_error "Resposta √© HTML - poss√≠vel p√°gina de erro"
                fi
                
                echo -e "\n${RED}‚ùå FALHA: Endpoint retorna conte√∫do inv√°lido${NC}"
                return 1
            fi
            ;;
            
        "404")
            log_error "HTTP 404 - Endpoint n√£o encontrado"
            log_info "Poss√≠veis causas:"
            log_info "  ‚Ä¢ Controller n√£o mapeado corretamente"
            log_info "  ‚Ä¢ Context-path incorreto"
            log_info "  ‚Ä¢ Roteamento do Traefik com problema"
            
            if echo "$content" | grep -q "No static resource"; then
                log_error "Erro espec√≠fico: Spring Boot tratando como recurso est√°tico"
                log_info "Solu√ß√£o: Verificar context-path e mapeamento do controller"
            fi
            
            echo -e "\n${RED}‚ùå FALHA: Endpoint n√£o encontrado${NC}"
            return 1
            ;;
            
        "401"|"403")
            log_error "HTTP $http_code - Problema de autentica√ß√£o/autoriza√ß√£o"
            log_info "Poss√≠veis causas:"
            log_info "  ‚Ä¢ Spring Security bloqueando endpoint p√∫blico"
            log_info "  ‚Ä¢ Configura√ß√£o de seguran√ßa incorreta"
            log_info "  ‚Ä¢ Endpoint n√£o est√° em .permitAll()"
            
            echo -e "\n${RED}‚ùå FALHA: Endpoint sendo bloqueado pela seguran√ßa${NC}"
            return 1
            ;;
            
        "500")
            log_error "HTTP 500 - Erro interno do servidor"
            log_info "Poss√≠veis causas:"
            log_info "  ‚Ä¢ Erro na aplica√ß√£o"
            log_info "  ‚Ä¢ Problema com banco de dados"
            log_info "  ‚Ä¢ Exce√ß√£o n√£o tratada"
            
            if echo "$content" | grep -q -i "database\|mysql\|connection"; then
                log_error "Poss√≠vel problema de conex√£o com banco de dados"
            fi
            
            echo -e "\n${RED}‚ùå FALHA: Erro interno do servidor${NC}"
            return 1
            ;;
            
        "000")
            log_error "Falha na conex√£o - Timeout ou DNS"
            log_info "Poss√≠veis causas:"
            log_info "  ‚Ä¢ Servidor n√£o est√° respondendo"
            log_info "  ‚Ä¢ Problema de DNS"
            log_info "  ‚Ä¢ Timeout de conex√£o"
            log_info "  ‚Ä¢ Certificado SSL inv√°lido"
            
            echo -e "\n${RED}‚ùå FALHA: N√£o foi poss√≠vel conectar${NC}"
            return 1
            ;;
            
        *)
            log_warn "HTTP $http_code - Status inesperado"
            log_info "Conte√∫do: $(echo "$content" | head -c 200)..."
            
            echo -e "\n${YELLOW}‚ö†Ô∏è INESPERADO: Status HTTP n√£o reconhecido${NC}"
            return 1
            ;;
    esac
    
    # Cleanup
    rm -f "$temp_file"
}

# Fun√ß√£o para mostrar diagn√≥stico adicional
show_diagnostic() {
    log_header "DIAGN√ìSTICO ADICIONAL"
    
    # Testar conectividade b√°sica
    log_step "Testando conectividade b√°sica..."
    if ping -c 1 www.conexaodesorte.com.br >/dev/null 2>&1; then
        log_success "DNS resolvendo corretamente"
    else
        log_error "Problema de DNS ou conectividade"
    fi
    
    # Testar HTTPS b√°sico
    log_step "Testando HTTPS b√°sico..."
    if curl -s -k --connect-timeout 5 https://www.conexaodesorte.com.br >/dev/null 2>&1; then
        log_success "HTTPS funcionando"
    else
        log_error "Problema com HTTPS"
    fi
    
    # Testar health check
    log_step "Testando health check..."
    local health_response=$(curl -s -w "%{http_code}" -o /dev/null https://www.conexaodesorte.com.br/rest/actuator/health --connect-timeout 5 -k 2>/dev/null || echo "000")
    if [[ "$health_response" == "200" ]]; then
        log_success "Health check OK"
    else
        log_warn "Health check retornou HTTP $health_response"
    fi
}

# Executar teste
main() {
    if test_endpoint; then
        echo -e "\n${GREEN}üéØ RESULTADO: ENDPOINT FUNCIONANDO!${NC}"
        exit 0
    else
        show_diagnostic
        echo -e "\n${RED}üéØ RESULTADO: ENDPOINT COM PROBLEMAS${NC}"
        echo -e "${BLUE}üí° Verificar logs do servidor e configura√ß√£o de seguran√ßa${NC}"
        exit 1
    fi
}

# Executar se chamado diretamente
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi
