#!/bin/bash

# =============================================================================
# VERIFICA√á√ÉO FINAL DE PREPARA√á√ÉO PARA PRODU√á√ÉO
# =============================================================================

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}üîç VERIFICA√á√ÉO FINAL DE PREPARA√á√ÉO PARA PRODU√á√ÉO${NC}"
echo -e "${BLUE}===============================================${NC}"

# Contadores
total_checks=0
passed_checks=0
failed_checks=0

# Fun√ß√£o para verificar
check_item() {
    local description="$1"
    local command="$2"
    local expected="$3"
    
    total_checks=$((total_checks + 1))
    echo -e "\n${YELLOW}üîç Verificando: $description${NC}"
    
    if eval "$command" > /dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ PASSOU: $description${NC}"
        passed_checks=$((passed_checks + 1))
    else
        echo -e "${RED}‚ùå FALHOU: $description${NC}"
        failed_checks=$((failed_checks + 1))
    fi
}

# Fun√ß√£o para verificar secret
check_secret() {
    local secret_name="$1"
    total_checks=$((total_checks + 1))
    
    echo -e "\n${YELLOW}üîç Verificando secret: $secret_name${NC}"
    
    if gh secret list --repo "Wibson82/conexao-de-sorte-backend" | grep -q "$secret_name"; then
        echo -e "${GREEN}‚úÖ PASSOU: Secret $secret_name configurado${NC}"
        passed_checks=$((passed_checks + 1))
    else
        echo -e "${RED}‚ùå FALHOU: Secret $secret_name n√£o encontrado${NC}"
        failed_checks=$((failed_checks + 1))
    fi
}

echo -e "\n${BLUE}üìã VERIFICANDO SECRETS DO GITHUB ACTIONS${NC}"
echo -e "${BLUE}=========================================${NC}"

# Verificar secrets cr√≠ticos
check_secret "WEBSOCKET_JWT_SECRET"
check_secret "CHAT_ENCRYPTION_KEY"
check_secret "BACKUP_ENCRYPTION_KEY"
check_secret "RATE_LIMIT_GLOBAL_LIMIT"
check_secret "SECURITY_CONTENT_SECURITY_POLICY"
check_secret "SECURITY_HSTS_MAX_AGE"
check_secret "WEBSOCKET_CORS_ORIGINS"

# Verificar secrets existentes
check_secret "AZURE_CLIENT_ID"
check_secret "JWT_ISSUER"
check_secret "CONEXAO_DE_SORTE_DATABASE_URL"

echo -e "\n${BLUE}üìÅ VERIFICANDO ARQUIVOS DE CONFIGURA√á√ÉO${NC}"
echo -e "${BLUE}=======================================${NC}"

# Verificar arquivos de configura√ß√£o
check_item "Profile prod-optimized existe" "test -f src/main/resources/application-prod-optimized.yml"
check_item "Profile production-final existe" "test -f src/main/resources/application-production-final.yml"
check_item "Configura√ß√£o HTTPS existe" "test -f src/main/java/br/tec/facilitaservicos/conexaodesorte/configuracao/seguranca/ConfiguracaoHTTPS.java"

echo -e "\n${BLUE}üîß VERIFICANDO SCRIPTS E FERRAMENTAS${NC}"
echo -e "${BLUE}===================================${NC}"

# Verificar scripts
check_item "Script de setup de secrets existe" "test -f scripts/setup-production-secrets.sh"
check_item "Script de teste de carga existe" "test -f scripts/load-testing.sh"
check_item "Script de teste simples existe" "test -f scripts/simple-load-test.sh"
check_item "Script execut√°vel" "test -x scripts/simple-load-test.sh"

echo -e "\n${BLUE}üê≥ VERIFICANDO CI/CD${NC}"
echo -e "${BLUE}==================${NC}"

# Verificar CI/CD
check_item "Workflow de deploy existe" "test -f .github/workflows/deploy-unified.yml"
check_item "Verifica√ß√£o de loops no CI/CD" "grep -q 'Verificar loops' .github/workflows/deploy-unified.yml"

echo -e "\n${BLUE}‚òÅÔ∏è VERIFICANDO CONECTIVIDADE AZURE${NC}"
echo -e "${BLUE}==================================${NC}"

# Verificar Azure CLI
check_item "Azure CLI instalado" "command -v az"
check_item "Azure CLI logado" "az account show"

echo -e "\n${BLUE}üêô VERIFICANDO CONECTIVIDADE GITHUB${NC}"
echo -e "${BLUE}===================================${NC}"

# Verificar GitHub CLI
check_item "GitHub CLI instalado" "command -v gh"
check_item "GitHub CLI logado" "gh auth status"

echo -e "\n${BLUE}üèóÔ∏è VERIFICANDO ESTRUTURA DO PROJETO${NC}"
echo -e "${BLUE}===================================${NC}"

# Verificar estrutura
check_item "Diret√≥rio de servi√ßos existe" "test -d src/main/java/br/tec/facilitaservicos/conexaodesorte/servico"
check_item "Servi√ßos de chat implementados" "test -f src/main/java/br/tec/facilitaservicos/conexaodesorte/servico/batepapo/comando/impl/ComandoMensagemBatePapoImpl.java"
check_item "Sistema de notifica√ß√µes implementado" "test -f src/main/java/br/tec/facilitaservicos/conexaodesorte/servico/notificacao/ServicoNotificacaoPush.java"
check_item "Sistema de criptografia implementado" "test -f src/main/java/br/tec/facilitaservicos/conexaodesorte/servico/criptografia/GerenciadorChavesCriptografia.java"
check_item "Sistema de backup implementado" "test -f src/main/java/br/tec/facilitaservicos/conexaodesorte/servico/backup/SistemaBackupRecuperacao.java"

echo -e "\n${BLUE}üìä RELAT√ìRIO FINAL${NC}"
echo -e "${BLUE}==================${NC}"

percentage=$((passed_checks * 100 / total_checks))

echo -e "\n${YELLOW}üìà ESTAT√çSTICAS:${NC}"
echo -e "   Total de verifica√ß√µes: $total_checks"
echo -e "   ${GREEN}‚úÖ Passou: $passed_checks${NC}"
echo -e "   ${RED}‚ùå Falhou: $failed_checks${NC}"
echo -e "   ${BLUE}üìä Percentual: $percentage%${NC}"

if [ $percentage -ge 95 ]; then
    echo -e "\n${GREEN}üéâ EXCELENTE! Sistema 100% pronto para produ√ß√£o!${NC}"
    echo -e "${GREEN}‚úÖ Todos os componentes cr√≠ticos est√£o configurados${NC}"
    echo -e "${GREEN}üöÄ Pode fazer deploy com seguran√ßa!${NC}"
elif [ $percentage -ge 90 ]; then
    echo -e "\n${YELLOW}‚ö†Ô∏è QUASE PRONTO! Sistema 95% pronto para produ√ß√£o${NC}"
    echo -e "${YELLOW}üîß Algumas verifica√ß√µes falharam, mas n√£o s√£o cr√≠ticas${NC}"
    echo -e "${YELLOW}üöÄ Deploy pode ser feito com cuidado${NC}"
else
    echo -e "\n${RED}‚ùå ATEN√á√ÉO! Sistema n√£o est√° pronto para produ√ß√£o${NC}"
    echo -e "${RED}üõë Corrija os problemas antes do deploy${NC}"
    echo -e "${RED}üìã Revise os itens que falharam acima${NC}"
fi

echo -e "\n${BLUE}üéØ PR√ìXIMOS PASSOS:${NC}"
if [ $failed_checks -eq 0 ]; then
    echo "1. ‚úÖ Fazer commit das altera√ß√µes"
    echo "2. ‚úÖ Executar push para trigger do CI/CD"
    echo "3. ‚úÖ Monitorar deploy no GitHub Actions"
    echo "4. ‚úÖ Verificar aplica√ß√£o em produ√ß√£o"
else
    echo "1. üîß Corrigir os $failed_checks itens que falharam"
    echo "2. üîÑ Executar este script novamente"
    echo "3. ‚úÖ Quando tudo estiver OK, fazer deploy"
fi

echo -e "\n${GREEN}‚úÖ Verifica√ß√£o de prepara√ß√£o para produ√ß√£o conclu√≠da!${NC}"

exit $failed_checks
