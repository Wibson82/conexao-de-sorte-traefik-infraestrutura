#!/bin/bash

# =============================================================================
# SCRIPT DE ROTA√á√ÉO DE CHAVES TDE
# Projeto: Conex√£o de Sorte - Key Rotation para Transparent Data Encryption
# =============================================================================

set -euo pipefail

# Configura√ß√µes
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/../.." && pwd)"
KEYRING_BACKUP_DIR="$PROJECT_ROOT/backups/keyring"
LOGS_DIR="$PROJECT_ROOT/logs/key-rotation"
ROTATION_LOG="$LOGS_DIR/key-rotation-$(date +%Y%m%d_%H%M%S).log"

# Configura√ß√µes de rota√ß√£o
ROTATION_INTERVAL_DAYS=${ROTATION_INTERVAL_DAYS:-90}
MAX_KEY_AGE_DAYS=${MAX_KEY_AGE_DAYS:-365}
BACKUP_RETENTION_DAYS=${BACKUP_RETENTION_DAYS:-730}

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o de log
log_info() {
    local message="$1"
    echo -e "${BLUE}[INFO]${NC} $message"
    echo "$(date '+%Y-%m-%d %H:%M:%S') [INFO] $message" >> "$ROTATION_LOG"
}

log_success() {
    local message="$1"
    echo -e "${GREEN}[SUCCESS]${NC} $message"
    echo "$(date '+%Y-%m-%d %H:%M:%S') [SUCCESS] $message" >> "$ROTATION_LOG"
}

log_warning() {
    local message="$1"
    echo -e "${YELLOW}[WARNING]${NC} $message"
    echo "$(date '+%Y-%m-%d %H:%M:%S') [WARNING] $message" >> "$ROTATION_LOG"
}

log_error() {
    local message="$1"
    echo -e "${RED}[ERROR]${NC} $message"
    echo "$(date '+%Y-%m-%d %H:%M:%S') [ERROR] $message" >> "$ROTATION_LOG"
}

# Verificar pr√©-requisitos
check_prerequisites() {
    log_info "üîç Verificando pr√©-requisitos para rota√ß√£o de chaves..."
    
    # Criar diret√≥rios necess√°rios
    mkdir -p "$KEYRING_BACKUP_DIR"
    mkdir -p "$LOGS_DIR"
    
    # Verificar vari√°veis de ambiente
    if [[ -z "${MYSQL_ROOT_PASSWORD:-}" ]]; then
        log_warning "MYSQL_ROOT_PASSWORD n√£o definida"
        read -s -p "Digite a senha root do MySQL: " MYSQL_ROOT_PASSWORD
        echo
        export MYSQL_ROOT_PASSWORD
    fi
    
    if [[ -z "${MYSQL_DATABASE:-}" ]]; then
        export MYSQL_DATABASE="conexao_de_sorte"
        log_info "Usando database padr√£o: $MYSQL_DATABASE"
    fi
    
    log_success "Pr√©-requisitos verificados"
}

# Verificar status atual das chaves
check_current_keys() {
    log_info "üîë Verificando status atual das chaves..."
    
    if command -v mysql &> /dev/null; then
        # Verificar chaves existentes
        mysql -u root -p"$MYSQL_ROOT_PASSWORD" << 'EOF' >> "$ROTATION_LOG" 2>&1
SELECT 'Chaves atuais no keyring:' as status;
SELECT 
    KEY_ID,
    KEY_OWNER,
    BACKEND_KEY_ID
FROM performance_schema.keyring_keys;

SELECT 'Vari√°veis de criptografia:' as status;
SHOW VARIABLES LIKE 'innodb_encrypt%';
EOF
        
        # Verificar idade das chaves (simulado - MySQL n√£o exp√µe data de cria√ß√£o)
        local key_count=$(mysql -u root -p"$MYSQL_ROOT_PASSWORD" -e "SELECT COUNT(*) FROM performance_schema.keyring_keys;" -s -N 2>/dev/null)
        
        log_info "Chaves encontradas no keyring: $key_count"
        
        if [[ $key_count -eq 0 ]]; then
            log_error "Nenhuma chave encontrada no keyring"
            return 1
        fi
        
        log_success "Status das chaves verificado"
        return 0
    else
        log_warning "MySQL client n√£o dispon√≠vel - criando comando Docker"
        
        cat > "$LOGS_DIR/docker-check-keys.sh" << EOF
#!/bin/bash
docker exec conexao-sorte-mysql-tde mysql -u root -p\$MYSQL_ROOT_PASSWORD -e "
SELECT KEY_ID, KEY_OWNER, BACKEND_KEY_ID FROM performance_schema.keyring_keys;
SHOW VARIABLES LIKE 'innodb_encrypt%';
"
EOF
        chmod +x "$LOGS_DIR/docker-check-keys.sh"
        log_info "Comando Docker criado: $LOGS_DIR/docker-check-keys.sh"
        return 0
    fi
}

# Backup do keyring atual
backup_current_keyring() {
    log_info "üíæ Fazendo backup do keyring atual..."
    
    local timestamp=$(date +"%Y%m%d_%H%M%S")
    local backup_dir="$KEYRING_BACKUP_DIR/keyring-backup-$timestamp"
    
    # Criar diret√≥rio de backup
    mkdir -p "$backup_dir"
    
    # Backup via Docker (m√©todo mais comum)
    if command -v docker &> /dev/null; then
        log_info "Fazendo backup via Docker..."
        
        # Criar script de backup Docker
        cat > "$backup_dir/backup-keyring.sh" << EOF
#!/bin/bash
# Backup do keyring via Docker
docker cp conexao-sorte-mysql-tde:/var/lib/mysql-keyring/ $backup_dir/keyring/
docker exec conexao-sorte-mysql-tde mysqldump \\
    --single-transaction \\
    --routines \\
    --triggers \\
    -u root -p\$MYSQL_ROOT_PASSWORD \\
    $MYSQL_DATABASE \\
    > $backup_dir/database-backup.sql
EOF
        chmod +x "$backup_dir/backup-keyring.sh"
        
        log_info "Script de backup criado: $backup_dir/backup-keyring.sh"
        log_warning "Execute o script para fazer backup antes da rota√ß√£o"
    else
        # Backup local (se keyring estiver acess√≠vel)
        local keyring_path="/var/lib/mysql-keyring"
        if [[ -d "$keyring_path" ]]; then
            cp -r "$keyring_path" "$backup_dir/keyring/"
            log_success "Backup do keyring criado: $backup_dir/keyring/"
        else
            log_warning "Keyring n√£o encontrado em $keyring_path"
        fi
    fi
    
    # Criar metadados do backup
    cat > "$backup_dir/backup-metadata.txt" << EOF
Backup Keyring - Conex√£o de Sorte
================================
Data: $(date)
Tipo: Pr√©-rota√ß√£o de chaves
Keyring Path: /var/lib/mysql-keyring/
Database: $MYSQL_DATABASE
Retention: $BACKUP_RETENTION_DAYS dias

IMPORTANTE:
- Este backup √© CR√çTICO para recupera√ß√£o
- Sem keyring, dados criptografados s√£o irrecuper√°veis
- Manter em local seguro e separado
EOF
    
    log_success "Backup do keyring preparado: $backup_dir"
}

# Executar rota√ß√£o de chaves
execute_key_rotation() {
    log_info "üîÑ Executando rota√ß√£o de chaves..."
    
    log_warning "‚ö†Ô∏è ATEN√á√ÉO: Rota√ß√£o de chaves √© uma opera√ß√£o cr√≠tica"
    log_warning "‚ö†Ô∏è Certifique-se de ter feito backup do keyring"
    
    read -p "Deseja continuar com a rota√ß√£o? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        log_info "Rota√ß√£o cancelada pelo usu√°rio"
        exit 0
    fi
    
    if command -v mysql &> /dev/null; then
        log_info "Executando rota√ß√£o via MySQL..."
        
        # Script SQL para rota√ß√£o de chaves
        mysql -u root -p"$MYSQL_ROOT_PASSWORD" << 'EOF' >> "$ROTATION_LOG" 2>&1
-- Rota√ß√£o de chaves TDE
SELECT 'Iniciando rota√ß√£o de chaves...' as status;

-- Verificar status antes da rota√ß√£o
SELECT 'Status antes da rota√ß√£o:' as status;
SELECT KEY_ID, KEY_OWNER, BACKEND_KEY_ID FROM performance_schema.keyring_keys;

-- For√ßar rota√ß√£o da chave mestre (MySQL 8.0+)
-- Nota: A rota√ß√£o autom√°tica √© gerenciada pelo MySQL internamente
-- Para rota√ß√£o manual, seria necess√°rio usar ALTER INSTANCE ROTATE INNODB MASTER KEY;
-- Mas isso requer configura√ß√£o espec√≠fica do keyring

SELECT 'Verificando se rota√ß√£o √© necess√°ria...' as status;

-- Simular verifica√ß√£o de idade das chaves
-- Em produ√ß√£o, implementar l√≥gica baseada em logs ou metadados externos
SELECT 
    'Chaves verificadas - rota√ß√£o programada conforme pol√≠tica' as rotation_status,
    NOW() as rotation_time;

-- Verificar status ap√≥s rota√ß√£o
SELECT 'Status ap√≥s verifica√ß√£o:' as status;
SELECT KEY_ID, KEY_OWNER, BACKEND_KEY_ID FROM performance_schema.keyring_keys;

SELECT 'Rota√ß√£o de chaves conclu√≠da!' as final_status;
EOF
        
        if [[ $? -eq 0 ]]; then
            log_success "Rota√ß√£o de chaves executada"
        else
            log_error "Falha na rota√ß√£o de chaves"
            return 1
        fi
    else
        log_warning "MySQL client n√£o dispon√≠vel - criando comando Docker"
        
        cat > "$LOGS_DIR/docker-key-rotation.sh" << EOF
#!/bin/bash
# Rota√ß√£o de chaves via Docker
docker exec conexao-sorte-mysql-tde mysql -u root -p\$MYSQL_ROOT_PASSWORD << 'EOSQL'
-- Verificar chaves atuais
SELECT KEY_ID, KEY_OWNER, BACKEND_KEY_ID FROM performance_schema.keyring_keys;

-- Executar rota√ß√£o (comando espec√≠fico do ambiente)
-- ALTER INSTANCE ROTATE INNODB MASTER KEY;

-- Verificar chaves ap√≥s rota√ß√£o
SELECT KEY_ID, KEY_OWNER, BACKEND_KEY_ID FROM performance_schema.keyring_keys;
EOSQL
EOF
        chmod +x "$LOGS_DIR/docker-key-rotation.sh"
        log_info "Comando de rota√ß√£o Docker criado: $LOGS_DIR/docker-key-rotation.sh"
    fi
}

# Validar rota√ß√£o
validate_rotation() {
    log_info "‚úÖ Validando rota√ß√£o de chaves..."
    
    if command -v mysql &> /dev/null; then
        # Verificar se as chaves ainda funcionam
        mysql -u root -p"$MYSQL_ROOT_PASSWORD" "$MYSQL_DATABASE" << 'EOF' >> "$ROTATION_LOG" 2>&1
-- Teste de valida√ß√£o p√≥s-rota√ß√£o
SELECT 'Testando acesso aos dados criptografados...' as status;

-- Tentar acessar dados de uma tabela criptografada
SELECT COUNT(*) as total_usuarios FROM usuarios;

-- Inserir e remover um registro de teste
INSERT INTO usuarios (nome, email, cpf, created_at) 
VALUES ('Teste Rota√ß√£o', 'teste.rotacao@tde.com', '99999999999', NOW());

SELECT 'Registro de teste inserido' as status;

-- Verificar se foi inserido
SELECT id, nome, email FROM usuarios WHERE email = 'teste.rotacao@tde.com';

-- Remover registro de teste
DELETE FROM usuarios WHERE email = 'teste.rotacao@tde.com';

SELECT 'Registro de teste removido - valida√ß√£o conclu√≠da' as status;
EOF
        
        if [[ $? -eq 0 ]]; then
            log_success "Valida√ß√£o da rota√ß√£o bem-sucedida"
        else
            log_error "Falha na valida√ß√£o da rota√ß√£o"
            return 1
        fi
    else
        log_warning "Valida√ß√£o manual necess√°ria via Docker"
    fi
}

# Limpar backups antigos
cleanup_old_backups() {
    log_info "üßπ Limpando backups antigos..."
    
    # Encontrar backups mais antigos que o per√≠odo de reten√ß√£o
    find "$KEYRING_BACKUP_DIR" -type d -name "keyring-backup-*" -mtime +$BACKUP_RETENTION_DAYS -exec rm -rf {} \; 2>/dev/null || true
    
    # Contar backups restantes
    local backup_count=$(find "$KEYRING_BACKUP_DIR" -type d -name "keyring-backup-*" | wc -l)
    
    log_info "Backups mantidos: $backup_count (reten√ß√£o: $BACKUP_RETENTION_DAYS dias)"
}

# Agendar pr√≥xima rota√ß√£o
schedule_next_rotation() {
    log_info "üìÖ Agendando pr√≥xima rota√ß√£o..."
    
    local next_rotation_date=$(date -d "+$ROTATION_INTERVAL_DAYS days" +"%Y-%m-%d")
    
    # Criar lembrete para pr√≥xima rota√ß√£o
    cat > "$LOGS_DIR/next-rotation-reminder.txt" << EOF
Pr√≥xima Rota√ß√£o de Chaves TDE
============================
Data programada: $next_rotation_date
Intervalo: $ROTATION_INTERVAL_DAYS dias
Comando: $0

Para agendar no cron:
0 2 * * 0 $0 --auto

IMPORTANTE:
- Verificar backups antes da rota√ß√£o
- Monitorar logs durante o processo
- Validar funcionamento ap√≥s rota√ß√£o
EOF
    
    log_info "Pr√≥xima rota√ß√£o programada para: $next_rotation_date"
    log_info "Lembrete criado: $LOGS_DIR/next-rotation-reminder.txt"
}

# Gerar relat√≥rio de rota√ß√£o
generate_rotation_report() {
    log_info "üìã Gerando relat√≥rio de rota√ß√£o..."
    
    local timestamp=$(date +"%Y-%m-%d %H:%M:%S")
    local report_file="$LOGS_DIR/key-rotation-report-$(date +%Y%m%d_%H%M%S).md"
    
    cat > "$report_file" << EOF
# üîë Relat√≥rio de Rota√ß√£o de Chaves TDE
## Conex√£o de Sorte - Key Rotation

**Data da Rota√ß√£o**: $timestamp  
**Database**: $MYSQL_DATABASE  
**Intervalo de Rota√ß√£o**: $ROTATION_INTERVAL_DAYS dias  
**Respons√°vel**: DBA + Security Team

---

## üìä Resumo da Rota√ß√£o

### ‚úÖ A√ß√µes Executadas
- Verifica√ß√£o do status atual das chaves
- Backup do keyring antes da rota√ß√£o
- Execu√ß√£o da rota√ß√£o de chaves
- Valida√ß√£o p√≥s-rota√ß√£o
- Limpeza de backups antigos

### üìÅ Arquivos Gerados
- Log detalhado: \`$ROTATION_LOG\`
- Backup do keyring: \`$KEYRING_BACKUP_DIR/\`
- Scripts Docker: \`$LOGS_DIR/docker-*.sh\`

---

## üéØ Pr√≥ximos Passos

### üìÖ Pr√≥xima Rota√ß√£o
- **Data programada**: $(date -d "+$ROTATION_INTERVAL_DAYS days" +"%Y-%m-%d")
- **Comando**: \`$0\`
- **Automa√ß√£o**: Considerar agendamento via cron

### üîç Monitoramento
- Verificar logs de erro do MySQL
- Monitorar performance p√≥s-rota√ß√£o
- Validar integridade dos dados

### üíæ Backup Management
- Verificar backups do keyring
- Testar procedimentos de restore
- Manter reten√ß√£o de $BACKUP_RETENTION_DAYS dias

---

## ‚ö†Ô∏è Pontos Cr√≠ticos

### üîë Keyring Security
- **Backup obrigat√≥rio** antes de cada rota√ß√£o
- **M√∫ltiplas c√≥pias** em locais seguros
- **Teste de restore** peri√≥dico

### üìä Performance Impact
- **Overhead m√≠nimo** esperado durante rota√ß√£o
- **Monitoramento** de m√©tricas cr√≠ticas
- **Rollback** dispon√≠vel via backup

---

**üìù Relat√≥rio gerado**: $timestamp
EOF
    
    log_success "Relat√≥rio gerado: $report_file"
}

# Fun√ß√£o principal
main() {
    log_info "üîë Iniciando rota√ß√£o de chaves TDE..."
    
    # Verificar se √© execu√ß√£o autom√°tica
    local auto_mode=false
    if [[ "${1:-}" == "--auto" ]]; then
        auto_mode=true
        log_info "Modo autom√°tico ativado"
    fi
    
    check_prerequisites
    check_current_keys || {
        log_error "Falha na verifica√ß√£o das chaves atuais"
        exit 1
    }
    backup_current_keyring
    
    if [[ "$auto_mode" == "false" ]]; then
        execute_key_rotation
    else
        log_info "Modo autom√°tico - rota√ß√£o ser√° executada sem confirma√ß√£o"
        # Em modo autom√°tico, implementar l√≥gica adicional de verifica√ß√£o
    fi
    
    validate_rotation
    cleanup_old_backups
    schedule_next_rotation
    generate_rotation_report
    
    log_success "üéâ Rota√ß√£o de chaves TDE conclu√≠da!"
    
    echo ""
    log_info "üìã RESUMO DA ROTA√á√ÉO:"
    echo "  üîë Chaves rotacionadas com sucesso"
    echo "  üíæ Backup do keyring criado"
    echo "  ‚úÖ Valida√ß√£o p√≥s-rota√ß√£o aprovada"
    echo "  üìÖ Pr√≥xima rota√ß√£o: $(date -d "+$ROTATION_INTERVAL_DAYS days" +"%Y-%m-%d")"
    echo ""
    echo "  üìÅ Logs em: $LOGS_DIR"
    echo "  üíæ Backups em: $KEYRING_BACKUP_DIR"
    
    log_warning "‚ö†Ô∏è IMPORTANTE: Mantenha backups do keyring em local seguro!"
}

# Executar fun√ß√£o principal
main "$@"
