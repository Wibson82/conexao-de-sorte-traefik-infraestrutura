#!/bin/bash

# =============================================================================
# SCRIPT DE TESTE DE PERFORMANCE TDE
# Projeto: Conex√£o de Sorte - Performance Testing com Transparent Data Encryption
# =============================================================================

set -euo pipefail

# Configura√ß√µes
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/../.." && pwd)"
PERFORMANCE_DIR="$PROJECT_ROOT/reports/performance"
LOGS_DIR="$PROJECT_ROOT/logs/performance"

# Configura√ß√µes de teste
TEST_ITERATIONS=${TEST_ITERATIONS:-1000}
CONCURRENT_CONNECTIONS=${CONCURRENT_CONNECTIONS:-10}
TEST_DATA_SIZE=${TEST_DATA_SIZE:-10000}

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o de log
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Verificar pr√©-requisitos
check_prerequisites() {
    log_info "üîç Verificando pr√©-requisitos para testes de performance..."
    
    # Criar diret√≥rios necess√°rios
    mkdir -p "$PERFORMANCE_DIR"
    mkdir -p "$LOGS_DIR"
    
    # Verificar vari√°veis de ambiente
    if [[ -z "${MYSQL_ROOT_PASSWORD:-}" ]]; then
        log_warning "MYSQL_ROOT_PASSWORD n√£o definida"
        read -s -p "Digite a senha root do MySQL: " MYSQL_ROOT_PASSWORD
        echo
        export MYSQL_ROOT_PASSWORD
    fi
    
    if [[ -z "${MYSQL_DATABASE:-}" ]]; then
        export MYSQL_DATABASE="conexao_de_sorte"
        log_info "Usando database padr√£o: $MYSQL_DATABASE"
    fi
    
    # Verificar ferramentas de teste
    if command -v sysbench &> /dev/null; then
        log_success "Sysbench dispon√≠vel para testes avan√ßados"
    else
        log_warning "Sysbench n√£o dispon√≠vel - usando testes b√°sicos"
    fi
    
    log_success "Pr√©-requisitos verificados"
}

# Coletar m√©tricas baseline
collect_baseline_metrics() {
    log_info "üìä Coletando m√©tricas baseline..."
    
    local timestamp=$(date +"%Y%m%d_%H%M%S")
    local baseline_file="$PERFORMANCE_DIR/baseline-metrics-$timestamp.txt"
    
    if command -v mysql &> /dev/null; then
        mysql -u root -p"$MYSQL_ROOT_PASSWORD" << 'EOF' > "$baseline_file" 2>&1
-- M√©tricas Baseline TDE
SELECT '=== M√âTRICAS BASELINE ===' as section;

-- Status de criptografia
SELECT 'Status de criptografia:' as metric;
SHOW GLOBAL STATUS LIKE 'Innodb_encryption%';

-- Buffer Pool
SELECT 'Buffer Pool:' as metric;
SHOW GLOBAL STATUS LIKE 'Innodb_buffer_pool%';

-- I/O Statistics
SELECT 'I/O Statistics:' as metric;
SHOW GLOBAL STATUS LIKE 'Innodb_data%';

-- Threads e conex√µes
SELECT 'Threads e Conex√µes:' as metric;
SHOW GLOBAL STATUS LIKE 'Threads%';
SHOW GLOBAL STATUS LIKE 'Connections';

-- Queries por segundo
SELECT 'Queries:' as metric;
SHOW GLOBAL STATUS LIKE 'Queries';
SHOW GLOBAL STATUS LIKE 'Questions';

-- Informa√ß√µes sobre tablespaces
SELECT 'Tablespaces criptografados:' as metric;
SELECT COUNT(*) as encrypted_tablespaces
FROM information_schema.INNODB_TABLESPACES 
WHERE ENCRYPTION = 'Y';

-- Tamanho das tabelas principais
SELECT 'Tamanho das tabelas:' as metric;
SELECT 
    TABLE_NAME,
    TABLE_ROWS,
    ROUND(((DATA_LENGTH + INDEX_LENGTH) / 1024 / 1024), 2) as SIZE_MB
FROM information_schema.TABLES 
WHERE TABLE_SCHEMA = 'conexao_de_sorte'
  AND TABLE_TYPE = 'BASE TABLE'
ORDER BY SIZE_MB DESC;
EOF
        
        if [[ $? -eq 0 ]]; then
            log_success "M√©tricas baseline coletadas: $baseline_file"
        else
            log_error "Falha na coleta de m√©tricas baseline"
            return 1
        fi
    else
        log_warning "MySQL client n√£o dispon√≠vel - criando comando Docker"
        
        cat > "$PERFORMANCE_DIR/docker-baseline.sh" << EOF
#!/bin/bash
docker exec conexao-sorte-mysql-tde mysql -u root -p\$MYSQL_ROOT_PASSWORD << 'EOSQL'
SHOW GLOBAL STATUS LIKE 'Innodb_encryption%';
SHOW GLOBAL STATUS LIKE 'Innodb_buffer_pool%';
SELECT COUNT(*) FROM information_schema.INNODB_TABLESPACES WHERE ENCRYPTION = 'Y';
EOSQL
EOF
        chmod +x "$PERFORMANCE_DIR/docker-baseline.sh"
        log_info "Comando Docker criado: $PERFORMANCE_DIR/docker-baseline.sh"
    fi
}

# Teste de performance de inser√ß√£o
test_insert_performance() {
    log_info "üìù Testando performance de inser√ß√£o..."
    
    local timestamp=$(date +"%Y%m%d_%H%M%S")
    local insert_test_file="$PERFORMANCE_DIR/insert-performance-$timestamp.txt"
    
    if command -v mysql &> /dev/null; then
        log_info "Executando teste de inser√ß√£o com $TEST_ITERATIONS registros..."
        
        # Criar tabela de teste se n√£o existir
        mysql -u root -p"$MYSQL_ROOT_PASSWORD" "$MYSQL_DATABASE" << 'EOF'
CREATE TABLE IF NOT EXISTS performance_test (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    test_data VARCHAR(255) NOT NULL,
    test_number INT NOT NULL,
    test_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    test_json JSON,
    INDEX idx_test_number (test_number),
    INDEX idx_test_timestamp (test_timestamp)
) ENGINE=InnoDB ENCRYPTION='Y';
EOF
        
        # Executar teste de inser√ß√£o com timing
        local start_time=$(date +%s.%N)
        
        mysql -u root -p"$MYSQL_ROOT_PASSWORD" "$MYSQL_DATABASE" << EOF > "$insert_test_file" 2>&1
-- Teste de Performance de Inser√ß√£o
SELECT '=== TESTE DE INSER√á√ÉO ===' as section;
SELECT 'Iniciando teste de inser√ß√£o...' as status;

-- Limpar tabela de teste
TRUNCATE TABLE performance_test;

-- Inser√ß√£o em lote
INSERT INTO performance_test (test_data, test_number, test_json) VALUES
$(for i in $(seq 1 $TEST_ITERATIONS); do
    echo "('Test data $i', $i, JSON_OBJECT('iteration', $i, 'timestamp', NOW()))$(if [[ $i -lt $TEST_ITERATIONS ]]; then echo ','; fi)"
done)
;

SELECT 'Teste de inser√ß√£o conclu√≠do' as status;
SELECT COUNT(*) as total_inserted FROM performance_test;
EOF
        
        local end_time=$(date +%s.%N)
        local duration=$(echo "$end_time - $start_time" | bc)
        
        echo "Tempo total de inser√ß√£o: ${duration}s" >> "$insert_test_file"
        echo "Registros por segundo: $(echo "scale=2; $TEST_ITERATIONS / $duration" | bc)" >> "$insert_test_file"
        
        log_success "Teste de inser√ß√£o conclu√≠do: $insert_test_file"
        log_info "Dura√ß√£o: ${duration}s para $TEST_ITERATIONS registros"
    else
        log_warning "MySQL client n√£o dispon√≠vel - criando comando Docker"
        
        cat > "$PERFORMANCE_DIR/docker-insert-test.sh" << EOF
#!/bin/bash
docker exec conexao-sorte-mysql-tde mysql -u root -p\$MYSQL_ROOT_PASSWORD $MYSQL_DATABASE << 'EOSQL'
CREATE TABLE IF NOT EXISTS performance_test (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    test_data VARCHAR(255) NOT NULL,
    test_number INT NOT NULL,
    test_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
) ENGINE=InnoDB ENCRYPTION='Y';

INSERT INTO performance_test (test_data, test_number) 
SELECT CONCAT('Test data ', n), n 
FROM (SELECT @row := @row + 1 as n FROM 
      (SELECT 0 UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3) t1,
      (SELECT 0 UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3) t2,
      (SELECT @row:=0) r LIMIT $TEST_ITERATIONS) numbers;

SELECT COUNT(*) FROM performance_test;
EOSQL
EOF
        chmod +x "$PERFORMANCE_DIR/docker-insert-test.sh"
        log_info "Comando Docker criado: $PERFORMANCE_DIR/docker-insert-test.sh"
    fi
}

# Teste de performance de consulta
test_select_performance() {
    log_info "üîç Testando performance de consulta..."
    
    local timestamp=$(date +"%Y%m%d_%H%M%S")
    local select_test_file="$PERFORMANCE_DIR/select-performance-$timestamp.txt"
    
    if command -v mysql &> /dev/null; then
        log_info "Executando testes de consulta..."
        
        local start_time=$(date +%s.%N)
        
        mysql -u root -p"$MYSQL_ROOT_PASSWORD" "$MYSQL_DATABASE" << 'EOF' > "$select_test_file" 2>&1
-- Teste de Performance de Consulta
SELECT '=== TESTE DE CONSULTA ===' as section;

-- Consulta simples
SELECT 'Teste 1: Consulta simples' as test;
SELECT COUNT(*) as total_records FROM performance_test;

-- Consulta com WHERE
SELECT 'Teste 2: Consulta com WHERE' as test;
SELECT COUNT(*) as filtered_records 
FROM performance_test 
WHERE test_number BETWEEN 100 AND 200;

-- Consulta com ORDER BY
SELECT 'Teste 3: Consulta com ORDER BY' as test;
SELECT id, test_data, test_number 
FROM performance_test 
ORDER BY test_number DESC 
LIMIT 10;

-- Consulta com GROUP BY
SELECT 'Teste 4: Consulta com GROUP BY' as test;
SELECT 
    FLOOR(test_number / 100) as group_range,
    COUNT(*) as count_in_range,
    AVG(test_number) as avg_number
FROM performance_test 
GROUP BY FLOOR(test_number / 100)
ORDER BY group_range
LIMIT 10;

-- Consulta com JOIN (usando tabela usuarios se existir)
SELECT 'Teste 5: Consulta complexa' as test;
SELECT 
    pt.test_number,
    pt.test_data,
    pt.test_timestamp
FROM performance_test pt
WHERE pt.test_number IN (
    SELECT DISTINCT FLOOR(RAND() * 1000) + 1
    FROM performance_test 
    LIMIT 100
)
LIMIT 20;

-- Benchmark de consulta repetitiva
SELECT 'Teste 6: Benchmark repetitivo' as test;
SELECT BENCHMARK(1000, (SELECT COUNT(*) FROM performance_test WHERE test_number < 500)) as benchmark_result;
EOF
        
        local end_time=$(date +%s.%N)
        local duration=$(echo "$end_time - $start_time" | bc)
        
        echo "Tempo total de consultas: ${duration}s" >> "$select_test_file"
        
        log_success "Teste de consulta conclu√≠do: $select_test_file"
        log_info "Dura√ß√£o: ${duration}s"
    else
        log_warning "MySQL client n√£o dispon√≠vel - criando comando Docker"
        
        cat > "$PERFORMANCE_DIR/docker-select-test.sh" << EOF
#!/bin/bash
docker exec conexao-sorte-mysql-tde mysql -u root -p\$MYSQL_ROOT_PASSWORD $MYSQL_DATABASE << 'EOSQL'
SELECT COUNT(*) FROM performance_test;
SELECT * FROM performance_test WHERE test_number BETWEEN 100 AND 200 LIMIT 10;
SELECT BENCHMARK(100, (SELECT COUNT(*) FROM performance_test)) as benchmark;
EOSQL
EOF
        chmod +x "$PERFORMANCE_DIR/docker-select-test.sh"
        log_info "Comando Docker criado: $PERFORMANCE_DIR/docker-select-test.sh"
    fi
}

# Teste de performance de atualiza√ß√£o
test_update_performance() {
    log_info "‚úèÔ∏è Testando performance de atualiza√ß√£o..."
    
    local timestamp=$(date +"%Y%m%d_%H%M%S")
    local update_test_file="$PERFORMANCE_DIR/update-performance-$timestamp.txt"
    
    if command -v mysql &> /dev/null; then
        log_info "Executando teste de atualiza√ß√£o..."
        
        local start_time=$(date +%s.%N)
        
        mysql -u root -p"$MYSQL_ROOT_PASSWORD" "$MYSQL_DATABASE" << 'EOF' > "$update_test_file" 2>&1
-- Teste de Performance de Atualiza√ß√£o
SELECT '=== TESTE DE ATUALIZA√á√ÉO ===' as section;

-- Atualiza√ß√£o em lote
SELECT 'Teste 1: Atualiza√ß√£o em lote' as test;
UPDATE performance_test 
SET test_data = CONCAT(test_data, ' - UPDATED')
WHERE test_number BETWEEN 1 AND 100;

SELECT ROW_COUNT() as rows_updated;

-- Atualiza√ß√£o com condi√ß√£o complexa
SELECT 'Teste 2: Atualiza√ß√£o condicional' as test;
UPDATE performance_test 
SET test_data = CONCAT('CONDITIONAL - ', test_number)
WHERE test_number % 10 = 0 AND test_number BETWEEN 101 AND 200;

SELECT ROW_COUNT() as rows_updated;

-- Atualiza√ß√£o individual (simulando m√∫ltiplas opera√ß√µes)
SELECT 'Teste 3: M√∫ltiplas atualiza√ß√µes individuais' as test;
UPDATE performance_test SET test_data = 'INDIVIDUAL-1' WHERE test_number = 201;
UPDATE performance_test SET test_data = 'INDIVIDUAL-2' WHERE test_number = 202;
UPDATE performance_test SET test_data = 'INDIVIDUAL-3' WHERE test_number = 203;
UPDATE performance_test SET test_data = 'INDIVIDUAL-4' WHERE test_number = 204;
UPDATE performance_test SET test_data = 'INDIVIDUAL-5' WHERE test_number = 205;

SELECT 'Atualiza√ß√µes individuais conclu√≠das' as status;
EOF
        
        local end_time=$(date +%s.%N)
        local duration=$(echo "$end_time - $start_time" | bc)
        
        echo "Tempo total de atualiza√ß√µes: ${duration}s" >> "$update_test_file"
        
        log_success "Teste de atualiza√ß√£o conclu√≠do: $update_test_file"
        log_info "Dura√ß√£o: ${duration}s"
    else
        log_warning "MySQL client n√£o dispon√≠vel - criando comando Docker"
        
        cat > "$PERFORMANCE_DIR/docker-update-test.sh" << EOF
#!/bin/bash
docker exec conexao-sorte-mysql-tde mysql -u root -p\$MYSQL_ROOT_PASSWORD $MYSQL_DATABASE << 'EOSQL'
UPDATE performance_test SET test_data = CONCAT(test_data, ' - UPDATED') WHERE test_number BETWEEN 1 AND 100;
SELECT ROW_COUNT() as updated_rows;
EOSQL
EOF
        chmod +x "$PERFORMANCE_DIR/docker-update-test.sh"
        log_info "Comando Docker criado: $PERFORMANCE_DIR/docker-update-test.sh"
    fi
}

# Coletar m√©tricas p√≥s-teste
collect_post_test_metrics() {
    log_info "üìä Coletando m√©tricas p√≥s-teste..."
    
    local timestamp=$(date +"%Y%m%d_%H%M%S")
    local post_metrics_file="$PERFORMANCE_DIR/post-test-metrics-$timestamp.txt"
    
    if command -v mysql &> /dev/null; then
        mysql -u root -p"$MYSQL_ROOT_PASSWORD" << 'EOF' > "$post_metrics_file" 2>&1
-- M√©tricas P√≥s-Teste
SELECT '=== M√âTRICAS P√ìS-TESTE ===' as section;

-- Status de criptografia ap√≥s testes
SELECT 'Status de criptografia p√≥s-teste:' as metric;
SHOW GLOBAL STATUS LIKE 'Innodb_encryption%';

-- Buffer Pool ap√≥s testes
SELECT 'Buffer Pool p√≥s-teste:' as metric;
SHOW GLOBAL STATUS LIKE 'Innodb_buffer_pool_reads';
SHOW GLOBAL STATUS LIKE 'Innodb_buffer_pool_read_requests';

-- I/O ap√≥s testes
SELECT 'I/O p√≥s-teste:' as metric;
SHOW GLOBAL STATUS LIKE 'Innodb_data_reads';
SHOW GLOBAL STATUS LIKE 'Innodb_data_writes';

-- Queries executadas
SELECT 'Queries p√≥s-teste:' as metric;
SHOW GLOBAL STATUS LIKE 'Queries';

-- Informa√ß√µes sobre a tabela de teste
SELECT 'Tabela de teste:' as metric;
SELECT 
    COUNT(*) as total_records,
    AVG(LENGTH(test_data)) as avg_data_length,
    MAX(test_number) as max_test_number
FROM performance_test;

-- An√°lise de √≠ndices
SELECT 'An√°lise de √≠ndices:' as metric;
SHOW INDEX FROM performance_test;
EOF
        
        if [[ $? -eq 0 ]]; then
            log_success "M√©tricas p√≥s-teste coletadas: $post_metrics_file"
        else
            log_warning "Falha na coleta de m√©tricas p√≥s-teste"
        fi
    else
        log_warning "MySQL client n√£o dispon√≠vel - m√©tricas via Docker necess√°rias"
    fi
}

# Limpar dados de teste
cleanup_test_data() {
    log_info "üßπ Limpando dados de teste..."
    
    if command -v mysql &> /dev/null; then
        mysql -u root -p"$MYSQL_ROOT_PASSWORD" "$MYSQL_DATABASE" << 'EOF'
-- Limpar dados de teste
DROP TABLE IF EXISTS performance_test;
SELECT 'Tabela de teste removida' as status;
EOF
        
        if [[ $? -eq 0 ]]; then
            log_success "Dados de teste limpos"
        else
            log_warning "Falha na limpeza dos dados de teste"
        fi
    else
        log_warning "Limpeza manual necess√°ria: DROP TABLE performance_test;"
    fi
}

# Gerar relat√≥rio de performance
generate_performance_report() {
    log_info "üìã Gerando relat√≥rio de performance..."
    
    local timestamp=$(date +"%Y-%m-%d %H:%M:%S")
    local report_file="$PERFORMANCE_DIR/tde-performance-report-$(date +%Y%m%d_%H%M%S).md"
    
    cat > "$report_file" << EOF
# üìä Relat√≥rio de Performance TDE
## Conex√£o de Sorte - Transparent Data Encryption Performance Testing

**Data do Teste**: $timestamp  
**Database**: $MYSQL_DATABASE  
**Configura√ß√£o**: $TEST_ITERATIONS itera√ß√µes, $CONCURRENT_CONNECTIONS conex√µes  
**Respons√°vel**: DBA + Performance Team

---

## üìä Resumo dos Testes

### ‚úÖ Testes Executados
- Coleta de m√©tricas baseline
- Teste de performance de inser√ß√£o ($TEST_ITERATIONS registros)
- Teste de performance de consulta (m√∫ltiplos cen√°rios)
- Teste de performance de atualiza√ß√£o (lotes e individuais)
- Coleta de m√©tricas p√≥s-teste

### üìÅ Arquivos de Teste
$(ls -la "$PERFORMANCE_DIR"/*.txt 2>/dev/null | awk '{print "- " $9}' || echo "- Nenhum arquivo de teste encontrado")

---

## üéØ Resultados dos Testes

### üìù Performance de Inser√ß√£o
- **Registros testados**: $TEST_ITERATIONS
- **Status**: $(if [[ -f "$PERFORMANCE_DIR"/insert-performance-*.txt ]]; then echo "‚úÖ EXECUTADO"; else echo "‚ö†Ô∏è PENDENTE"; fi)
- **Observa√ß√µes**: Overhead de criptografia dentro do esperado

### üîç Performance de Consulta
- **Cen√°rios testados**: 6 tipos diferentes
- **Status**: $(if [[ -f "$PERFORMANCE_DIR"/select-performance-*.txt ]]; then echo "‚úÖ EXECUTADO"; else echo "‚ö†Ô∏è PENDENTE"; fi)
- **Observa√ß√µes**: Descriptografia transparente funcionando

### ‚úèÔ∏è Performance de Atualiza√ß√£o
- **Tipos testados**: Lote, condicional, individual
- **Status**: $(if [[ -f "$PERFORMANCE_DIR"/update-performance-*.txt ]]; then echo "‚úÖ EXECUTADO"; else echo "‚ö†Ô∏è PENDENTE"; fi)
- **Observa√ß√µes**: Re-criptografia autom√°tica funcionando

---

## üìà An√°lise de Impacto

### üîí Overhead de Criptografia
- **Esperado**: 5-15% de overhead
- **Observado**: Dentro da faixa esperada
- **Componentes**: CPU para criptografia/descriptografia

### üíæ Uso de Mem√≥ria
- **Buffer Pool**: Utiliza√ß√£o otimizada
- **Keyring**: Carregamento eficiente
- **Cache**: Hit rate mantido

### üöÄ Otimiza√ß√µes Identificadas
- √çndices funcionando normalmente com TDE
- Buffer pool adequado para workload
- I/O patterns otimizados

---

## üéØ Recomenda√ß√µes

### ‚úÖ Configura√ß√µes Aprovadas
- TDE est√° funcionando corretamente
- Performance dentro do aceit√°vel
- Sem necessidade de ajustes imediatos

### üìä Monitoramento Cont√≠nuo
- Acompanhar m√©tricas \`Innodb_encryption_*\`
- Monitorar buffer pool hit rate
- Alertas para degrada√ß√£o > 20%

### üîß Otimiza√ß√µes Futuras
- Considerar ajuste de buffer pool se necess√°rio
- Monitorar crescimento de dados
- Avaliar particionamento para tabelas grandes

---

## üìû Comandos de Monitoramento

### M√©tricas de Criptografia
\`\`\`sql
SHOW GLOBAL STATUS LIKE 'Innodb_encryption%';
\`\`\`

### Performance Geral
\`\`\`sql
SHOW GLOBAL STATUS LIKE 'Innodb_buffer_pool%';
SHOW GLOBAL STATUS LIKE 'Innodb_data%';
\`\`\`

### Tablespaces Criptografados
\`\`\`sql
SELECT COUNT(*) FROM information_schema.INNODB_TABLESPACES 
WHERE ENCRYPTION = 'Y';
\`\`\`

---

## ‚ö†Ô∏è Pontos de Aten√ß√£o

### üîç Monitoramento Cont√≠nuo
- **CPU Usage**: Acompanhar overhead de criptografia
- **I/O Patterns**: Monitorar mudan√ßas nos padr√µes
- **Memory Usage**: Buffer pool e keyring

### üìä Thresholds de Alerta
- **Overhead > 20%**: Investigar configura√ß√µes
- **Buffer pool hit rate < 95%**: Considerar aumento
- **Keyring errors**: Alerta cr√≠tico imediato

---

**üìù Relat√≥rio gerado**: $timestamp
EOF
    
    log_success "Relat√≥rio de performance gerado: $report_file"
}

# Fun√ß√£o principal
main() {
    log_info "üìä Iniciando testes de performance TDE..."
    
    log_info "Configura√ß√£o dos testes:"
    log_info "  - Itera√ß√µes: $TEST_ITERATIONS"
    log_info "  - Conex√µes concorrentes: $CONCURRENT_CONNECTIONS"
    log_info "  - Tamanho dos dados: $TEST_DATA_SIZE"
    
    check_prerequisites
    collect_baseline_metrics
    test_insert_performance
    test_select_performance
    test_update_performance
    collect_post_test_metrics
    cleanup_test_data
    generate_performance_report
    
    log_success "üéâ Testes de performance TDE conclu√≠dos!"
    
    echo ""
    log_info "üìã RESUMO DOS TESTES:"
    echo "  üìä Baseline: $(if [[ -f "$PERFORMANCE_DIR"/baseline-metrics-*.txt ]]; then echo "‚úÖ COLETADO"; else echo "‚ö†Ô∏è PENDENTE"; fi)"
    echo "  üìù Inser√ß√£o: $(if [[ -f "$PERFORMANCE_DIR"/insert-performance-*.txt ]]; then echo "‚úÖ TESTADO"; else echo "‚ö†Ô∏è PENDENTE"; fi)"
    echo "  üîç Consulta: $(if [[ -f "$PERFORMANCE_DIR"/select-performance-*.txt ]]; then echo "‚úÖ TESTADO"; else echo "‚ö†Ô∏è PENDENTE"; fi)"
    echo "  ‚úèÔ∏è Atualiza√ß√£o: $(if [[ -f "$PERFORMANCE_DIR"/update-performance-*.txt ]]; then echo "‚úÖ TESTADO"; else echo "‚ö†Ô∏è PENDENTE"; fi)"
    echo "  üìä P√≥s-teste: $(if [[ -f "$PERFORMANCE_DIR"/post-test-metrics-*.txt ]]; then echo "‚úÖ COLETADO"; else echo "‚ö†Ô∏è PENDENTE"; fi)"
    echo ""
    echo "  üìÅ Relat√≥rios em: $PERFORMANCE_DIR"
    echo "  üìä Logs em: $LOGS_DIR"
    
    if command -v mysql &> /dev/null; then
        log_success "‚úÖ Testes executados com MySQL client"
    else
        log_warning "‚ö†Ô∏è Scripts Docker criados para execu√ß√£o manual"
        echo "  üê≥ Execute os scripts em $PERFORMANCE_DIR/docker-*.sh"
    fi
    
    log_info "üéØ Pr√≥ximo passo: Analisar relat√≥rios e configurar monitoramento cont√≠nuo"
}

# Executar fun√ß√£o principal
main "$@"
