#!/bin/bash

# =============================================================================
# SCRIPT DE MIGRA√á√ÉO DE TABELAS PARA TDE
# Projeto: Conex√£o de Sorte - Transparent Data Encryption
# =============================================================================

set -euo pipefail

# Configura√ß√µes
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/../.." && pwd)"
SQL_SCRIPT="$SCRIPT_DIR/migrate-tables-tde.sql"
BACKUP_DIR="$PROJECT_ROOT/backups/tde-migration"
LOGS_DIR="$PROJECT_ROOT/logs/tde-migration"

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o de log
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Verificar pr√©-requisitos
check_prerequisites() {
    log_info "üîç Verificando pr√©-requisitos para migra√ß√£o TDE..."
    
    # Verificar se o script SQL existe
    if [[ ! -f "$SQL_SCRIPT" ]]; then
        log_error "Script SQL n√£o encontrado: $SQL_SCRIPT"
        exit 1
    fi
    
    # Verificar vari√°veis de ambiente
    if [[ -z "${MYSQL_ROOT_PASSWORD:-}" ]]; then
        log_warning "MYSQL_ROOT_PASSWORD n√£o definida"
        read -s -p "Digite a senha root do MySQL: " MYSQL_ROOT_PASSWORD
        echo
        export MYSQL_ROOT_PASSWORD
    fi
    
    if [[ -z "${MYSQL_DATABASE:-}" ]]; then
        export MYSQL_DATABASE="conexao_de_sorte"
        log_info "Usando database padr√£o: $MYSQL_DATABASE"
    fi
    
    log_success "Pr√©-requisitos verificados"
}

# Criar diret√≥rios necess√°rios
setup_directories() {
    log_info "üìÅ Criando diret√≥rios de migra√ß√£o..."
    
    mkdir -p "$BACKUP_DIR"
    mkdir -p "$LOGS_DIR"
    
    log_success "Diret√≥rios criados"
}

# Verificar status do TDE
check_tde_status() {
    log_info "üîç Verificando status do TDE..."
    
    local timestamp=$(date +"%Y%m%d_%H%M%S")
    local status_file="$LOGS_DIR/tde-status-pre-migration-$timestamp.txt"
    
    # Verificar se MySQL est√° acess√≠vel
    if command -v mysql &> /dev/null; then
        # Verificar vari√°veis TDE
        mysql -u root -p"$MYSQL_ROOT_PASSWORD" -e "SHOW VARIABLES LIKE 'innodb_encrypt%';" > "$status_file" 2>&1 || {
            log_error "N√£o foi poss√≠vel conectar ao MySQL"
            return 1
        }
        
        # Verificar keyring
        mysql -u root -p"$MYSQL_ROOT_PASSWORD" -e "SELECT * FROM performance_schema.keyring_keys;" >> "$status_file" 2>&1 || true
        
        log_success "Status TDE salvo em: $status_file"
        
        # Verificar se TDE est√° habilitado
        local tde_enabled=$(mysql -u root -p"$MYSQL_ROOT_PASSWORD" -e "SHOW VARIABLES LIKE 'innodb_encrypt_tables';" -s -N 2>/dev/null | awk '{print $2}')
        
        if [[ "$tde_enabled" != "ON" ]]; then
            log_error "TDE n√£o est√° habilitado. Execute primeiro: ./scripts/database/setup-mysql-tde.sh"
            return 1
        fi
        
        log_success "TDE est√° habilitado e pronto para migra√ß√£o"
        return 0
    else
        log_warning "MySQL client n√£o dispon√≠vel - assumindo ambiente Docker"
        return 0
    fi
}

# Criar backup antes da migra√ß√£o
create_pre_migration_backup() {
    log_info "üíæ Criando backup antes da migra√ß√£o..."
    
    local timestamp=$(date +"%Y%m%d_%H%M%S")
    local backup_file="$BACKUP_DIR/pre-tde-migration-$timestamp.sql"
    
    if command -v mysql &> /dev/null; then
        # Backup usando mysqldump
        mysqldump \
            --single-transaction \
            --routines \
            --triggers \
            --add-drop-table \
            --create-options \
            -u root -p"$MYSQL_ROOT_PASSWORD" \
            "$MYSQL_DATABASE" \
            > "$backup_file" 2>"$LOGS_DIR/backup-$timestamp.log"
        
        if [[ $? -eq 0 ]]; then
            log_success "Backup criado: $backup_file"
            
            # Comprimir backup
            gzip "$backup_file"
            log_info "Backup comprimido: $backup_file.gz"
        else
            log_error "Falha no backup - verifique $LOGS_DIR/backup-$timestamp.log"
            return 1
        fi
    else
        log_warning "MySQL client n√£o dispon√≠vel - backup via Docker necess√°rio"
        
        # Criar comando Docker para backup
        cat > "$BACKUP_DIR/docker-backup-command.sh" << EOF
#!/bin/bash
# Comando para backup via Docker
docker exec conexao-sorte-mysql-tde mysqldump \\
    --single-transaction \\
    --routines \\
    --triggers \\
    --add-drop-table \\
    --create-options \\
    -u root -p\$MYSQL_ROOT_PASSWORD \\
    $MYSQL_DATABASE \\
    > $backup_file
EOF
        chmod +x "$BACKUP_DIR/docker-backup-command.sh"
        log_info "Comando de backup Docker criado: $BACKUP_DIR/docker-backup-command.sh"
    fi
}

# Executar migra√ß√£o TDE
execute_tde_migration() {
    log_info "üîÑ Executando migra√ß√£o TDE..."
    
    local timestamp=$(date +"%Y%m%d_%H%M%S")
    local migration_log="$LOGS_DIR/tde-migration-$timestamp.log"
    
    log_warning "‚ö†Ô∏è ATEN√á√ÉO: Esta opera√ß√£o ir√° criptografar todas as tabelas"
    log_warning "‚ö†Ô∏è Certifique-se de ter feito backup dos dados"
    
    read -p "Deseja continuar com a migra√ß√£o? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        log_info "Migra√ß√£o cancelada pelo usu√°rio"
        exit 0
    fi
    
    if command -v mysql &> /dev/null; then
        # Executar migra√ß√£o via MySQL client
        log_info "Executando migra√ß√£o via MySQL client..."
        
        mysql -u root -p"$MYSQL_ROOT_PASSWORD" "$MYSQL_DATABASE" < "$SQL_SCRIPT" > "$migration_log" 2>&1
        
        if [[ $? -eq 0 ]]; then
            log_success "Migra√ß√£o TDE executada com sucesso"
            log_info "Log da migra√ß√£o: $migration_log"
        else
            log_error "Falha na migra√ß√£o TDE - verifique $migration_log"
            return 1
        fi
    else
        log_warning "MySQL client n√£o dispon√≠vel - criando comando Docker"
        
        # Criar comando Docker para migra√ß√£o
        cat > "$LOGS_DIR/docker-migration-command.sh" << EOF
#!/bin/bash
# Comando para migra√ß√£o via Docker
docker exec -i conexao-sorte-mysql-tde mysql \\
    -u root -p\$MYSQL_ROOT_PASSWORD \\
    $MYSQL_DATABASE \\
    < $SQL_SCRIPT \\
    > $migration_log 2>&1
EOF
        chmod +x "$LOGS_DIR/docker-migration-command.sh"
        log_info "Comando de migra√ß√£o Docker criado: $LOGS_DIR/docker-migration-command.sh"
    fi
}

# Validar migra√ß√£o
validate_migration() {
    log_info "‚úÖ Validando migra√ß√£o TDE..."
    
    local timestamp=$(date +"%Y%m%d_%H%M%S")
    local validation_file="$LOGS_DIR/tde-validation-post-migration-$timestamp.txt"
    
    if command -v mysql &> /dev/null; then
        # Verificar tabelas criptografadas
        mysql -u root -p"$MYSQL_ROOT_PASSWORD" "$MYSQL_DATABASE" << 'EOF' > "$validation_file" 2>&1
-- Verificar tabelas criptografadas
SELECT 
    TABLE_NAME,
    ENGINE,
    CREATE_OPTIONS,
    CASE 
        WHEN CREATE_OPTIONS LIKE '%ENCRYPTION%' THEN '‚úÖ CRIPTOGRAFADA'
        ELSE '‚ùå N√ÉO CRIPTOGRAFADA'
    END as ENCRYPTION_STATUS,
    TABLE_ROWS,
    ROUND(((DATA_LENGTH + INDEX_LENGTH) / 1024 / 1024), 2) as SIZE_MB
FROM information_schema.TABLES 
WHERE TABLE_SCHEMA = 'conexao_de_sorte'
  AND TABLE_TYPE = 'BASE TABLE'
ORDER BY TABLE_NAME;

-- Estat√≠sticas de criptografia
SELECT 
    COUNT(*) as total_tables,
    SUM(CASE WHEN CREATE_OPTIONS LIKE '%ENCRYPTION%' THEN 1 ELSE 0 END) as encrypted_tables,
    SUM(CASE WHEN CREATE_OPTIONS NOT LIKE '%ENCRYPTION%' THEN 1 ELSE 0 END) as unencrypted_tables,
    ROUND(
        (SUM(CASE WHEN CREATE_OPTIONS LIKE '%ENCRYPTION%' THEN 1 ELSE 0 END) * 100.0 / COUNT(*)), 
        2
    ) as encryption_percentage
FROM information_schema.TABLES 
WHERE TABLE_SCHEMA = 'conexao_de_sorte'
  AND TABLE_TYPE = 'BASE TABLE';
EOF
        
        log_success "Valida√ß√£o salva em: $validation_file"
        
        # Mostrar resumo da valida√ß√£o
        local encrypted_count=$(mysql -u root -p"$MYSQL_ROOT_PASSWORD" "$MYSQL_DATABASE" -e "
            SELECT COUNT(*) 
            FROM information_schema.TABLES 
            WHERE TABLE_SCHEMA = '$MYSQL_DATABASE' 
              AND TABLE_TYPE = 'BASE TABLE' 
              AND CREATE_OPTIONS LIKE '%ENCRYPTION%';" -s -N 2>/dev/null)
        
        local total_count=$(mysql -u root -p"$MYSQL_ROOT_PASSWORD" "$MYSQL_DATABASE" -e "
            SELECT COUNT(*) 
            FROM information_schema.TABLES 
            WHERE TABLE_SCHEMA = '$MYSQL_DATABASE' 
              AND TABLE_TYPE = 'BASE TABLE';" -s -N 2>/dev/null)
        
        log_info "üìä Resumo da migra√ß√£o:"
        log_info "  Total de tabelas: $total_count"
        log_info "  Tabelas criptografadas: $encrypted_count"
        
        if [[ "$encrypted_count" -eq "$total_count" ]]; then
            log_success "‚úÖ Todas as tabelas foram criptografadas com sucesso!"
        else
            log_warning "‚ö†Ô∏è Algumas tabelas podem n√£o ter sido criptografadas"
        fi
    else
        log_warning "MySQL client n√£o dispon√≠vel - valida√ß√£o manual necess√°ria"
    fi
}

# Gerar relat√≥rio de migra√ß√£o
generate_migration_report() {
    log_info "üìã Gerando relat√≥rio de migra√ß√£o..."
    
    local timestamp=$(date +"%Y-%m-%d %H:%M:%S")
    local report_file="$LOGS_DIR/tde-migration-report-$(date +%Y%m%d_%H%M%S).md"
    
    cat > "$report_file" << EOF
# üîí Relat√≥rio de Migra√ß√£o TDE
## Conex√£o de Sorte - Transparent Data Encryption

**Data da Migra√ß√£o**: $timestamp  
**Database**: $MYSQL_DATABASE  
**Respons√°vel**: DBA + DevOps

---

## üìä Resumo da Migra√ß√£o

### ‚úÖ Tabelas Migradas
- \`usuarios\` - Dados pessoais sens√≠veis
- \`sorteios\` - Dados de neg√≥cio cr√≠ticos  
- \`participantes\` - Dados pessoais
- \`transacoes\` - Dados financeiros
- \`audit_logs\` - Logs de auditoria

### üìÅ Arquivos Gerados
- Script SQL: \`$SQL_SCRIPT\`
- Backup pr√©-migra√ß√£o: \`$BACKUP_DIR/\`
- Logs de migra√ß√£o: \`$LOGS_DIR/\`

---

## üéØ Pr√≥ximos Passos

### 1. Valida√ß√£o
- Verificar se todas as tabelas est√£o criptografadas
- Testar inser√ß√£o/consulta de dados
- Monitorar performance

### 2. Backup do Keyring
- **CR√çTICO**: Fazer backup do keyring
- Localiza√ß√£o: \`/var/lib/mysql-keyring/\`
- Comando: \`cp -r /var/lib/mysql-keyring/ /backup/keyring-$(date +%Y%m%d)/\`

### 3. Monitoramento
- Acompanhar m√©tricas de performance
- Verificar logs de erro
- Configurar alertas para falhas de criptografia

---

## ‚ö†Ô∏è Pontos Cr√≠ticos

### üîë Keyring
- **Backup obrigat√≥rio** do diret√≥rio keyring
- **Sem keyring**: Dados s√£o irrecuper√°veis
- **Permiss√µes**: 700, owner mysql

### üìä Performance
- **Overhead esperado**: 5-15%
- **Monitoramento**: M√©tricas Innodb_encryption_*
- **Otimiza√ß√£o**: Ajustar buffer pool se necess√°rio

---

**üìù Relat√≥rio gerado**: $timestamp
EOF
    
    log_success "Relat√≥rio gerado: $report_file"
}

# Fun√ß√£o principal
main() {
    log_info "üîí Iniciando migra√ß√£o de tabelas para TDE..."
    
    check_prerequisites
    setup_directories
    check_tde_status || {
        log_error "TDE n√£o est√° configurado adequadamente"
        exit 1
    }
    create_pre_migration_backup
    execute_tde_migration
    validate_migration
    generate_migration_report
    
    log_success "üéâ Migra√ß√£o TDE conclu√≠da!"
    
    echo ""
    log_info "üìã PR√ìXIMOS PASSOS CR√çTICOS:"
    echo "  1. üîë BACKUP DO KEYRING: cp -r /var/lib/mysql-keyring/ /backup/"
    echo "  2. ‚úÖ Validar dados: SELECT * FROM usuarios LIMIT 1;"
    echo "  3. üìä Monitorar performance: SHOW GLOBAL STATUS LIKE 'Innodb_encryption%';"
    echo ""
    echo "  üìÅ Logs em: $LOGS_DIR"
    echo "  üíæ Backups em: $BACKUP_DIR"
    
    log_warning "‚ö†Ô∏è CR√çTICO: Fa√ßa backup do keyring IMEDIATAMENTE!"
}

# Executar fun√ß√£o principal
main "$@"
