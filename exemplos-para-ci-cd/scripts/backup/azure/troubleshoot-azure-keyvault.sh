#!/bin/bash

# üîç TROUBLESHOOTING: Azure Key Vault Init Container
# ‚úÖ Execute este script no servidor para debug detalhado

set -euo pipefail

echo "üîç TROUBLESHOOTING: Azure Key Vault Init Container"
echo "=================================================="

# 1. Verificar se o container falhou
echo "üìä Status dos containers:"
docker compose -f docker-compose.prod.yml ps

# 2. Verificar logs detalhados do init container
echo ""
echo "üìã Logs do init container azure-secrets:"
echo "========================================"
docker compose -f docker-compose.prod.yml logs azure-secrets

# 3. Verificar se as vari√°veis de ambiente est√£o corretas
echo ""
echo "üîç Vari√°veis de ambiente do arquivo .env:"
echo "========================================="
if [[ -f ".env" ]]; then
    echo "‚úÖ Arquivo .env encontrado"
    grep -E "AZURE_" .env | while read line; do
        var_name=$(echo "$line" | cut -d'=' -f1)
        var_value=$(echo "$line" | cut -d'=' -f2)
        echo "   $var_name: ${var_value:0:20}..."
    done
else
    echo "‚ùå Arquivo .env n√£o encontrado"
fi

# 4. Teste manual do Azure CLI (se dispon√≠vel)
echo ""
echo "üß™ Teste manual Azure CLI:"
echo "=========================="
if command -v az > /dev/null 2>&1; then
    echo "‚úÖ Azure CLI dispon√≠vel no host"
    
    # Carregar vari√°veis
    set -a
    source .env 2>/dev/null || true
    set +a
    
    echo "üîë Testando login..."
    if az login --service-principal \
        --username "$AZURE_CLIENT_ID" \
        --password "$AZURE_CLIENT_SECRET" \
        --tenant "$AZURE_TENANT_ID" \
        --output none 2>/dev/null; then
        echo "‚úÖ Login no Azure funciona"
        
        echo "üóùÔ∏è Testando acesso ao Key Vault..."
        if az keyvault secret list --vault-name "$AZURE_KEYVAULT_NAME" --output none 2>/dev/null; then
            echo "‚úÖ Acesso ao Key Vault funciona"
            
            echo "üîç Secrets dispon√≠veis:"
            az keyvault secret list --vault-name "$AZURE_KEYVAULT_NAME" --query "[].name" -o table
            
            echo "üîê Testando secrets espec√≠ficos:"
            for secret in "<db-password-secret>" "<db-root-secret>"; do
                if az keyvault secret show --vault-name "$AZURE_KEYVAULT_NAME" --name "$secret" --query "name" -o tsv > /dev/null 2>&1; then
                    echo "   ‚úÖ $secret: EXISTE"
                else
                    echo "   ‚ùå $secret: N√ÉO EXISTE"
                fi
            done
        else
            echo "‚ùå Falha no acesso ao Key Vault"
        fi
        
        # Logout
        az logout 2>/dev/null || true
    else
        echo "‚ùå Falha no login do Azure"
    fi
else
    echo "‚ö†Ô∏è Azure CLI n√£o dispon√≠vel no host"
fi

# 5. Verificar volumes
echo ""
echo "üìÅ Volumes Docker:"
echo "=================="
docker volume ls | grep -E "(mysql_secrets|mysql_data)" || echo "‚ö†Ô∏è Volumes n√£o encontrados"

# 6. Sugest√µes de corre√ß√£o
echo ""
echo "üí° SUGEST√ïES DE CORRE√á√ÉO:"
echo "========================"
echo "1. Verificar se GitHub Actions Secrets est√£o corretos"
echo "2. Verificar se Service Principal tem permiss√£o no Key Vault"
echo "3. Verificar se os nomes dos secrets est√£o corretos"
echo "4. Re-executar: docker compose -f docker-compose.prod.yml up azure-secrets"
echo "5. Verificar conectividade de rede com Azure"

echo ""
echo "üîß COMANDOS √öTEIS:"
echo "=================="
echo "# Ver logs em tempo real:"
echo "docker compose -f docker-compose.prod.yml logs -f azure-secrets"
echo ""
echo "# Executar apenas o init container:"
echo "docker compose -f docker-compose.prod.yml up azure-secrets"
echo ""
echo "# Limpar e recriar:"
echo "docker compose -f docker-compose.prod.yml down && docker compose -f docker-compose.prod.yml up azure-secrets"

echo ""
echo "üèÅ Troubleshooting conclu√≠do!"
