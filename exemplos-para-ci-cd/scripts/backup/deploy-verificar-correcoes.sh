#!/bin/bash

# =============================================================================
# SCRIPT DE DEPLOY E VERIFICA√á√ÉO - CORRE√á√ïES DE EXTRA√á√ÉO
# =============================================================================
# Faz deploy das corre√ß√µes e verifica se os erros foram resolvidos
# =============================================================================

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}üöÄ DEPLOY E VERIFICA√á√ÉO - CORRE√á√ïES DE EXTRA√á√ÉO${NC}"
echo "=================================================="

# Verificar se estamos no diret√≥rio correto
if [ ! -f "pom.xml" ]; then
    echo -e "${RED}‚ùå Erro: Execute este script na raiz do projeto${NC}"
    exit 1
fi

echo -e "${YELLOW}üìã Iniciando processo de deploy e verifica√ß√£o...${NC}"

# 1. Verificar se h√° mudan√ßas n√£o commitadas
echo -e "${BLUE}1. Verificando mudan√ßas n√£o commitadas...${NC}"
if [ -n "$(git status --porcelain)" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  H√° mudan√ßas n√£o commitadas:${NC}"
    git status --short
    echo ""
    echo -e "${YELLOW}üí° Execute: ./scripts/commit-correcoes-extracao.sh${NC}"
    exit 1
else
    echo -e "${GREEN}‚úÖ Nenhuma mudan√ßa pendente${NC}"
fi

# 2. Verificar se estamos na branch correta
echo -e "${BLUE}2. Verificando branch atual...${NC}"
CURRENT_BRANCH=$(git branch --show-current)
echo -e "${YELLOW}Branch atual: $CURRENT_BRANCH${NC}"

if [ "$CURRENT_BRANCH" != "main" ] && [ "$CURRENT_BRANCH" != "master" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Voc√™ est√° na branch: $CURRENT_BRANCH${NC}"
    echo -e "${YELLOW}üí° Considere fazer merge para main/master antes do deploy${NC}"
fi

# 3. Verificar se h√° commits recentes
echo -e "${BLUE}3. Verificando commits recentes...${NC}"
RECENT_COMMITS=$(git log --oneline -5)
echo -e "${YELLOW}√öltimos 5 commits:${NC}"
echo "$RECENT_COMMITS"

# 4. Verificar configura√ß√µes de extra√ß√£o
echo -e "${BLUE}4. Verificando configura√ß√µes de extra√ß√£o...${NC}"
if [ -f "scripts/testar-aplicacao-extracao.sh" ]; then
    echo -e "${YELLOW}Executando teste de configura√ß√£o...${NC}"
    if ./scripts/testar-aplicacao-extracao.sh; then
        echo -e "${GREEN}‚úÖ Configura√ß√µes de extra√ß√£o est√£o corretas${NC}"
    else
        echo -e "${RED}‚ùå Problemas encontrados nas configura√ß√µes${NC}"
        exit 1
    fi
else
    echo -e "${RED}‚ùå Script de teste n√£o encontrado${NC}"
    exit 1
fi

# 5. Verificar se h√° scripts de deploy dispon√≠veis
echo -e "${BLUE}5. Verificando scripts de deploy...${NC}"
if [ -f "deploy/scripts/deploy-manual.sh" ]; then
    echo -e "${GREEN}‚úÖ Script de deploy encontrado${NC}"
    DEPLOY_SCRIPT="deploy/scripts/deploy-manual.sh"
elif [ -f "scripts/deploy.sh" ]; then
    echo -e "${GREEN}‚úÖ Script de deploy encontrado${NC}"
    DEPLOY_SCRIPT="scripts/deploy.sh"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Script de deploy n√£o encontrado${NC}"
    echo -e "${YELLOW}üí° Execute o deploy manualmente${NC}"
    DEPLOY_SCRIPT=""
fi

# 6. Executar deploy se dispon√≠vel
if [ -n "$DEPLOY_SCRIPT" ]; then
    echo -e "${BLUE}6. Executando deploy...${NC}"
    echo -e "${YELLOW}Executando: $DEPLOY_SCRIPT${NC}"

    # Perguntar se deve executar o deploy
    read -p "Deseja executar o deploy agora? (y/N): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        if bash "$DEPLOY_SCRIPT"; then
            echo -e "${GREEN}‚úÖ Deploy executado com sucesso${NC}"
        else
            echo -e "${RED}‚ùå Erro no deploy${NC}"
            exit 1
        fi
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Deploy pulado${NC}"
    fi
fi

# 7. Verificar logs do servidor
echo -e "${BLUE}7. Verificando logs do servidor...${NC}"
echo -e "${YELLOW}üí° Para verificar os logs, execute:${NC}"
echo -e "${YELLOW}   docker logs conexao-backend-green --tail 50${NC}"
echo -e "${YELLOW}   docker logs conexao-backend-blue --tail 50${NC}"

# 8. Verificar endpoints de sa√∫de
echo -e "${BLUE}8. Verificando endpoints de sa√∫de...${NC}"
echo -e "${YELLOW}üí° Para verificar a sa√∫de da aplica√ß√£o:${NC}"
echo -e "${YELLOW}   curl -s http://localhost:8080/actuator/health | jq${NC}"
echo -e "${YELLOW}   curl -s http://localhost:8080/api/rawdata | jq${NC}"

# 9. Verificar se o erro de express√£o cron foi resolvido
echo -e "${BLUE}9. Verificando se o erro de express√£o cron foi resolvido...${NC}"
echo -e "${YELLOW}üí° Procure por estas mensagens nos logs:${NC}"
echo -e "${GREEN}‚úÖ 'OrquestradorExtracoes inicializado'${NC}"
echo -e "${GREEN}‚úÖ 'Extra√ß√£o autom√°tica: true'${NC}"
echo -e "${RED}‚ùå 'Cron expression must consist of 6 fields' (n√£o deve aparecer)${NC}"

echo ""
echo -e "${BLUE}üìä RESUMO DO PROCESSO${NC}"
echo "=================================================="
echo -e "${GREEN}‚úÖ Configura√ß√µes de extra√ß√£o corrigidas${NC}"
echo -e "${GREEN}‚úÖ Express√£o cron corrigida para 6 campos${NC}"
echo -e "${GREEN}‚úÖ Scripts de teste criados${NC}"
echo -e "${GREEN}‚úÖ Commit realizado${NC}"

if [ -n "$DEPLOY_SCRIPT" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Deploy dispon√≠vel: $DEPLOY_SCRIPT${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Deploy deve ser executado manualmente${NC}"
fi

echo ""
echo -e "${BLUE}üéØ PR√ìXIMOS PASSOS${NC}"
echo "=================================================="
echo -e "${YELLOW}1. Execute o deploy se ainda n√£o foi feito${NC}"
echo -e "${YELLOW}2. Monitore os logs do servidor${NC}"
echo -e "${YELLOW}3. Verifique se o erro de express√£o cron foi resolvido${NC}"
echo -e "${YELLOW}4. Teste os endpoints de sa√∫de${NC}"
echo -e "${YELLOW}5. Verifique se as extra√ß√µes est√£o funcionando${NC}"

echo ""
echo -e "${GREEN}‚úÖ Processo conclu√≠do!${NC}"
