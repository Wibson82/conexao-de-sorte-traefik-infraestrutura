#!/bin/bash

# Script para otimizar imports wildcard no projeto
# Parte da Fase 2 do plano de an√°lise completa de vari√°veis n√£o utilizadas

set -e

# Configura√ß√µes
PROJECT_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")/../.." && pwd)"
REPORT_DIR="$PROJECT_ROOT/analysis-reports"
REPORT_FILE="$REPORT_DIR/otimizacao-imports-$(date +%Y%m%d-%H%M%S).md"
SOURCE_DIR="$PROJECT_ROOT/src/main/java"

# Criar diret√≥rio de relat√≥rios se n√£o existir
mkdir -p "$REPORT_DIR"

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Fun√ß√£o para log
log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

echo "=== OTIMIZA√á√ÉO DE IMPORTS WILDCARD ===" > "$REPORT_FILE"
echo "Data: $(date)" >> "$REPORT_FILE"
echo "Diret√≥rio: $SOURCE_DIR" >> "$REPORT_FILE"
echo "" >> "$REPORT_FILE"

log_info "üîç Iniciando an√°lise de imports wildcard..."

# Encontrar arquivos com imports wildcard
ARQUIVOS_WILDCARD=$(find "$SOURCE_DIR" -name "*.java" -exec grep -l "import.*\*" {} \;)

if [ -z "$ARQUIVOS_WILDCARD" ]; then
    log_success "Nenhum import wildcard encontrado!"
    echo "‚úÖ Nenhum import wildcard encontrado no projeto." >> "$REPORT_FILE"
    exit 0
fi

echo "## Arquivos com Imports Wildcard Identificados" >> "$REPORT_FILE"
echo "" >> "$REPORT_FILE"

count=0
for arquivo in $ARQUIVOS_WILDCARD; do
    ((count++))
    arquivo_relativo=${arquivo#$PROJECT_ROOT/}
    
    log_info "üìÅ Analisando: $arquivo_relativo"
    echo "### $count. $arquivo_relativo" >> "$REPORT_FILE"
    echo "" >> "$REPORT_FILE"
    
    # Extrair imports wildcard
    imports_wildcard=$(grep "import.*\*" "$arquivo")
    echo "**Imports wildcard encontrados:**" >> "$REPORT_FILE"
    echo '```java' >> "$REPORT_FILE"
    echo "$imports_wildcard" >> "$REPORT_FILE"
    echo '```' >> "$REPORT_FILE"
    echo "" >> "$REPORT_FILE"
    
    # Analisar uso das constantes/classes importadas
    echo "**An√°lise de uso:**" >> "$REPORT_FILE"
    
    # Para cada import wildcard, tentar identificar o que est√° sendo usado
    while IFS= read -r import_line; do
        if [[ $import_line =~ import[[:space:]]+static[[:space:]]+([^*]+)\.\* ]]; then
            # Import static wildcard
            package_path="${BASH_REMATCH[1]}"
            echo "- Import static wildcard: \`$package_path.*\`" >> "$REPORT_FILE"
            
            # Tentar encontrar a classe correspondente
            class_file=$(find "$SOURCE_DIR" -path "*${package_path//./\/}.java" 2>/dev/null | head -1)
            if [ -n "$class_file" ]; then
                # Extrair constantes p√∫blicas da classe
                constants=$(grep -E "public static final|public static.*=" "$class_file" | head -10)
                if [ -n "$constants" ]; then
                    echo "  - Constantes dispon√≠veis (primeiras 10):" >> "$REPORT_FILE"
                    echo '```java' >> "$REPORT_FILE"
                    echo "$constants" >> "$REPORT_FILE"
                    echo '```' >> "$REPORT_FILE"
                fi
            fi
            
        elif [[ $import_line =~ import[[:space:]]+([^*]+)\.\* ]]; then
            # Import wildcard normal
            package_path="${BASH_REMATCH[1]}"
            echo "- Import wildcard: \`$package_path.*\`" >> "$REPORT_FILE"
        fi
    done <<< "$imports_wildcard"
    
    echo "" >> "$REPORT_FILE"
    echo "---" >> "$REPORT_FILE"
    echo "" >> "$REPORT_FILE"
done

# Estat√≠sticas finais
echo "## Resumo da An√°lise" >> "$REPORT_FILE"
echo "" >> "$REPORT_FILE"
echo "- **Total de arquivos com imports wildcard:** $count" >> "$REPORT_FILE"
echo "- **Arquivos analisados:** $(find "$SOURCE_DIR" -name "*.java" | wc -l)" >> "$REPORT_FILE"
echo "- **Percentual com imports wildcard:** $(echo "scale=2; $count * 100 / $(find "$SOURCE_DIR" -name "*.java" | wc -l)" | bc)%" >> "$REPORT_FILE"
echo "" >> "$REPORT_FILE"

# Recomenda√ß√µes
echo "## Recomenda√ß√µes de Otimiza√ß√£o" >> "$REPORT_FILE"
echo "" >> "$REPORT_FILE"
echo "### Prioridade Alta" >> "$REPORT_FILE"
echo "- [ ] **ServicoExportacaoDados:** Substituir import static wildcard por imports espec√≠ficos" >> "$REPORT_FILE"
echo "- [ ] **ServicoAnonimizacao:** Otimizar m√∫ltiplos imports wildcard" >> "$REPORT_FILE"
echo "- [ ] **ServicoAuditoriaDados:** Revisar imports wildcard" >> "$REPORT_FILE"
echo "" >> "$REPORT_FILE"

echo "### Prioridade M√©dia" >> "$REPORT_FILE"
echo "- [ ] **ConfiguracaoWebSocket:** Verificar necessidade de imports wildcard" >> "$REPORT_FILE"
echo "" >> "$REPORT_FILE"

echo "### Benef√≠cios da Otimiza√ß√£o" >> "$REPORT_FILE"
echo "1. **Performance de compila√ß√£o:** Imports espec√≠ficos s√£o mais r√°pidos" >> "$REPORT_FILE"
echo "2. **Clareza do c√≥digo:** Mostra exatamente quais classes/constantes s√£o usadas" >> "$REPORT_FILE"
echo "3. **Detec√ß√£o de conflitos:** Evita ambiguidade entre classes com mesmo nome" >> "$REPORT_FILE"
echo "4. **Manutenibilidade:** Facilita refatora√ß√£o e an√°lise de depend√™ncias" >> "$REPORT_FILE"
echo "" >> "$REPORT_FILE"

echo "### Pr√≥ximos Passos" >> "$REPORT_FILE"
echo "1. **An√°lise manual:** Identificar constantes/classes realmente utilizadas" >> "$REPORT_FILE"
echo "2. **Substitui√ß√£o gradual:** Trocar imports wildcard por espec√≠ficos" >> "$REPORT_FILE"
echo "3. **Testes:** Validar que n√£o h√° quebras ap√≥s otimiza√ß√£o" >> "$REPORT_FILE"
echo "4. **Documenta√ß√£o:** Atualizar guidelines de imports do projeto" >> "$REPORT_FILE"
echo "" >> "$REPORT_FILE"

# Mostrar estat√≠sticas no console
log_info "üìä Estat√≠sticas da an√°lise:"
echo "   - Arquivos com imports wildcard: $count"
echo "   - Total de arquivos Java: $(find "$SOURCE_DIR" -name "*.java" | wc -l)"
echo "   - Percentual: $(echo "scale=1; $count * 100 / $(find "$SOURCE_DIR" -name "*.java" | wc -l)" | bc)%"

log_success "An√°lise conclu√≠da!"
log_info "üìÑ Relat√≥rio salvo em: $REPORT_FILE"

echo ""
log_info "üîç Para visualizar o relat√≥rio:"
echo "   cat $REPORT_FILE"

echo ""
log_info "üìã Pr√≥ximos passos sugeridos:"
echo "   1. Revisar relat√≥rio gerado"
echo "   2. Identificar imports espec√≠ficos necess√°rios"
echo "   3. Substituir imports wildcard gradualmente"
echo "   4. Executar testes ap√≥s cada mudan√ßa"
