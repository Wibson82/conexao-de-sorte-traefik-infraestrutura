#!/bin/bash

# Script para analisar m√©todos privados em DTOs
# Parte da Fase 2 do plano de an√°lise completa de vari√°veis n√£o utilizadas

set -e

# Configura√ß√µes
PROJECT_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")/../.." && pwd)"
REPORT_DIR="$PROJECT_ROOT/analysis-reports"
REPORT_FILE="$REPORT_DIR/analise-metodos-privados-dtos-$(date +%Y%m%d-%H%M%S).md"
SOURCE_DIR="$PROJECT_ROOT/src/main/java"

# Criar diret√≥rio de relat√≥rios se n√£o existir
mkdir -p "$REPORT_DIR"

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Fun√ß√£o para log
log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

echo "=== AN√ÅLISE DE M√âTODOS PRIVADOS EM DTOs ===" > "$REPORT_FILE"
echo "Data: $(date)" >> "$REPORT_FILE"
echo "Diret√≥rio: $SOURCE_DIR" >> "$REPORT_FILE"
echo "" >> "$REPORT_FILE"

log_info "üîç Iniciando an√°lise de m√©todos privados em DTOs..."

# Encontrar arquivos DTO
ARQUIVOS_DTO=$(find "$SOURCE_DIR" -name "*DTO.java" -o -name "*Dto.java" -o -path "*/dto/*" -name "*.java")

if [ -z "$ARQUIVOS_DTO" ]; then
    log_warning "Nenhum arquivo DTO encontrado!"
    echo "‚ö†Ô∏è Nenhum arquivo DTO encontrado no projeto." >> "$REPORT_FILE"
    exit 0
fi

echo "## DTOs com M√©todos Privados Analisados" >> "$REPORT_FILE"
echo "" >> "$REPORT_FILE"

count=0
dtos_com_metodos_privados=0
metodos_utilizados=0
metodos_nao_utilizados=0

for arquivo in $ARQUIVOS_DTO; do
    arquivo_relativo=${arquivo#$PROJECT_ROOT/}
    
    # Verificar se tem m√©todos privados
    metodos_privados=$(grep -n "private.*(" "$arquivo" 2>/dev/null | grep -v "private final\|private static final\|private.*=" || true)
    
    if [ -n "$metodos_privados" ]; then
        ((count++))
        ((dtos_com_metodos_privados++))
        
        log_info "üìÅ Analisando: $arquivo_relativo"
        echo "### $count. $arquivo_relativo" >> "$REPORT_FILE"
        echo "" >> "$REPORT_FILE"
        
        echo "**M√©todos privados encontrados:**" >> "$REPORT_FILE"
        echo '```java' >> "$REPORT_FILE"
        echo "$metodos_privados" >> "$REPORT_FILE"
        echo '```' >> "$REPORT_FILE"
        echo "" >> "$REPORT_FILE"
        
        # Analisar uso de cada m√©todo privado
        echo "**An√°lise de uso:**" >> "$REPORT_FILE"
        
        while IFS= read -r linha_metodo; do
            if [[ $linha_metodo =~ private.*[[:space:]]+([a-zA-Z_][a-zA-Z0-9_]*)[[:space:]]*\( ]]; then
                nome_metodo="${BASH_REMATCH[1]}"
                
                # Verificar se o m√©todo √© usado no arquivo
                uso_count=$(grep -c "$nome_metodo" "$arquivo" 2>/dev/null || echo "0")
                
                if [ "$uso_count" -gt 1 ]; then
                    echo "- ‚úÖ \`$nome_metodo()\`: **UTILIZADO** ($((uso_count - 1)) refer√™ncias)" >> "$REPORT_FILE"
                    ((metodos_utilizados++))
                else
                    echo "- ‚ùå \`$nome_metodo()\`: **N√ÉO UTILIZADO** (apenas declara√ß√£o)" >> "$REPORT_FILE"
                    ((metodos_nao_utilizados++))
                fi
            fi
        done <<< "$metodos_privados"
        
        echo "" >> "$REPORT_FILE"
        
        # Verificar padr√µes comuns em DTOs
        echo "**Padr√µes identificados:**" >> "$REPORT_FILE"
        
        # Verificar se √© um record
        if grep -q "public record" "$arquivo"; then
            echo "- üìã **Record**: M√©todos privados podem ser auxiliares para valida√ß√£o" >> "$REPORT_FILE"
        fi
        
        # Verificar se tem Builder pattern
        if grep -q "Builder\|builder" "$arquivo"; then
            echo "- üèóÔ∏è **Builder Pattern**: M√©todos privados podem ser auxiliares do builder" >> "$REPORT_FILE"
        fi
        
        # Verificar se tem toString customizado
        if grep -q "toString()" "$arquivo"; then
            echo "- üìù **toString() customizado**: M√©todos privados podem ser formatadores" >> "$REPORT_FILE"
        fi
        
        # Verificar se tem valida√ß√µes
        if grep -q "validar\|validate" "$arquivo"; then
            echo "- ‚úÖ **Valida√ß√µes**: M√©todos privados podem ser validadores" >> "$REPORT_FILE"
        fi
        
        echo "" >> "$REPORT_FILE"
        echo "---" >> "$REPORT_FILE"
        echo "" >> "$REPORT_FILE"
    fi
done

# Estat√≠sticas finais
echo "## Resumo da An√°lise" >> "$REPORT_FILE"
echo "" >> "$REPORT_FILE"
echo "- **Total de arquivos DTO:** $(echo "$ARQUIVOS_DTO" | wc -l)" >> "$REPORT_FILE"
echo "- **DTOs com m√©todos privados:** $dtos_com_metodos_privados" >> "$REPORT_FILE"
echo "- **M√©todos privados utilizados:** $metodos_utilizados" >> "$REPORT_FILE"
echo "- **M√©todos privados n√£o utilizados:** $metodos_nao_utilizados" >> "$REPORT_FILE"
echo "- **Taxa de utiliza√ß√£o:** $(echo "scale=1; $metodos_utilizados * 100 / ($metodos_utilizados + $metodos_nao_utilizados)" | bc 2>/dev/null || echo "N/A")%" >> "$REPORT_FILE"
echo "" >> "$REPORT_FILE"

# Recomenda√ß√µes
echo "## Recomenda√ß√µes" >> "$REPORT_FILE"
echo "" >> "$REPORT_FILE"

if [ $metodos_nao_utilizados -gt 0 ]; then
    echo "### ‚ö†Ô∏è A√ß√£o Requerida" >> "$REPORT_FILE"
    echo "- [ ] **Revisar m√©todos n√£o utilizados:** $metodos_nao_utilizados m√©todos identificados" >> "$REPORT_FILE"
    echo "- [ ] **Verificar se s√£o necess√°rios:** Alguns podem ser prepara√ß√£o para funcionalidades futuras" >> "$REPORT_FILE"
    echo "- [ ] **Remover se desnecess√°rios:** Limpar c√≥digo n√£o utilizado" >> "$REPORT_FILE"
    echo "" >> "$REPORT_FILE"
fi

echo "### ‚úÖ Boas Pr√°ticas Identificadas" >> "$REPORT_FILE"
echo "- **M√©todos de valida√ß√£o:** Auxiliares para garantir integridade dos dados" >> "$REPORT_FILE"
echo "- **M√©todos de formata√ß√£o:** Para toString() e serializa√ß√£o customizada" >> "$REPORT_FILE"
echo "- **M√©todos auxiliares do Builder:** Para constru√ß√£o segura de objetos" >> "$REPORT_FILE"
echo "" >> "$REPORT_FILE"

echo "### üìã Diretrizes para DTOs" >> "$REPORT_FILE"
echo "1. **M√©todos privados em DTOs devem ter prop√≥sito claro:**" >> "$REPORT_FILE"
echo "   - Valida√ß√£o de dados" >> "$REPORT_FILE"
echo "   - Formata√ß√£o para serializa√ß√£o" >> "$REPORT_FILE"
echo "   - Auxiliares para Builder pattern" >> "$REPORT_FILE"
echo "" >> "$REPORT_FILE"
echo "2. **Evitar l√≥gica de neg√≥cio em DTOs:**" >> "$REPORT_FILE"
echo "   - DTOs devem ser objetos de transfer√™ncia simples" >> "$REPORT_FILE"
echo "   - L√≥gica complexa deve estar em Services" >> "$REPORT_FILE"
echo "" >> "$REPORT_FILE"
echo "3. **Preferir Records quando poss√≠vel:**" >> "$REPORT_FILE"
echo "   - Records reduzem boilerplate" >> "$REPORT_FILE"
echo "   - Valida√ß√£o no construtor compacto" >> "$REPORT_FILE"
echo "" >> "$REPORT_FILE"

# Mostrar estat√≠sticas no console
log_info "üìä Estat√≠sticas da an√°lise:"
echo "   - DTOs analisados: $(echo "$ARQUIVOS_DTO" | wc -l)"
echo "   - DTOs com m√©todos privados: $dtos_com_metodos_privados"
echo "   - M√©todos utilizados: $metodos_utilizados"
echo "   - M√©todos n√£o utilizados: $metodos_nao_utilizados"

if [ $metodos_nao_utilizados -gt 0 ]; then
    log_warning "Encontrados $metodos_nao_utilizados m√©todos privados n√£o utilizados"
else
    log_success "Todos os m√©todos privados em DTOs est√£o sendo utilizados adequadamente!"
fi

log_success "An√°lise conclu√≠da!"
log_info "üìÑ Relat√≥rio salvo em: $REPORT_FILE"

echo ""
log_info "üîç Para visualizar o relat√≥rio:"
echo "   cat $REPORT_FILE"

echo ""
log_info "üìã Pr√≥ximos passos sugeridos:"
echo "   1. Revisar m√©todos n√£o utilizados identificados"
echo "   2. Verificar se s√£o necess√°rios para funcionalidades futuras"
echo "   3. Remover m√©todos desnecess√°rios"
echo "   4. Documentar m√©todos auxiliares importantes"
