#!/bin/bash

# ===== SCRIPT DE DIAGN√ìSTICO DOS SCHEDULERS =====
# Script para diagnosticar problemas com schedulers n√£o executando
# Autor: Sistema de Diagn√≥stico Automatizado
# Data: $(date +"%d/%m/%Y")

set -euo pipefail

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para log com timestamp
log() {
    echo -e "[$(date +'%Y-%m-%d %H:%M:%S')] $1"
}

log_info() {
    log "${BLUE}‚ÑπÔ∏è  INFO: $1${NC}"
}

log_success() {
    log "${GREEN}‚úÖ SUCCESS: $1${NC}"
}

log_warning() {
    log "${YELLOW}‚ö†Ô∏è  WARNING: $1${NC}"
}

log_error() {
    log "${RED}‚ùå ERROR: $1${NC}"
}

echo "====================================================="
echo "üîç DIAGN√ìSTICO DOS SCHEDULERS - CONEX√ÉO DE SORTE"
echo "====================================================="
echo ""

# 1. Verificar timezone do sistema
log_info "Verificando timezone do sistema..."
echo "üìã Timezone atual: $(timedatectl show --property=Timezone --value 2>/dev/null || date +%Z)"
echo "üïê Data/hora atual: $(date)"
echo "üåç Data/hora UTC: $(date -u)"
echo "üáßüá∑ Data/hora S√£o Paulo: $(TZ='America/Sao_Paulo' date)"
echo ""

# 2. Verificar se aplica√ß√£o est√° rodando
log_info "Verificando se aplica√ß√£o est√° rodando..."
if docker ps | grep -q conexao-backend; then
    CONTAINER_NAME=$(docker ps --format "{{.Names}}" | grep conexao-backend | head -1)
    log_success "Container encontrado: $CONTAINER_NAME"
    
    # Verificar timezone do container
    log_info "Verificando timezone do container..."
    echo "üìã Timezone do container: $(docker exec $CONTAINER_NAME date 2>/dev/null || echo 'N√£o acess√≠vel')"
    echo "üåç UTC do container: $(docker exec $CONTAINER_NAME date -u 2>/dev/null || echo 'N√£o acess√≠vel')"
    
    # Verificar vari√°veis de ambiente relacionadas ao timezone
    log_info "Verificando vari√°veis de ambiente do container..."
    docker exec $CONTAINER_NAME env | grep -E "(TZ|TIMEZONE|JAVA_OPTS)" || echo "Nenhuma vari√°vel de timezone encontrada"
    
else
    log_error "Nenhum container da aplica√ß√£o encontrado!"
    echo "Containers rodando:"
    docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
    exit 1
fi
echo ""

# 3. Verificar logs da aplica√ß√£o para schedulers
log_info "Verificando logs da aplica√ß√£o para schedulers..."
echo "üìã √öltimos logs relacionados a schedulers:"
docker logs $CONTAINER_NAME --since="1h" 2>&1 | grep -i -E "(scheduler|agendamento|cron|@scheduled|extrac)" | tail -20 || echo "Nenhum log de scheduler encontrado na √∫ltima hora"
echo ""

# 4. Verificar se endpoint de diagn√≥stico est√° dispon√≠vel
log_info "Verificando endpoint de diagn√≥stico..."
if curl -f -s http://localhost:8080/api/diagnostico/schedulers > /tmp/diagnostico.json 2>/dev/null; then
    log_success "Endpoint de diagn√≥stico acess√≠vel"
    echo "üìä Resultado do diagn√≥stico:"
    cat /tmp/diagnostico.json | python3 -m json.tool 2>/dev/null || cat /tmp/diagnostico.json
else
    log_warning "Endpoint de diagn√≥stico n√£o acess√≠vel"
    echo "Tentando acessar health check..."
    curl -f -s http://localhost:8080/actuator/health | python3 -m json.tool 2>/dev/null || echo "Health check tamb√©m n√£o acess√≠vel"
fi
echo ""

# 5. Verificar configura√ß√£o do Spring Scheduling
log_info "Verificando configura√ß√£o do Spring Scheduling..."
if curl -f -s http://localhost:8080/api/diagnostico/spring-scheduling > /tmp/spring-scheduling.json 2>/dev/null; then
    echo "üìä Configura√ß√£o do Spring Scheduling:"
    cat /tmp/spring-scheduling.json | python3 -m json.tool 2>/dev/null || cat /tmp/spring-scheduling.json
else
    log_warning "N√£o foi poss√≠vel verificar configura√ß√£o do Spring Scheduling"
fi
echo ""

# 6. For√ßar execu√ß√£o do teste de scheduler
log_info "For√ßando execu√ß√£o do teste de scheduler..."
if curl -f -s http://localhost:8080/api/diagnostico/teste-scheduler > /tmp/teste-scheduler.json 2>/dev/null; then
    log_success "Teste de scheduler executado"
    echo "üìä Resultado do teste:"
    cat /tmp/teste-scheduler.json | python3 -m json.tool 2>/dev/null || cat /tmp/teste-scheduler.json
else
    log_warning "N√£o foi poss√≠vel executar teste de scheduler"
fi
echo ""

# 7. Verificar logs em tempo real por alguns segundos
log_info "Monitorando logs em tempo real por 30 segundos..."
echo "üì∫ Logs em tempo real (pressione Ctrl+C para parar):"
timeout 30s docker logs -f $CONTAINER_NAME 2>&1 | grep -i -E "(scheduler|agendamento|cron|@scheduled|extrac|erro|error)" || true
echo ""

# 8. Verificar configura√ß√£o de hor√°rios v√°lidos
log_info "Verificando configura√ß√£o de hor√°rios v√°lidos..."
echo "üìã Tentando acessar configura√ß√£o de hor√°rios..."
curl -f -s "http://localhost:8080/rest/v1/horarios-validos/hoje" 2>/dev/null | python3 -m json.tool 2>/dev/null || echo "Endpoint de hor√°rios v√°lidos n√£o acess√≠vel"
echo ""

# 9. Verificar se h√° resultados recentes
log_info "Verificando resultados recentes..."
echo "üìã √öltimos resultados extra√≠dos:"
curl -f -s "http://localhost:8080/rest/v1/resultados/publico/ultimo/rio" 2>/dev/null | python3 -m json.tool 2>/dev/null || echo "Endpoint de resultados n√£o acess√≠vel"
echo ""

# 10. Verificar configura√ß√£o do banco de dados
log_info "Verificando conex√£o com banco de dados..."
if docker exec $CONTAINER_NAME curl -f -s http://localhost:8080/actuator/health/db > /tmp/db-health.json 2>/dev/null; then
    echo "üìä Status do banco de dados:"
    cat /tmp/db-health.json | python3 -m json.tool 2>/dev/null || cat /tmp/db-health.json
else
    log_warning "N√£o foi poss√≠vel verificar status do banco de dados"
fi
echo ""

# 11. Resumo e recomenda√ß√µes
echo "====================================================="
echo "üìã RESUMO DO DIAGN√ìSTICO"
echo "====================================================="
echo ""

log_info "Verifica√ß√µes realizadas:"
echo "‚úì Timezone do sistema e container"
echo "‚úì Status da aplica√ß√£o"
echo "‚úì Logs de schedulers"
echo "‚úì Endpoints de diagn√≥stico"
echo "‚úì Configura√ß√£o do Spring Scheduling"
echo "‚úì Teste for√ßado de scheduler"
echo "‚úì Monitoramento em tempo real"
echo "‚úì Configura√ß√£o de hor√°rios v√°lidos"
echo "‚úì Resultados recentes"
echo "‚úì Status do banco de dados"
echo ""

log_info "Poss√≠veis causas dos schedulers n√£o executarem:"
echo "1. üïê Timezone incorreto (deve ser America/Sao_Paulo)"
echo "2. üîß @EnableScheduling n√£o configurado"
echo "3. üìã Hor√°rios v√°lidos n√£o configurados no banco"
echo "4. üö´ Schedulers desabilitados por configura√ß√£o"
echo "5. üíæ Problemas de conex√£o com banco de dados"
echo "6. üîÑ Aplica√ß√£o n√£o inicializou completamente"
echo "7. ‚öôÔ∏è Configura√ß√£o de TaskScheduler incorreta"
echo ""

log_info "Pr√≥ximos passos recomendados:"
echo "1. Verificar se timezone est√° correto em todos os n√≠veis"
echo "2. Confirmar se @EnableScheduling est√° ativo"
echo "3. Verificar configura√ß√£o de hor√°rios v√°lidos no banco"
echo "4. Revisar logs da aplica√ß√£o para erros de inicializa√ß√£o"
echo "5. Testar schedulers manualmente via endpoints"
echo "6. Verificar se h√° bloqueios de seguran√ßa"
echo ""

# Limpeza
rm -f /tmp/diagnostico.json /tmp/spring-scheduling.json /tmp/teste-scheduler.json /tmp/db-health.json 2>/dev/null || true

log_success "Diagn√≥stico conclu√≠do!"
echo "====================================================="