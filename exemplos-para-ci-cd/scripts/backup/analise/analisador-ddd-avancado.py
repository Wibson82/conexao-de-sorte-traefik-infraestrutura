#!/usr/bin/env python3
"""
Analisador Avan√ßado DDD/SOLID - Conex√£o de Sorte
An√°lise detalhada de viola√ß√µes, redund√¢ncias e oportunidades de melhoria
"""

import os
import re
import json
import ast
from pathlib import Path
from collections import defaultdict, Counter
from dataclasses import dataclass, field
from typing import List, Dict, Set, Tuple, Optional
import argparse
from datetime import datetime

@dataclass
class ClasseAnalise:
    """Representa uma classe Java analisada"""
    nome: str
    caminho: str
    pacote: str
    tipo: str  # Entity, Service, Controller, DTO, etc.
    linhas: int
    metodos: List[str] = field(default_factory=list)
    dependencias: Set[str] = field(default_factory=set)
    anotacoes: Set[str] = field(default_factory=set)
    violacoes: List[str] = field(default_factory=list)
    complexidade: int = 0

@dataclass
class ViolacaoDDD:
    """Representa uma viola√ß√£o de DDD identificada"""
    tipo: str
    severidade: str  # ALTA, MEDIA, BAIXA
    classe: str
    descricao: str
    sugestao: str
    linha: Optional[int] = None

@dataclass
class RelatorioAnalise:
    """Relat√≥rio completo da an√°lise"""
    timestamp: str
    total_classes: int
    bounded_contexts: Dict[str, List[str]]
    violacoes: List[ViolacaoDDD]
    redundancias: List[Dict]
    oportunidades_solid: List[Dict]
    metricas: Dict[str, int]

class AnalisadorDDD:
    """Analisador principal para DDD e SOLID"""
    
    def __init__(self, projeto_root: str):
        self.projeto_root = Path(projeto_root)
        self.src_path = self.projeto_root / "src" / "main" / "java"
        self.classes: List[ClasseAnalise] = []
        self.violacoes: List[ViolacaoDDD] = []
        self.bounded_contexts: Dict[str, List[str]] = defaultdict(list)
        
    def analisar_projeto(self) -> RelatorioAnalise:
        """Executa an√°lise completa do projeto"""
        print("üîç Iniciando an√°lise avan√ßada DDD/SOLID...")
        
        # 1. Descobrir e analisar todas as classes
        self._descobrir_classes()
        
        # 2. Identificar Bounded Contexts
        self._identificar_bounded_contexts()
        
        # 3. Detectar viola√ß√µes DDD
        self._detectar_violacoes_ddd()
        
        # 4. Identificar redund√¢ncias
        redundancias = self._identificar_redundancias()
        
        # 5. Analisar oportunidades SOLID
        oportunidades_solid = self._analisar_solid()
        
        # 6. Calcular m√©tricas
        metricas = self._calcular_metricas()
        
        return RelatorioAnalise(
            timestamp=datetime.now().isoformat(),
            total_classes=len(self.classes),
            bounded_contexts=dict(self.bounded_contexts),
            violacoes=self.violacoes,
            redundancias=redundancias,
            oportunidades_solid=oportunidades_solid,
            metricas=metricas
        )
    
    def _descobrir_classes(self):
        """Descobre e analisa todas as classes Java"""
        print("üìÅ Descobrindo classes Java...")
        
        for java_file in self.src_path.rglob("*.java"):
            try:
                classe = self._analisar_classe(java_file)
                if classe:
                    self.classes.append(classe)
            except Exception as e:
                print(f"‚ö†Ô∏è Erro ao analisar {java_file}: {e}")
    
    def _analisar_classe(self, arquivo: Path) -> Optional[ClasseAnalise]:
        """Analisa uma classe Java espec√≠fica"""
        try:
            with open(arquivo, 'r', encoding='utf-8') as f:
                conteudo = f.read()
            
            # Extrair informa√ß√µes b√°sicas
            nome_classe = arquivo.stem
            pacote = self._extrair_pacote(conteudo)
            tipo = self._identificar_tipo_classe(nome_classe, conteudo)
            linhas = len(conteudo.splitlines())
            
            # Extrair m√©todos
            metodos = self._extrair_metodos(conteudo)
            
            # Extrair depend√™ncias
            dependencias = self._extrair_dependencias(conteudo)
            
            # Extrair anota√ß√µes
            anotacoes = self._extrair_anotacoes(conteudo)
            
            # Calcular complexidade ciclom√°tica b√°sica
            complexidade = self._calcular_complexidade(conteudo)
            
            return ClasseAnalise(
                nome=nome_classe,
                caminho=str(arquivo.relative_to(self.projeto_root)),
                pacote=pacote,
                tipo=tipo,
                linhas=linhas,
                metodos=metodos,
                dependencias=dependencias,
                anotacoes=anotacoes,
                complexidade=complexidade
            )
            
        except Exception as e:
            print(f"Erro ao analisar {arquivo}: {e}")
            return None
    
    def _extrair_pacote(self, conteudo: str) -> str:
        """Extrai o pacote da classe"""
        match = re.search(r'package\s+([\w.]+);', conteudo)
        return match.group(1) if match else ""
    
    def _identificar_tipo_classe(self, nome: str, conteudo: str) -> str:
        """Identifica o tipo da classe baseado no nome e conte√∫do"""
        if "Controller" in nome or "@RestController" in conteudo or "@Controller" in conteudo:
            return "Controller"
        elif "Service" in nome or "Servico" in nome or "@Service" in conteudo:
            return "Service"
        elif "Repository" in nome or "Repositorio" in nome or "@Repository" in conteudo:
            return "Repository"
        elif "DTO" in nome or "/dto/" in conteudo:
            return "DTO"
        elif "@Entity" in conteudo or "/entidade/" in conteudo:
            return "Entity"
        elif "Exception" in nome or "Excecao" in nome:
            return "Exception"
        elif "Config" in nome or "@Configuration" in conteudo:
            return "Configuration"
        elif nome.startswith("Constantes") or "Constants" in nome:
            return "Constants"
        else:
            return "Other"
    
    def _extrair_metodos(self, conteudo: str) -> List[str]:
        """Extrai nomes dos m√©todos p√∫blicos"""
        pattern = r'public\s+(?:static\s+)?(?:\w+\s+)*(\w+)\s*\('
        return re.findall(pattern, conteudo)
    
    def _extrair_dependencias(self, conteudo: str) -> Set[str]:
        """Extrai depend√™ncias (imports)"""
        pattern = r'import\s+([\w.]+);'
        imports = re.findall(pattern, conteudo)
        return set(imp.split('.')[-1] for imp in imports if not imp.startswith('java.'))
    
    def _extrair_anotacoes(self, conteudo: str) -> Set[str]:
        """Extrai anota√ß√µes da classe"""
        pattern = r'@(\w+)'
        return set(re.findall(pattern, conteudo))
    
    def _calcular_complexidade(self, conteudo: str) -> int:
        """Calcula complexidade ciclom√°tica b√°sica"""
        # Conta estruturas de controle
        patterns = [r'\bif\b', r'\bfor\b', r'\bwhile\b', r'\bswitch\b', 
                   r'\bcatch\b', r'\bcase\b', r'\?\s*:', r'&&', r'\|\|']
        
        complexidade = 1  # Base
        for pattern in patterns:
            complexidade += len(re.findall(pattern, conteudo))
        
        return complexidade
    
    def _identificar_bounded_contexts(self):
        """Identifica Bounded Contexts baseado na estrutura de pacotes"""
        print("üéØ Identificando Bounded Contexts...")
        
        contextos_mapeados = {
            'autenticacao': 'Contexto de Autentica√ß√£o',
            'batepapo': 'Contexto de Bate-Papo', 
            'loteria': 'Contexto de Loteria',
            'transacao': 'Contexto de Transa√ß√£o',
            'monitoramento': 'Contexto de Monitoramento',
            'seguranca': 'Contexto de Seguran√ßa',
            'privacidade': 'Contexto de Privacidade',
            'usuario': 'Contexto de Usu√°rio'
        }
        
        for classe in self.classes:
            for contexto_key, contexto_nome in contextos_mapeados.items():
                if contexto_key in classe.pacote.lower():
                    self.bounded_contexts[contexto_nome].append(classe.nome)
                    break
            else:
                # Classes que n√£o se encaixam em contextos espec√≠ficos
                if classe.tipo in ['Configuration', 'Constants', 'Exception']:
                    self.bounded_contexts['Infraestrutura'].append(classe.nome)
                else:
                    self.bounded_contexts['N√£o Classificado'].append(classe.nome)
    
    def _detectar_violacoes_ddd(self):
        """Detecta viola√ß√µes de DDD"""
        print("‚ö†Ô∏è Detectando viola√ß√µes DDD...")
        
        for classe in self.classes:
            # Viola√ß√£o 1: Entidades an√™micas
            if classe.tipo == "Entity":
                if self._eh_entidade_anemica(classe):
                    self.violacoes.append(ViolacaoDDD(
                        tipo="ENTIDADE_ANEMICA",
                        severidade="ALTA",
                        classe=classe.nome,
                        descricao=f"Entidade {classe.nome} possui apenas getters/setters",
                        sugestao="Adicionar l√≥gica de dom√≠nio e invariantes na entidade"
                    ))
            
            # Viola√ß√£o 2: Services com muitas responsabilidades
            if classe.tipo == "Service" and classe.complexidade > 20:
                self.violacoes.append(ViolacaoDDD(
                    tipo="SERVICE_COMPLEXO",
                    severidade="MEDIA",
                    classe=classe.nome,
                    descricao=f"Service {classe.nome} tem complexidade alta ({classe.complexidade})",
                    sugestao="Dividir em services menores seguindo Single Responsibility"
                ))
            
            # Viola√ß√£o 3: DTOs com anota√ß√µes JPA
            if classe.tipo == "DTO" and any(ann in classe.anotacoes for ann in ['Entity', 'Table', 'Id']):
                self.violacoes.append(ViolacaoDDD(
                    tipo="DTO_COM_JPA",
                    severidade="ALTA",
                    classe=classe.nome,
                    descricao=f"DTO {classe.nome} possui anota√ß√µes JPA",
                    sugestao="Separar DTO de entidade JPA, usar mapeamento"
                ))
    
    def _eh_entidade_anemica(self, classe: ClasseAnalise) -> bool:
        """Verifica se uma entidade √© an√™mica"""
        metodos_negocio = [m for m in classe.metodos 
                          if not m.startswith('get') and not m.startswith('set') 
                          and not m.startswith('is') and m not in ['equals', 'hashCode', 'toString']]
        
        return len(metodos_negocio) < 2  # Menos de 2 m√©todos de neg√≥cio
    
    def _identificar_redundancias(self) -> List[Dict]:
        """Identifica redund√¢ncias no c√≥digo"""
        print("üîÑ Identificando redund√¢ncias...")
        
        redundancias = []
        
        # Agrupar por nome similar
        nomes_similares = defaultdict(list)
        for classe in self.classes:
            nome_base = re.sub(r'(Controller|Service|Repository|DTO|Impl)$', '', classe.nome)
            nomes_similares[nome_base].append(classe)
        
        # Identificar poss√≠veis duplica√ß√µes
        for nome_base, classes_grupo in nomes_similares.items():
            if len(classes_grupo) > 3:  # Muitas classes com nome similar
                redundancias.append({
                    'tipo': 'NOMES_SIMILARES',
                    'nome_base': nome_base,
                    'classes': [c.nome for c in classes_grupo],
                    'sugestao': f'Revisar se todas as {len(classes_grupo)} classes s√£o necess√°rias'
                })
        
        return redundancias
    
    def _analisar_solid(self) -> List[Dict]:
        """Analisa oportunidades de aplica√ß√£o dos princ√≠pios SOLID"""
        print("üîß Analisando oportunidades SOLID...")
        
        oportunidades = []
        
        for classe in self.classes:
            # Single Responsibility: Classes muito grandes
            if classe.linhas > 500:
                oportunidades.append({
                    'principio': 'Single Responsibility',
                    'classe': classe.nome,
                    'problema': f'Classe muito grande ({classe.linhas} linhas)',
                    'sugestao': 'Dividir em classes menores com responsabilidades espec√≠ficas'
                })
            
            # Open/Closed: Services que podem ser extens√≠veis
            if classe.tipo == "Service" and len(classe.metodos) > 10:
                oportunidades.append({
                    'principio': 'Open/Closed',
                    'classe': classe.nome,
                    'problema': f'Service com muitos m√©todos ({len(classe.metodos)})',
                    'sugestao': 'Considerar padr√£o Strategy ou Command para extensibilidade'
                })
        
        return oportunidades
    
    def _calcular_metricas(self) -> Dict[str, int]:
        """Calcula m√©tricas do projeto"""
        metricas = {
            'total_classes': len(self.classes),
            'total_linhas': sum(c.linhas for c in self.classes),
            'complexidade_media': sum(c.complexidade for c in self.classes) // len(self.classes) if self.classes else 0,
            'violacoes_alta': len([v for v in self.violacoes if v.severidade == 'ALTA']),
            'violacoes_media': len([v for v in self.violacoes if v.severidade == 'MEDIA']),
            'violacoes_baixa': len([v for v in self.violacoes if v.severidade == 'BAIXA'])
        }
        
        # M√©tricas por tipo
        tipos = Counter(c.tipo for c in self.classes)
        metricas.update({f'total_{tipo.lower()}': count for tipo, count in tipos.items()})
        
        return metricas

def main():
    parser = argparse.ArgumentParser(description='Analisador Avan√ßado DDD/SOLID')
    parser.add_argument('--projeto', default='.', help='Caminho do projeto')
    parser.add_argument('--output', default='docs/analise', help='Diret√≥rio de sa√≠da')
    
    args = parser.parse_args()
    
    # Executar an√°lise
    analisador = AnalisadorDDD(args.projeto)
    relatorio = analisador.analisar_projeto()
    
    # Salvar relat√≥rio
    output_dir = Path(args.output)
    output_dir.mkdir(parents=True, exist_ok=True)
    
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    arquivo_json = output_dir / f"analise-ddd-{timestamp}.json"
    
    with open(arquivo_json, 'w', encoding='utf-8') as f:
        json.dump(relatorio.__dict__, f, indent=2, ensure_ascii=False, default=str)
    
    print(f"\n‚úÖ An√°lise conclu√≠da!")
    print(f"üìÑ Relat√≥rio salvo em: {arquivo_json}")
    print(f"üìä Total de classes analisadas: {relatorio.total_classes}")
    print(f"‚ö†Ô∏è Viola√ß√µes encontradas: {len(relatorio.violacoes)}")

if __name__ == "__main__":
    main()
