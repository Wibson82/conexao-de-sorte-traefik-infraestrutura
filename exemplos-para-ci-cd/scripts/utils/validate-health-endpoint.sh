#!/bin/bash
# =============================================================================
# SCRIPT DE VALIDA√á√ÉO DO ENDPOINT DE SA√öDE
# =============================================================================
# Este script valida se o endpoint /actuator/health est√° acess√≠vel
# Uso: ./scripts/utils/validate-health-endpoint.sh [teste|prod]
# =============================================================================

set -euo pipefail

# Cores para sa√≠da
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configura√ß√µes
DEPLOY_TYPE="${1:-teste}"
TIMEOUT=30

echo -e "${BLUE}üîç VALIDA√á√ÉO DO ENDPOINT DE SA√öDE${NC}"
echo "=================================="

# Validar par√¢metros
if [[ "$DEPLOY_TYPE" != "teste" && "$DEPLOY_TYPE" != "prod" ]]; then
    echo -e "${RED}‚ùå Tipo de deploy inv√°lido: ${DEPLOY_TYPE}${NC}"
    echo "Uso: $0 [teste|prod]"
    exit 1
fi

# Configurar URLs baseado no tipo de deploy
if [[ "$DEPLOY_TYPE" == "teste" ]]; then
    LOCAL_URL="http://localhost:8081/actuator/health"
    EXTERNAL_URL="https://www.conexaodesorte.com.br/teste/rest/actuator/health"
    CONTAINER_NAME="backend-teste"
else
    LOCAL_URL="http://localhost:8080/actuator/health"
    EXTERNAL_URL="https://www.conexaodesorte.com.br/rest/actuator/health"
    CONTAINER_NAME="backend-prod"
fi

echo -e "${BLUE}üéØ Validando ambiente: ${DEPLOY_TYPE}${NC}"
echo -e "${BLUE}üìã URL local: ${LOCAL_URL}${NC}"
echo -e "${BLUE}üìã URL externa: ${EXTERNAL_URL}${NC}"

# Verificar se container est√° rodando
echo -e "${BLUE}üîç Verificando se o container est√° rodando...${NC}"
if ! docker ps --format '{{.Names}}' | grep -q "^${CONTAINER_NAME}$"; then
    echo -e "${RED}‚ùå Container ${CONTAINER_NAME} n√£o est√° em execu√ß√£o${NC}"
    echo "Execute o deploy primeiro"
    exit 1
fi

echo -e "${GREEN}‚úÖ Container ${CONTAINER_NAME} est√° rodando${NC}"

# Testar acesso local
echo -e "${BLUE}üîç Testando acesso local...${NC}"
if curl -f -s --connect-timeout "$TIMEOUT" "$LOCAL_URL" >/dev/null 2>&1; then
    echo -e "${GREEN}‚úÖ Endpoint local acess√≠vel: ${LOCAL_URL}${NC}"

    # Mostrar resposta local
    HEALTH_RESPONSE=$(curl -s --connect-timeout "$TIMEOUT" "$LOCAL_URL" 2>/dev/null || echo "{}")
    echo -e "${BLUE}üìã Resposta do health check:${NC}"
    echo "$HEALTH_RESPONSE" | python3 -m json.tool 2>/dev/null || echo "$HEALTH_RESPONSE"
else
    echo -e "${RED}‚ùå Endpoint local n√£o acess√≠vel: ${LOCAL_URL}${NC}"
    echo -e "${YELLOW}‚ö†Ô∏è Verifique os logs do container:${NC}"
    docker logs --tail 20 "${CONTAINER_NAME}"
    exit 1
fi

# Testar acesso externo
echo -e "${BLUE}üîç Testando acesso externo...${NC}"
if curl -f -s --connect-timeout "$TIMEOUT" "$EXTERNAL_URL" >/dev/null 2>&1; then
    echo -e "${GREEN}‚úÖ Endpoint externo acess√≠vel: ${EXTERNAL_URL}${NC}"

    # Mostrar resposta externa
    EXTERNAL_RESPONSE=$(curl -s --connect-timeout "$TIMEOUT" "$EXTERNAL_URL" 2>/dev/null || echo "{}")
    echo -e "${BLUE}üìã Resposta externa do health check:${NC}"
    echo "$EXTERNAL_RESPONSE" | python3 -m json.tool 2>/dev/null || echo "$EXTERNAL_RESPONSE"
else
    echo -e "${RED}‚ùå Endpoint externo n√£o acess√≠vel: ${EXTERNAL_URL}${NC}"
    echo -e "${YELLOW}‚ö†Ô∏è Poss√≠veis problemas:${NC}"
    echo "   1. Proxy reverso (Nginx/Load Balancer) n√£o configurado"
    echo "   2. Firewall bloqueando a porta"
    echo "   3. SSL/TLS mal configurado"
    echo "   4. DNS n√£o resolvendo corretamente"

    # Testar conectividade b√°sica
    echo -e "${BLUE}üîç Testando conectividade b√°sica...${NC}"
    if curl -I -s --connect-timeout 10 "https://www.conexaodesorte.com.br" >/dev/null 2>&1; then
        echo -e "${YELLOW}‚ö†Ô∏è Servidor est√° acess√≠vel, problema espec√≠fico do endpoint${NC}"
    else
        echo -e "${RED}‚ùå Servidor n√£o est√° acess√≠vel${NC}"
    fi

    exit 1
fi

echo -e "${GREEN}üéâ Valida√ß√£o do endpoint de sa√∫de conclu√≠da com sucesso!${NC}"
echo -e "${GREEN}‚úÖ Ambiente ${DEPLOY_TYPE} est√° configurado corretamente${NC}"
