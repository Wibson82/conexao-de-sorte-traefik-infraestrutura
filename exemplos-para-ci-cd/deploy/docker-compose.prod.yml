# üöÄ Production-Ready Docker Compose
# ‚úÖ GitOps + Blue-Green + Persistent Data + Zero Downtime

# ===== REDES =====
networks:
  conexao-net:
    external: true
    name: conexao-network


# ===== VOLUMES PERSISTENTES =====
volumes:
  mysql_data:
    external: true
    name: conexao_mysql_data

  grafana_data:
    external: true
    name: conexao_grafana_data
  sonarqube_data:
    external: true
    name: conexao_sonarqube_data
  sonarqube_extensions:
    external: true
    name: conexao_sonarqube_extensions
  sonarqube_logs:
    external: true
    name: conexao_sonarqube_logs

# ===== CONFIGURA√á√ïES =====
configs:
  prometheus_config:
    content: |
      global:
        scrape_interval: 15s
        evaluation_interval: 15s

      scrape_configs:
        - job_name: 'prometheus'
          static_configs:
            - targets: ['localhost:9090']

        - job_name: 'conexao-backend-green'
          metrics_path: '/actuator/prometheus'
          static_configs:
            - targets: ['conexao-backend-green:8080']
          scrape_interval: 10s

        - job_name: 'conexao-backend-blue'
          metrics_path: '/actuator/prometheus'
          static_configs:
            - targets: ['conexao-backend-blue:8080']
          scrape_interval: 10s

# ===== SERVI√áOS =====
services:
  # ===== MYSQL - Banco de Dados Persistente =====
  mysql:
    image: mysql:8.4
    container_name: conexao-mysql
    environment:
      # MySQL root password (apenas para inicializa√ß√£o)
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=conexao_de_sorte
      - MYSQL_ROOT_HOST=%
      - TZ=America/Sao_Paulo

    ports:
      - "3306:3306"  # Acesso externo para Workbench

    volumes:
      - mysql_data:/var/lib/mysql
      - ./mysql/init:/docker-entrypoint-initdb.d:ro

    networks:
      - conexao-net

    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

    restart: always

    command: >
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_unicode_ci
      --skip-name-resolve

  # ===== BACKEND - Blue Instance =====
  backend-blue:
    image: facilita/conexao-de-sorte-backend:${IMAGE_TAG:-latest}
    container_name: conexao-backend-blue
    environment:
      # Spring Boot - Perfil de produ√ß√£o para VPS Hostinger
      - SPRING_PROFILES_ACTIVE=prod,azure
      - SERVER_PORT=8080
      - ENVIRONMENT=production
      - TZ=America/Sao_Paulo
      - INSTANCE_COLOR=blue

      # Configura√ß√£o Azure Key Vault com fallback
      - AZURE_KEYVAULT_ENABLED=true
      - AZURE_KEYVAULT_ENDPOINT=${AZURE_KEYVAULT_ENDPOINT}
      - AZURE_CLIENT_ID=${AZURE_CLIENT_ID}
      - AZURE_CLIENT_SECRET=${AZURE_CLIENT_SECRET}
      - AZURE_TENANT_ID=${AZURE_TENANT_ID}
      - AZURE_KEYVAULT_FALLBACK_ENABLED=true

      # Criptografia - Segredos via Azure Key Vault ou vari√°veis de ambiente
      - APP_ENCRYPTION_MASTER_PASSWORD=${APP_ENCRYPTION_MASTER_PASSWORD}

      # Database - Credenciais via GitHub Secrets
      - SPRING_DATASOURCE_URL=${CONEXAO_DE_SORTE_DATABASE_URL}
      - SPRING_DATASOURCE_USERNAME=${CONEXAO_DE_SORTE_DATABASE_USERNAME}
      - SPRING_DATASOURCE_PASSWORD=${CONEXAO_DE_SORTE_DATABASE_PASSWORD}
      - CONEXAO_DE_SORTE_DATABASE_USERNAME=${CONEXAO_DE_SORTE_DATABASE_USERNAME}
      - CONEXAO_DE_SORTE_DATABASE_PASSWORD=${CONEXAO_DE_SORTE_DATABASE_PASSWORD}

      # JVM Otimizado
      - JAVA_OPTS=-server -Xms512m -Xmx2048m -XX:+UseG1GC -XX:MaxGCPauseMillis=200 -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/tmp/

      # Monitoramento
      - MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE=health,info,metrics,prometheus
      - MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS=always
      - MANAGEMENT_METRICS_EXPORT_PROMETHEUS_ENABLED=true

    labels:
      # üè∑Ô∏è Labels para rastreabilidade (boa pr√°tica DevOps)
      - "com.conexaodesorte.version=${IMAGE_TAG:-latest}"
      - "com.conexaodesorte.commit=${COMMIT_SHA:-unknown}"
      - "com.conexaodesorte.environment=production"
      - "com.conexaodesorte.deployed-at=${DEPLOY_TIMESTAMP:-unknown}"


    networks:
      - conexao-net

    depends_on:
      mysql:
        condition: service_healthy

  # ===== BACKEND - Green Instance (Ativo) =====
  backend-green:
    image: facilita/conexao-de-sorte-backend:${IMAGE_TAG:-latest}
    container_name: conexao-backend-green
    environment:
      # Spring Boot - Perfil de produ√ß√£o para VPS Hostinger
      - SPRING_PROFILES_ACTIVE=prod,azure
      - SERVER_PORT=8080
      - ENVIRONMENT=production
      - TZ=America/Sao_Paulo
      - INSTANCE_COLOR=green

      # Configura√ß√£o Azure Key Vault com fallback
      - AZURE_KEYVAULT_ENABLED=true
      - AZURE_KEYVAULT_ENDPOINT=${AZURE_KEYVAULT_ENDPOINT}
      - AZURE_CLIENT_ID=${AZURE_CLIENT_ID}
      - AZURE_CLIENT_SECRET=${AZURE_CLIENT_SECRET}
      - AZURE_TENANT_ID=${AZURE_TENANT_ID}
      - AZURE_KEYVAULT_FALLBACK_ENABLED=true

      # Criptografia - Segredos via Azure Key Vault ou vari√°veis de ambiente
      - APP_ENCRYPTION_MASTER_PASSWORD=${APP_ENCRYPTION_MASTER_PASSWORD}

      # Database - Credenciais via GitHub Secrets
      - SPRING_DATASOURCE_URL=${CONEXAO_DE_SORTE_DATABASE_URL}
      - SPRING_DATASOURCE_USERNAME=${CONEXAO_DE_SORTE_DATABASE_USERNAME}
      - SPRING_DATASOURCE_PASSWORD=${CONEXAO_DE_SORTE_DATABASE_PASSWORD}
      - CONEXAO_DE_SORTE_DATABASE_USERNAME=${CONEXAO_DE_SORTE_DATABASE_USERNAME}
      - CONEXAO_DE_SORTE_DATABASE_PASSWORD=${CONEXAO_DE_SORTE_DATABASE_PASSWORD}

      # JVM Otimizado
      - JAVA_OPTS=-server -Xms512m -Xmx2048m -XX:+UseG1GC -XX:MaxGCPauseMillis=200 -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/tmp/

      # Monitoramento
      - MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE=health,info,metrics,prometheus
      - MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS=always
      - MANAGEMENT_METRICS_EXPORT_PROMETHEUS_ENABLED=true

    labels:
      # üè∑Ô∏è Labels para rastreabilidade (boa pr√°tica DevOps)
      - "com.conexaodesorte.version=${IMAGE_TAG:-latest}"
      - "com.conexaodesorte.commit=${COMMIT_SHA:-unknown}"
      - "com.conexaodesorte.environment=production"
      - "com.conexaodesorte.deployed-at=${DEPLOY_TIMESTAMP:-unknown}"


    networks:
      - conexao-net

    depends_on:
      mysql:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/api/rawdata"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s



  # ===== PROMETHEUS - Monitoramento =====
  prometheus:
    image: prom/prometheus:latest
    container_name: conexao-prometheus
    ports:
      - "9090:9090"

    # Usar configura√ß√£o inline para evitar problemas de mount
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'

    configs:
      - source: prometheus_config
        target: /etc/prometheus/prometheus.yml

    networks:
      - conexao-net

    restart: unless-stopped

  # ===== GRAFANA - Dashboards =====
  grafana:
    image: grafana/grafana:latest
    container_name: conexao-grafana
    ports:
      - "3001:3000"

    volumes:
      - grafana_data:/var/lib/grafana

    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel

    networks:
      - conexao-net

    restart: unless-stopped

    depends_on:
      - prometheus

  # ===== SONARQUBE - An√°lise de Qualidade de C√≥digo =====
  sonarqube:
    image: sonarqube:10.8-community
    container_name: conexao-sonarqube
    ports:
      - "9000:9000"

    environment:
      - SONAR_JDBC_URL=jdbc:mysql://mysql:3306/sonarqube?useUnicode=true&characterEncoding=utf8&rewriteBatchedStatements=true&useConfigs=maxPerformance&useSSL=false
      - SONAR_JDBC_USERNAME=${SONAR_DB_USERNAME:-sonarqube}
      - SONAR_JDBC_PASSWORD=${SONAR_DB_PASSWORD:-sonarqube123}
      - SONAR_WEB_HOST=0.0.0.0
      - SONAR_WEB_PORT=9000
      - SONAR_WEB_CONTEXT=/
      - SONAR_CE_JAVAOPTS=-Xmx1024m -Xms512m -XX:+HeapDumpOnOutOfMemoryError
      - SONAR_WEB_JAVAOPTS=-Xmx1024m -Xms512m -XX:+HeapDumpOnOutOfMemoryError

    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_extensions:/opt/sonarqube/extensions
      - sonarqube_logs:/opt/sonarqube/logs

    networks:
      - conexao-net

    depends_on:
      mysql:
        condition: service_healthy

    restart: unless-stopped

    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9000/api/system/status"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s

    labels:
      - "com.conexaodesorte.service=sonarqube"
      - "com.conexaodesorte.environment=production"


  # ===== FRONTEND - React Application =====
  frontend:
    image: facilita/conexao-de-sorte-frontend:${FRONTEND_TAG:-latest}
    container_name: conexao-frontend
    labels:
      # üè∑Ô∏è Labels para rastreabilidade
      - "com.conexaodesorte.service=frontend"
      - "com.conexaodesorte.version=${FRONTEND_TAG:-latest}"
      - "com.conexaodesorte.environment=production"
      - "com.conexaodesorte.deployed-at=${DEPLOY_TIMESTAMP:-unknown}"



    networks:
      - conexao-net

    restart: unless-stopped

    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

# ===== CONFIGURA√á√ÉO PRODUCTION-READY COMPLETA =====
