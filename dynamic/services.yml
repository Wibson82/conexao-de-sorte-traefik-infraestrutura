# =============================================================================
# SERVIÇOS DINÂMICOS - CONEXÃO DE SORTE TRAEFIK
# =============================================================================
# Definições de roteamento para todos os serviços da infraestrutura
# Estes serviços são descobertos automaticamente via Docker labels,
# mas podem ser sobrescritos aqui se necessário

http:
  # =============================================================================
  # ROUTERS (ROTEADORES)
  # =============================================================================
  routers:
    # =========================================================================
    # FRONTEND - APLICAÇÃO WEB PRINCIPAL
    # =========================================================================

    # Frontend HTTPS - Rota principal
    frontend-https:
      rule: "Host(`conexaodesorte.com.br`, `www.conexaodesorte.com.br`) && !PathPrefix(`/rest`, `/api`, `/actuator`)"
      entryPoints:
        - websecure
      service: frontend-service
      priority: 10  # Prioridade baixa (catch-all para SPA)
      tls:
        certResolver: letsencrypt
        domains:
          - main: conexaodesorte.com.br
            sans:
              - www.conexaodesorte.com.br
      middlewares:
        - frontend-chain@file

    # =========================================================================
    # BACKEND - API REST
    # =========================================================================

    # Backend API REST - /rest/*
    backend-api-rest:
      rule: "Host(`conexaodesorte.com.br`, `www.conexaodesorte.com.br`) && PathPrefix(`/rest`)"
      entryPoints:
        - websecure
      service: backend-service
      priority: 100  # Prioridade alta
      tls:
        certResolver: letsencrypt
      middlewares:
        - api-chain@file

    # Backend API v1 - /api/v1/*
    backend-api-v1:
      rule: "Host(`conexaodesorte.com.br`, `www.conexaodesorte.com.br`) && PathPrefix(`/api/v1`)"
      entryPoints:
        - websecure
      service: backend-service
      priority: 90
      tls:
        certResolver: letsencrypt
      middlewares:
        - api-security-headers@file
        - cors-api@file
        - strip-api-v1-prefix@file
        - add-v1-prefix@file
        - rate-limit-api@file

    # Backend Actuator - /actuator/*
    backend-actuator:
      rule: "Host(`conexaodesorte.com.br`, `www.conexaodesorte.com.br`) && PathPrefix(`/actuator`)"
      entryPoints:
        - websecure
      service: backend-service
      priority: 95
      tls:
        certResolver: letsencrypt
      middlewares:
        - api-security-headers@file
        - rate-limit@file
        # - admin-whitelist@file  # Descomente para restringir acesso

    # =========================================================================
    # SUBDOMÍNIOS DE MONITORAMENTO
    # =========================================================================

    # Traefik Dashboard
    traefik-dashboard:
      rule: "Host(`traefik.conexaodesorte.com.br`)"
      entryPoints:
        - websecure
      service: api@internal
      priority: 100
      tls:
        certResolver: letsencrypt
      middlewares:
        - dashboard-auth@file
        - security-headers@file

    # Prometheus (se habilitado)
    prometheus-monitoring:
      rule: "Host(`prometheus.conexaodesorte.com.br`)"
      entryPoints:
        - websecure
      service: prometheus-service
      priority: 100
      tls:
        certResolver: letsencrypt
      middlewares:
        - dashboard-auth@file
        - security-headers@file

    # Grafana (se habilitado)
    grafana-monitoring:
      rule: "Host(`grafana.conexaodesorte.com.br`)"
      entryPoints:
        - websecure
      service: grafana-service
      priority: 100
      tls:
        certResolver: letsencrypt
      middlewares:
        - security-headers@file

    # =========================================================================
    # ROTAS DE TESTE (MIGRADO E EXPANDIDO)
    # =========================================================================

    # Backend Teste API REST - /teste/rest/*
    backend-teste-api-rest:
      rule: "Host(`conexaodesorte.com.br`, `www.conexaodesorte.com.br`) && PathPrefix(`/teste/rest`)"
      entryPoints:
        - websecure
      service: backend-teste-service
      priority: 110  # Prioridade mais alta que produção
      tls:
        certResolver: letsencrypt
      middlewares:
        - api-chain@file
        - strip-teste-prefix@file

    # Fretes Website - /teste/frete/*
    fretes-website:
      rule: "Host(`conexaodesorte.com.br`, `www.conexaodesorte.com.br`) && PathPrefix(`/teste/frete`)"
      entryPoints:
        - websecure
      service: fretes-website-service
      priority: 115  # Prioridade mais alta que backend teste
      tls:
        certResolver: letsencrypt
      middlewares:
        - frontend-chain@file
        - strip-teste-frete-prefix@file

    # Frontend Teste - /teste/*
    frontend-teste:
      rule: "Host(`conexaodesorte.com.br`, `www.conexaodesorte.com.br`) && PathPrefix(`/teste`) && !PathPrefix(`/teste/rest`, `/teste/frete`)"
      entryPoints:
        - websecure
      service: frontend-teste-service
      priority: 105  # Prioridade alta
      tls:
        certResolver: letsencrypt
      middlewares:
        - frontend-chain@file
        - strip-teste-prefix@file

    # =========================================================================
    # ROTAS DE DESENVOLVIMENTO (COMENTADAS POR PADRÃO)
    # =========================================================================

    # # Frontend Development
    # frontend-dev:
    #   rule: "Host(`dev.conexaodesorte.com.br`)"
    #   entryPoints:
    #     - websecure
    #   service: frontend-dev-service
    #   tls:
    #     certResolver: letsencrypt
    #   middlewares:
    #     - cors-dev@file
    #     - security-headers@file

    # # Backend Development
    # backend-dev:
    #   rule: "Host(`api-dev.conexaodesorte.com.br`)"
    #   entryPoints:
    #     - websecure
    #   service: backend-dev-service
    #   tls:
    #     certResolver: letsencrypt
    #   middlewares:
    #     - cors-dev@file
    #     - api-security-headers@file

  # =============================================================================
  # SERVICES (DEFINIÇÕES DE SERVIÇOS)
  # =============================================================================
  services:
    # =========================================================================
    # FRONTEND SERVICE
    # =========================================================================
    frontend-service:
      loadBalancer:
        servers:
          - url: "http://conexao-frontend:3000"

        # Health check para frontend
        healthCheck:
          path: /
          method: GET
          interval: 30s
          timeout: 5s
          headers:
            Host: conexaodesorte.com.br

        # Configurações de balanceamento
        sticky:
          cookie:
            name: frontend-server
            secure: true
            httpOnly: true

    # =========================================================================
    # BACKEND SERVICE
    # =========================================================================
    backend-service:
      loadBalancer:
        servers:
          - url: "http://conexao-backend:8080"

        # Health check para backend
        healthCheck:
          path: /actuator/health/readiness
          method: GET
          interval: 30s
          timeout: 10s
          headers:
            Host: conexaodesorte.com.br

        # Configurações de balanceamento
        sticky:
          cookie:
            name: backend-server
            secure: true
            httpOnly: true

        # Configurações de passthrough
        passHostHeader: true

    # =========================================================================
    # MONITORING SERVICES
    # =========================================================================

    # Prometheus Service (MIGRADO de conexao-traefik-infrastructure)
    prometheus-service:
      loadBalancer:
        servers:
          - url: "http://conexao-prometheus-centralizado:9090"
        healthCheck:
          path: /-/healthy
          interval: 30s
          timeout: 5s

    # Grafana Service (MIGRADO de conexao-traefik-infrastructure)
    grafana-service:
      loadBalancer:
        servers:
          - url: "http://conexao-grafana-centralizado:3000"
        healthCheck:
          path: /api/health
          interval: 30s
          timeout: 5s

    # =========================================================================
    # BACKEND TESTE SERVICE (NOVO)
    # =========================================================================

    # Backend de Teste Service
    backend-teste-service:
      loadBalancer:
        servers:
          - url: "http://conexao-backend-teste:8081"

        # Health check para backend teste
        healthCheck:
          path: /actuator/health/readiness
          method: GET
          interval: 30s
          timeout: 10s
          headers:
            Host: conexaodesorte.com.br

        # Configurações de balanceamento
        sticky:
          cookie:
            name: backend-teste-server
            secure: true
            httpOnly: true

        # Configurações de passthrough
        passHostHeader: true

    # Frontend Teste Service
    frontend-teste-service:
      loadBalancer:
        servers:
          - url: "http://conexao-frontend-teste:3000"

        # Health check para frontend teste
        healthCheck:
          path: /health
          method: GET
          interval: 30s
          timeout: 5s
          headers:
            Host: conexaodesorte.com.br

        # Configurações de balanceamento
        sticky:
          cookie:
            name: frontend-teste-server
            secure: true
            httpOnly: true

    # Fretes Website Service
    fretes-website-service:
      loadBalancer:
        servers:
          - url: "http://fretes-website:3000"

        # Health check para fretes website
        healthCheck:
          path: /health
          method: GET
          interval: 30s
          timeout: 5s
          headers:
            Host: conexaodesorte.com.br

        # Configurações de balanceamento
        sticky:
          cookie:
            name: fretes-website-server
            secure: true
            httpOnly: true

    # =========================================================================
    # DEVELOPMENT SERVICES (COMENTADOS POR PADRÃO)
    # =========================================================================

    # # Frontend Development Service
    # frontend-dev-service:
    #   loadBalancer:
    #     servers:
    #       - url: "http://conexao-frontend-dev:3000"
    #     healthCheck:
    #       path: /
    #       interval: 30s
    #       timeout: 5s

    # # Backend Development Service
    # backend-dev-service:
    #   loadBalancer:
    #     servers:
    #       - url: "http://conexao-backend-dev:8080"
    #     healthCheck:
    #       path: /actuator/health
    #       interval: 30s
    #       timeout: 10s

# =============================================================================
# CONFIGURAÇÕES TLS DINÂMICAS
# =============================================================================
tls:
  # Certificados adicionais (se necessário)
  certificates: []

  # Opções TLS específicas por serviço
  options:
    # Configuração TLS para APIs (mais restritiva)
    api-tls:
      minVersion: "VersionTLS12"
      maxVersion: "VersionTLS13"
      cipherSuites:
        - "TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384"
        - "TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305"
      sniStrict: true

    # Configuração TLS para frontend (compatibilidade)
    frontend-tls:
      minVersion: "VersionTLS12"
      maxVersion: "VersionTLS13"
      sniStrict: false
